
BobCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a48  00000adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  00000ae4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169d  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d12  00000000  00000000  00002391  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c52  00000000  00000000  000030a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00003cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000784  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008df  00000000  00000000  000047d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000050b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	9a 00       	.word	0x009a	; ????
  6a:	a6 00       	.word	0x00a6	; ????
  6c:	94 00       	.word	0x0094	; ????
  6e:	a8 00       	.word	0x00a8	; ????
  70:	96 00       	.word	0x0096	; ????
  72:	a6 00       	.word	0x00a6	; ????
  74:	a6 00       	.word	0x00a6	; ????
  76:	9e 00       	.word	0x009e	; ????
  78:	a6 00       	.word	0x00a6	; ????
  7a:	a6 00       	.word	0x00a6	; ????
  7c:	a0 00       	.word	0x00a0	; ????
  7e:	a6 00       	.word	0x00a6	; ????
  80:	a6 00       	.word	0x00a6	; ????
  82:	a6 00       	.word	0x00a6	; ????
  84:	92 00       	.word	0x0092	; ????
  86:	a6 00       	.word	0x00a6	; ????
  88:	9c 00       	.word	0x009c	; ????
  8a:	a6 00       	.word	0x00a6	; ????
  8c:	a6 00       	.word	0x00a6	; ????
  8e:	a6 00       	.word	0x00a6	; ????
  90:	a6 00       	.word	0x00a6	; ????
  92:	a4 00       	.word	0x00a4	; ????
  94:	a6 00       	.word	0x00a6	; ????
  96:	98 00       	.word	0x0098	; ????
  98:	a6 00       	.word	0x00a6	; ????
  9a:	a6 00       	.word	0x00a6	; ????
  9c:	a6 00       	.word	0x00a6	; ????
  9e:	a6 00       	.word	0x00a6	; ????
  a0:	a6 00       	.word	0x00a6	; ????
  a2:	a6 00       	.word	0x00a6	; ????
  a4:	a6 00       	.word	0x00a6	; ????
  a6:	a6 00       	.word	0x00a6	; ????
  a8:	a6 00       	.word	0x00a6	; ????
  aa:	a6 00       	.word	0x00a6	; ????
  ac:	a6 00       	.word	0x00a6	; ????
  ae:	a6 00       	.word	0x00a6	; ????
  b0:	a6 00       	.word	0x00a6	; ????
  b2:	a6 00       	.word	0x00a6	; ????
  b4:	a6 00       	.word	0x00a6	; ????
  b6:	a6 00       	.word	0x00a6	; ????
  b8:	a6 00       	.word	0x00a6	; ????
  ba:	a6 00       	.word	0x00a6	; ????
  bc:	a2 00       	.word	0x00a2	; ????
  be:	51 01       	movw	r10, r2
  c0:	56 01       	movw	r10, r12
  c2:	5b 01       	movw	r10, r22
  c4:	60 01       	movw	r12, r0
  c6:	65 01       	movw	r12, r10
  c8:	6a 01       	movw	r12, r20
  ca:	6f 01       	movw	r12, r30

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e8 e4       	ldi	r30, 0x48	; 72
  e0:	fa e0       	ldi	r31, 0x0A	; 10
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 30       	cpi	r26, 0x08	; 8
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e0       	ldi	r26, 0x08	; 8
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ac 30       	cpi	r26, 0x0C	; 12
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 c0 00 	call	0x180	; 0x180 <main>
 102:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <CTRL_GetCommand>:
	UART_putstring(&message[0]);
}

enum commands CTRL_GetCommand(){
	char received_char;
	received_char = UART_read();
 10a:	0e 94 ac 02 	call	0x558	; 0x558 <UART_read>
	
	switch(received_char){
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	e3 54       	subi	r30, 0x43	; 67
 114:	f1 09       	sbc	r31, r1
 116:	eb 32       	cpi	r30, 0x2B	; 43
 118:	f1 05       	cpc	r31, r1
 11a:	c0 f4       	brcc	.+48     	; 0x14c <CTRL_GetCommand+0x42>
 11c:	ec 5c       	subi	r30, 0xCC	; 204
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__tablejump2__>
		case 'F':
			return FORWARD;
			break;
		case 'Q':
			return FORWARD_LEFT;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
			break;
		case 'E':
			return FORWARD_RIGHT;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	08 95       	ret
			break;
		case 'G':
			return BACKWARDS;
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	08 95       	ret
			break;
		case 'Z':
			return BACKWARDS_LEFT;
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	08 95       	ret
			break;
		case 'C':
			return BACKWARDS_RIGHT;
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	08 95       	ret
			break;
		case 'S':
			return NEUTRAL;
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	08 95       	ret
			break;
		case 'J':
			return POWER;
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	08 95       	ret
			break;
		case 'M':
			return LIGHTS_ON;
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	08 95       	ret
			break;
		case 'm':
			return LIGHTS_OFF;
 144:	89 e0       	ldi	r24, 0x09	; 9
 146:	08 95       	ret
			break;
		case 'X':
			return BEEP;
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	08 95       	ret
			break;
		default:
			return UNKNOWN;
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	08 95       	ret
	char received_char;
	received_char = UART_read();
	
	switch(received_char){
		case 'F':
			return FORWARD;
 150:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return UNKNOWN;
			break;
	}
}
 152:	08 95       	ret

00000154 <Init_Timer0>:
/* Init_Timer0
*  Initialize Timer0 for Fast PWM on pin 5 (BUZZER)
*/
void Init_Timer0() {
	//		  tmr 8-bit					  | toggle pin 5
	TCCR0A |= (1 << WGM01) | (1 << WGM00) | (1 << COM0B1);
 154:	84 b5       	in	r24, 0x24	; 36
 156:	83 62       	ori	r24, 0x23	; 35
 158:	84 bd       	out	0x24, r24	; 36
	
	//		  prescaler 1
	TCCR0B |= (1 << WGM02);
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 0x40;
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	87 bd       	out	0x27, r24	; 39
 164:	08 95       	ret

00000166 <LnS_Init>:

/* LnS_Init
 * initialize lights and buzzer pins as outputs and set to 0
 */
void LnS_Init(){
	DDRC |= (1 << PIN_MAIN_LIGHTS);
 166:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= (1 << PIN_BACKWARD_LIGHTS);
 168:	39 9a       	sbi	0x07, 1	; 7
	DDRC |= (1 << PIN_BREAK_LIGHTS);
 16a:	3a 9a       	sbi	0x07, 2	; 7
	DDRD |= (1 << PIN_BUZZER);
 16c:	55 9a       	sbi	0x0a, 5	; 10
	PORTC &= ~(1 << PIN_MAIN_LIGHTS);
 16e:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1 << PIN_BACKWARD_LIGHTS);
 170:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1 << PIN_BREAK_LIGHTS);
 172:	42 98       	cbi	0x08, 2	; 8
	PORTD &= ~(1 << PIN_BUZZER);
 174:	5d 98       	cbi	0x0b, 5	; 11
	Init_Timer0();
 176:	0e 94 aa 00 	call	0x154	; 0x154 <Init_Timer0>
 * Switch buzzer ON/OFF
 *	state: ON/OFF defined in .h
 */
void LnS_BuzzerSwitch(int state){
	if(state == OFF)
		TCCR0B &= (0 << CS02);	
 17a:	85 b5       	in	r24, 0x25	; 37
 17c:	15 bc       	out	0x25, r1	; 37
 17e:	08 95       	ret

00000180 <main>:
#include <util/delay.h>


int main(void)
{	
	UART_init(9600, true, true);
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	95 e2       	ldi	r25, 0x25	; 37
 188:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <UART_init>
	enum commands command;
	
	sr_04 *mysensor = sensor_new(4, &DDRB, DDB1, &PORTB, PORTB1, &DDRB, DDB2, &PINB, PINB2);
 18c:	68 94       	set
 18e:	88 24       	eor	r8, r8
 190:	81 f8       	bld	r8, 1
 192:	0f 2e       	mov	r0, r31
 194:	f3 e2       	ldi	r31, 0x23	; 35
 196:	af 2e       	mov	r10, r31
 198:	b1 2c       	mov	r11, r1
 19a:	f0 2d       	mov	r31, r0
 19c:	68 94       	set
 19e:	cc 24       	eor	r12, r12
 1a0:	c1 f8       	bld	r12, 1
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f4 e2       	ldi	r31, 0x24	; 36
 1a6:	ef 2e       	mov	r14, r31
 1a8:	f1 2c       	mov	r15, r1
 1aa:	f0 2d       	mov	r31, r0
 1ac:	01 e0       	ldi	r16, 0x01	; 1
 1ae:	25 e2       	ldi	r18, 0x25	; 37
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	64 e2       	ldi	r22, 0x24	; 36
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	0e 94 74 01 	call	0x2e8	; 0x2e8 <sensor_new>
 1be:	ec 01       	movw	r28, r24
	
	POWTR_Init();
 1c0:	0e 94 0f 01 	call	0x21e	; 0x21e <POWTR_Init>
	LnS_Init();
 1c4:	0e 94 b3 00 	call	0x166	; 0x166 <LnS_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	84 e3       	ldi	r24, 0x34	; 52
 1cc:	9c e0       	ldi	r25, 0x0C	; 12
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x4e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x58>
 1d8:	00 00       	nop
	
	while (1)
	{		
		// read sensors
		
		get_dist_cm(mysensor);
 1da:	ce 01       	movw	r24, r28
 1dc:	0e 94 48 02 	call	0x490	; 0x490 <get_dist_cm>
		//} else {
			//LnS_BuzzerSwitch(OFF);
		//}
		
		// read commands from controller
		if(UART_available()){
 1e0:	0e 94 a6 02 	call	0x54c	; 0x54c <UART_available>
 1e4:	88 23       	and	r24, r24
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <main+0x74>
			command = CTRL_GetCommand();
 1e8:	0e 94 85 00 	call	0x10a	; 0x10a <CTRL_GetCommand>
			if((int)command <= 7){
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	10 f4       	brcc	.+4      	; 0x1f4 <main+0x74>
				POWTR_SendCommand(command);
 1f0:	0e 94 48 01 	call	0x290	; 0x290 <POWTR_SendCommand>
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	84 e3       	ldi	r24, 0x34	; 52
 1f8:	9c e0       	ldi	r25, 0x0C	; 12
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x7a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x84>
 204:	00 00       	nop
 206:	e9 cf       	rjmp	.-46     	; 0x1da <main+0x5a>

00000208 <Timer2_Init>:
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
 208:	e0 eb       	ldi	r30, 0xB0	; 176
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	83 68       	ori	r24, 0x83	; 131
 210:	80 83       	st	Z, r24
 212:	e1 eb       	ldi	r30, 0xB1	; 177
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	84 60       	ori	r24, 0x04	; 4
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <POWTR_Init>:
/* POWTR_init
 * Initialize motoros PWM, pins as outputs and set them to LOW
 */
void POWTR_Init(){
	// driving motor pins
	DDRD |= (1 << PIN_BWD);
 21e:	54 9a       	sbi	0x0a, 4	; 10
	DDRC |= (1 << PIN_FWD);
 220:	3d 9a       	sbi	0x07, 5	; 7
	DDRB |= (1 << PIN_POWER);
 222:	23 9a       	sbi	0x04, 3	; 4
	PORTD &= ~(1 << PIN_BWD);
 224:	5c 98       	cbi	0x0b, 4	; 11
	PORTC &= ~(1 << PIN_FWD);
 226:	45 98       	cbi	0x08, 5	; 8
	PORTB &= ~(1 << PIN_POWER);
 228:	2b 98       	cbi	0x05, 3	; 5
	
	// turning motor pins
	DDRD |= (1 << PIN_TURN_L);
 22a:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1 << PIN_TURN_R);
 22c:	20 9a       	sbi	0x04, 0	; 4
	PORTD &= ~(1 << PIN_TURN_L);
 22e:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
 230:	28 98       	cbi	0x05, 0	; 5
	
	Timer2_Init();
 232:	0e 94 04 01 	call	0x208	; 0x208 <Timer2_Init>
 236:	08 95       	ret

00000238 <POWTR_TurnLeft>:
/* POWTR_TurnLeft
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnLeft(){
	PORTD |= (1 << PIN_TURN_L);
 238:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
 23a:	28 98       	cbi	0x05, 0	; 5
 23c:	08 95       	ret

0000023e <POWTR_TurnRight>:
/* POWTR_TurnRight
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnRight(){
	PORTD &= ~(1 << PIN_TURN_L);
 23e:	5f 98       	cbi	0x0b, 7	; 11
	PORTB |= (1 << PIN_TURN_R);
 240:	28 9a       	sbi	0x05, 0	; 5
 242:	08 95       	ret

00000244 <POWTR_NoTurn>:

/* POWTR_NoTurn
 * Set motor driver inputs to 0 to not turn the wheels
 */
void POWTR_NoTurn(){
	PORTD &= ~(1 << PIN_TURN_L);
 244:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
 246:	28 98       	cbi	0x05, 0	; 5
 248:	08 95       	ret

0000024a <POWTR_DriveForward>:
/* POWTR_DriveForward
 * Set motor driver inputs to rotate 
 * driving motor forward
 */
void POWTR_DriveForward(){
	PORTC |= (1 << PIN_FWD);
 24a:	45 9a       	sbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
 24c:	5c 98       	cbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
 24e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <power>
 252:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <power+0x1>
 256:	4e e6       	ldi	r20, 0x6E	; 110
 258:	42 9f       	mul	r20, r18
 25a:	c0 01       	movw	r24, r0
 25c:	43 9f       	mul	r20, r19
 25e:	90 0d       	add	r25, r0
 260:	11 24       	eor	r1, r1
 262:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 266:	08 95       	ret

00000268 <POWTR_DriveBackward>:
/* POWTR_DriveBackward
 * Set motor driver inputs to rotate 
 * driving motor backward
 */
void POWTR_DriveBackward(){
	PORTC &= ~(1 << PIN_FWD);
 268:	45 98       	cbi	0x08, 5	; 8
	PORTD |= (1 << PIN_BWD);
 26a:	5c 9a       	sbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
 26c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <power>
 270:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <power+0x1>
 274:	4e e6       	ldi	r20, 0x6E	; 110
 276:	42 9f       	mul	r20, r18
 278:	c0 01       	movw	r24, r0
 27a:	43 9f       	mul	r20, r19
 27c:	90 0d       	add	r25, r0
 27e:	11 24       	eor	r1, r1
 280:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 284:	08 95       	ret

00000286 <POWTR_Stop>:
 286:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
/* POWTR_Stop
 * Set motor driver inputs and timer counter to 0
 */
void POWTR_Stop(){
	Timer2_SetCounter(0);
	PORTC &= ~(1 << PIN_FWD);
 28a:	45 98       	cbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
 28c:	5c 98       	cbi	0x0b, 4	; 11
 28e:	08 95       	ret

00000290 <POWTR_SendCommand>:
 * Params:
 *	command:	command from bluetooth module (of type enum command)
 *				related to powertrain
 */
void POWTR_SendCommand(enum commands command){
	switch(command){
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	87 30       	cpi	r24, 0x07	; 7
 294:	91 05       	cpc	r25, r1
 296:	38 f5       	brcc	.+78     	; 0x2e6 <POWTR_SendCommand+0x56>
 298:	fc 01       	movw	r30, r24
 29a:	e1 5a       	subi	r30, 0xA1	; 161
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__tablejump2__>
		case FORWARD:
			POWTR_NoTurn();
 2a2:	0e 94 22 01 	call	0x244	; 0x244 <POWTR_NoTurn>
			POWTR_DriveForward();
 2a6:	0e 94 25 01 	call	0x24a	; 0x24a <POWTR_DriveForward>
			break;
 2aa:	08 95       	ret
		case FORWARD_LEFT:
			POWTR_TurnLeft();
 2ac:	0e 94 1c 01 	call	0x238	; 0x238 <POWTR_TurnLeft>
			POWTR_DriveForward();
 2b0:	0e 94 25 01 	call	0x24a	; 0x24a <POWTR_DriveForward>
			break;
 2b4:	08 95       	ret
		case FORWARD_RIGHT:
			POWTR_TurnRight();
 2b6:	0e 94 1f 01 	call	0x23e	; 0x23e <POWTR_TurnRight>
			POWTR_DriveForward();
 2ba:	0e 94 25 01 	call	0x24a	; 0x24a <POWTR_DriveForward>
			break;
 2be:	08 95       	ret
		case BACKWARDS:
			POWTR_NoTurn();
 2c0:	0e 94 22 01 	call	0x244	; 0x244 <POWTR_NoTurn>
			POWTR_DriveBackward();
 2c4:	0e 94 34 01 	call	0x268	; 0x268 <POWTR_DriveBackward>
			break;
 2c8:	08 95       	ret
		case BACKWARDS_LEFT:
			POWTR_TurnLeft();
 2ca:	0e 94 1c 01 	call	0x238	; 0x238 <POWTR_TurnLeft>
			POWTR_DriveBackward();
 2ce:	0e 94 34 01 	call	0x268	; 0x268 <POWTR_DriveBackward>
			break;
 2d2:	08 95       	ret
		case BACKWARDS_RIGHT:
			POWTR_TurnRight();
 2d4:	0e 94 1f 01 	call	0x23e	; 0x23e <POWTR_TurnRight>
			POWTR_DriveBackward();
 2d8:	0e 94 34 01 	call	0x268	; 0x268 <POWTR_DriveBackward>
			break;
 2dc:	08 95       	ret
		case NEUTRAL:
			POWTR_NoTurn();
 2de:	0e 94 22 01 	call	0x244	; 0x244 <POWTR_NoTurn>
			POWTR_Stop();
 2e2:	0e 94 43 01 	call	0x286	; 0x286 <POWTR_Stop>
 2e6:	08 95       	ret

000002e8 <sensor_new>:
  TCCR1B &= ~((1 << CS12)|(1 << CS11)|(1 << CS10));
}

int calculate_distance_mm(uint16_t duration) {
  return (unsigned long)((double)duration * 0.686);
}
 2e8:	4f 92       	push	r4
 2ea:	5f 92       	push	r5
 2ec:	6f 92       	push	r6
 2ee:	7f 92       	push	r7
 2f0:	8f 92       	push	r8
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	18 2f       	mov	r17, r24
 30c:	2b 01       	movw	r4, r22
 30e:	d4 2e       	mov	r13, r20
 310:	39 01       	movw	r6, r18
 312:	83 e1       	ldi	r24, 0x13	; 19
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 01 04 	call	0x802	; 0x802 <malloc>
 31a:	fc 01       	movw	r30, r24
 31c:	d2 01       	movw	r26, r4
 31e:	4c 91       	ld	r20, X
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9c 01       	movw	r18, r24
 326:	0d 2c       	mov	r0, r13
 328:	02 c0       	rjmp	.+4      	; 0x32e <sensor_new+0x46>
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <sensor_new+0x42>
 332:	24 2b       	or	r18, r20
 334:	2c 93       	st	X, r18
 336:	d3 01       	movw	r26, r6
 338:	4c 91       	ld	r20, X
 33a:	9c 01       	movw	r18, r24
 33c:	00 2e       	mov	r0, r16
 33e:	02 c0       	rjmp	.+4      	; 0x344 <sensor_new+0x5c>
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <sensor_new+0x58>
 348:	24 23       	and	r18, r20
 34a:	2c 93       	st	X, r18
 34c:	d7 01       	movw	r26, r14
 34e:	2c 91       	ld	r18, X
 350:	0c 2c       	mov	r0, r12
 352:	02 c0       	rjmp	.+4      	; 0x358 <sensor_new+0x70>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <sensor_new+0x6c>
 35c:	80 95       	com	r24
 35e:	82 23       	and	r24, r18
 360:	8c 93       	st	X, r24
 362:	a0 e8       	ldi	r26, 0x80	; 128
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	8c 91       	ld	r24, X
 368:	1c 92       	st	X, r1
 36a:	16 83       	std	Z+6, r17	; 0x06
 36c:	50 86       	std	Z+8, r5	; 0x08
 36e:	47 82       	std	Z+7, r4	; 0x07
 370:	d1 86       	std	Z+9, r13	; 0x09
 372:	73 86       	std	Z+11, r7	; 0x0b
 374:	62 86       	std	Z+10, r6	; 0x0a
 376:	04 87       	std	Z+12, r16	; 0x0c
 378:	f6 86       	std	Z+14, r15	; 0x0e
 37a:	e5 86       	std	Z+13, r14	; 0x0d
 37c:	c7 86       	std	Z+15, r12	; 0x0f
 37e:	b1 8a       	std	Z+17, r11	; 0x11
 380:	a0 8a       	std	Z+16, r10	; 0x10
 382:	82 8a       	std	Z+18, r8	; 0x12
 384:	15 82       	std	Z+5, r1	; 0x05
 386:	14 82       	std	Z+4, r1	; 0x04
 388:	10 82       	st	Z, r1
 38a:	11 82       	std	Z+1, r1	; 0x01
 38c:	12 82       	std	Z+2, r1	; 0x02
 38e:	13 82       	std	Z+3, r1	; 0x03
 390:	cf 01       	movw	r24, r30
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	bf 90       	pop	r11
 3a4:	af 90       	pop	r10
 3a6:	8f 90       	pop	r8
 3a8:	7f 90       	pop	r7
 3aa:	6f 90       	pop	r6
 3ac:	5f 90       	pop	r5
 3ae:	4f 90       	pop	r4
 3b0:	08 95       	ret

000003b2 <set_trig_high>:
 3b2:	dc 01       	movw	r26, r24
 3b4:	1a 96       	adiw	r26, 0x0a	; 10
 3b6:	ed 91       	ld	r30, X+
 3b8:	fc 91       	ld	r31, X
 3ba:	1b 97       	sbiw	r26, 0x0b	; 11
 3bc:	40 81       	ld	r20, Z
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	c9 01       	movw	r24, r18
 3c4:	1c 96       	adiw	r26, 0x0c	; 12
 3c6:	0c 90       	ld	r0, X
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <set_trig_high+0x1c>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <set_trig_high+0x18>
 3d2:	84 2b       	or	r24, r20
 3d4:	80 83       	st	Z, r24
 3d6:	08 95       	ret

000003d8 <set_trig_low>:
 3d8:	dc 01       	movw	r26, r24
 3da:	1a 96       	adiw	r26, 0x0a	; 10
 3dc:	ed 91       	ld	r30, X+
 3de:	fc 91       	ld	r31, X
 3e0:	1b 97       	sbiw	r26, 0x0b	; 11
 3e2:	40 81       	ld	r20, Z
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	b9 01       	movw	r22, r18
 3ea:	1c 96       	adiw	r26, 0x0c	; 12
 3ec:	0c 90       	ld	r0, X
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <set_trig_low+0x1c>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <set_trig_low+0x18>
 3f8:	cb 01       	movw	r24, r22
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	80 83       	st	Z, r24
 400:	08 95       	ret

00000402 <measure_duration>:
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ec 01       	movw	r28, r24
 408:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <set_trig_low>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <measure_duration+0xc>
 40e:	ce 01       	movw	r24, r28
 410:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <set_trig_high>
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <measure_duration+0x14>
 41a:	00 00       	nop
 41c:	ce 01       	movw	r24, r28
 41e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <set_trig_low>
 422:	e8 89       	ldd	r30, Y+16	; 0x10
 424:	f9 89       	ldd	r31, Y+17	; 0x11
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	0a 88       	ldd	r0, Y+18	; 0x12
 42c:	02 c0       	rjmp	.+4      	; 0x432 <measure_duration+0x30>
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <measure_duration+0x2c>
 436:	80 81       	ld	r24, Z
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	82 23       	and	r24, r18
 43c:	93 23       	and	r25, r19
 43e:	89 2b       	or	r24, r25
 440:	d1 f3       	breq	.-12     	; 0x436 <measure_duration+0x34>
 442:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 446:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 44a:	e1 e8       	ldi	r30, 0x81	; 129
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	83 60       	ori	r24, 0x03	; 3
 452:	80 83       	st	Z, r24
 454:	e8 89       	ldd	r30, Y+16	; 0x10
 456:	f9 89       	ldd	r31, Y+17	; 0x11
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	0a 88       	ldd	r0, Y+18	; 0x12
 45e:	02 c0       	rjmp	.+4      	; 0x464 <measure_duration+0x62>
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <measure_duration+0x5e>
 468:	80 81       	ld	r24, Z
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	82 23       	and	r24, r18
 46e:	93 23       	and	r25, r19
 470:	89 2b       	or	r24, r25
 472:	d1 f7       	brne	.-12     	; 0x468 <measure_duration+0x66>
 474:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 478:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 47c:	9d 83       	std	Y+5, r25	; 0x05
 47e:	8c 83       	std	Y+4, r24	; 0x04
 480:	e1 e8       	ldi	r30, 0x81	; 129
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	88 7f       	andi	r24, 0xF8	; 248
 488:	80 83       	st	Z, r24
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <get_dist_cm>:

int get_dist_cm(sr_04 *sensor) {
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ec 01       	movw	r28, r24
  measure_duration(sensor);
 49a:	0e 94 01 02 	call	0x402	; 0x402 <measure_duration>
  // stop timer
  TCCR1B &= ~((1 << CS12)|(1 << CS11)|(1 << CS10));
}

int calculate_distance_mm(uint16_t duration) {
  return (unsigned long)((double)duration * 0.686);
 49e:	6c 81       	ldd	r22, Y+4	; 0x04
 4a0:	7d 81       	ldd	r23, Y+5	; 0x05
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 de 02 	call	0x5bc	; 0x5bc <__floatunsisf>
 4aa:	22 eb       	ldi	r18, 0xB2	; 178
 4ac:	3d e9       	ldi	r19, 0x9D	; 157
 4ae:	4f e2       	ldi	r20, 0x2F	; 47
 4b0:	5f e3       	ldi	r21, 0x3F	; 63
 4b2:	0e 94 44 03 	call	0x688	; 0x688 <__mulsf3>
 4b6:	0e 94 af 02 	call	0x55e	; 0x55e <__fixunssfsi>
}

int get_dist_cm(sr_04 *sensor) {
  measure_duration(sensor);
  sensor->_last_distance_mm = calculate_distance_mm(sensor->_last_duration);
 4ba:	8b 01       	movw	r16, r22
 4bc:	07 2e       	mov	r0, r23
 4be:	00 0c       	add	r0, r0
 4c0:	22 0b       	sbc	r18, r18
 4c2:	33 0b       	sbc	r19, r19
 4c4:	08 83       	st	Y, r16
 4c6:	19 83       	std	Y+1, r17	; 0x01
 4c8:	2a 83       	std	Y+2, r18	; 0x02
 4ca:	3b 83       	std	Y+3, r19	; 0x03

  return sensor->_last_distance_mm;
}
 4cc:	cb 01       	movw	r24, r22
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	08 95       	ret

000004d8 <UART_init>:
	while(*StringPtr != 0x00)
	{
		UART_send(*StringPtr);
		StringPtr++;
	}
}
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	d6 2f       	mov	r29, r22
 4de:	c4 2f       	mov	r28, r20
 4e0:	a0 e0       	ldi	r26, 0x00	; 0
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	aa 1f       	adc	r26, r26
 4ea:	bb 1f       	adc	r27, r27
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	aa 1f       	adc	r26, r26
 4f2:	bb 1f       	adc	r27, r27
 4f4:	9c 01       	movw	r18, r24
 4f6:	ad 01       	movw	r20, r26
 4f8:	22 0f       	add	r18, r18
 4fa:	33 1f       	adc	r19, r19
 4fc:	44 1f       	adc	r20, r20
 4fe:	55 1f       	adc	r21, r21
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	44 1f       	adc	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	74 e2       	ldi	r23, 0x24	; 36
 50c:	84 ef       	ldi	r24, 0xF4	; 244
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__udivmodsi4>
 514:	21 50       	subi	r18, 0x01	; 1
 516:	31 09       	sbc	r19, r1
 518:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 51c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 520:	e2 ec       	ldi	r30, 0xC2	; 194
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	86 60       	ori	r24, 0x06	; 6
 528:	80 83       	st	Z, r24
 52a:	dd 23       	and	r29, r29
 52c:	29 f0       	breq	.+10     	; 0x538 <UART_init+0x60>
 52e:	e1 ec       	ldi	r30, 0xC1	; 193
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	80 61       	ori	r24, 0x10	; 16
 536:	80 83       	st	Z, r24
 538:	cc 23       	and	r28, r28
 53a:	29 f0       	breq	.+10     	; 0x546 <UART_init+0x6e>
 53c:	e1 ec       	ldi	r30, 0xC1	; 193
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	88 60       	ori	r24, 0x08	; 8
 544:	80 83       	st	Z, r24
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <UART_available>:

bool UART_available(){
	return (UCSR0A & (1<<RXC0));
 54c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}
 550:	88 1f       	adc	r24, r24
 552:	88 27       	eor	r24, r24
 554:	88 1f       	adc	r24, r24
 556:	08 95       	ret

00000558 <UART_read>:

unsigned char UART_read(){
	return UDR0;
 558:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 55c:	08 95       	ret

0000055e <__fixunssfsi>:
 55e:	0e 94 23 03 	call	0x646	; 0x646 <__fp_splitA>
 562:	88 f0       	brcs	.+34     	; 0x586 <__fixunssfsi+0x28>
 564:	9f 57       	subi	r25, 0x7F	; 127
 566:	98 f0       	brcs	.+38     	; 0x58e <__fixunssfsi+0x30>
 568:	b9 2f       	mov	r27, r25
 56a:	99 27       	eor	r25, r25
 56c:	b7 51       	subi	r27, 0x17	; 23
 56e:	b0 f0       	brcs	.+44     	; 0x59c <__fixunssfsi+0x3e>
 570:	e1 f0       	breq	.+56     	; 0x5aa <__fixunssfsi+0x4c>
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	1a f0       	brmi	.+6      	; 0x582 <__fixunssfsi+0x24>
 57c:	ba 95       	dec	r27
 57e:	c9 f7       	brne	.-14     	; 0x572 <__fixunssfsi+0x14>
 580:	14 c0       	rjmp	.+40     	; 0x5aa <__fixunssfsi+0x4c>
 582:	b1 30       	cpi	r27, 0x01	; 1
 584:	91 f0       	breq	.+36     	; 0x5aa <__fixunssfsi+0x4c>
 586:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_zero>
 58a:	b1 e0       	ldi	r27, 0x01	; 1
 58c:	08 95       	ret
 58e:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_zero>
 592:	67 2f       	mov	r22, r23
 594:	78 2f       	mov	r23, r24
 596:	88 27       	eor	r24, r24
 598:	b8 5f       	subi	r27, 0xF8	; 248
 59a:	39 f0       	breq	.+14     	; 0x5aa <__fixunssfsi+0x4c>
 59c:	b9 3f       	cpi	r27, 0xF9	; 249
 59e:	cc f3       	brlt	.-14     	; 0x592 <__fixunssfsi+0x34>
 5a0:	86 95       	lsr	r24
 5a2:	77 95       	ror	r23
 5a4:	67 95       	ror	r22
 5a6:	b3 95       	inc	r27
 5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__fixunssfsi+0x42>
 5aa:	3e f4       	brtc	.+14     	; 0x5ba <__fixunssfsi+0x5c>
 5ac:	90 95       	com	r25
 5ae:	80 95       	com	r24
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__floatunsisf>:
 5bc:	e8 94       	clt
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__floatsisf+0x12>

000005c0 <__floatsisf>:
 5c0:	97 fb       	bst	r25, 7
 5c2:	3e f4       	brtc	.+14     	; 0x5d2 <__floatsisf+0x12>
 5c4:	90 95       	com	r25
 5c6:	80 95       	com	r24
 5c8:	70 95       	com	r23
 5ca:	61 95       	neg	r22
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	99 23       	and	r25, r25
 5d4:	a9 f0       	breq	.+42     	; 0x600 <__floatsisf+0x40>
 5d6:	f9 2f       	mov	r31, r25
 5d8:	96 e9       	ldi	r25, 0x96	; 150
 5da:	bb 27       	eor	r27, r27
 5dc:	93 95       	inc	r25
 5de:	f6 95       	lsr	r31
 5e0:	87 95       	ror	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f1 11       	cpse	r31, r1
 5ea:	f8 cf       	rjmp	.-16     	; 0x5dc <__floatsisf+0x1c>
 5ec:	fa f4       	brpl	.+62     	; 0x62c <__floatsisf+0x6c>
 5ee:	bb 0f       	add	r27, r27
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__floatsisf+0x36>
 5f2:	60 ff       	sbrs	r22, 0
 5f4:	1b c0       	rjmp	.+54     	; 0x62c <__floatsisf+0x6c>
 5f6:	6f 5f       	subi	r22, 0xFF	; 255
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	16 c0       	rjmp	.+44     	; 0x62c <__floatsisf+0x6c>
 600:	88 23       	and	r24, r24
 602:	11 f0       	breq	.+4      	; 0x608 <__floatsisf+0x48>
 604:	96 e9       	ldi	r25, 0x96	; 150
 606:	11 c0       	rjmp	.+34     	; 0x62a <__floatsisf+0x6a>
 608:	77 23       	and	r23, r23
 60a:	21 f0       	breq	.+8      	; 0x614 <__floatsisf+0x54>
 60c:	9e e8       	ldi	r25, 0x8E	; 142
 60e:	87 2f       	mov	r24, r23
 610:	76 2f       	mov	r23, r22
 612:	05 c0       	rjmp	.+10     	; 0x61e <__floatsisf+0x5e>
 614:	66 23       	and	r22, r22
 616:	71 f0       	breq	.+28     	; 0x634 <__floatsisf+0x74>
 618:	96 e8       	ldi	r25, 0x86	; 134
 61a:	86 2f       	mov	r24, r22
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	2a f0       	brmi	.+10     	; 0x62c <__floatsisf+0x6c>
 622:	9a 95       	dec	r25
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	da f7       	brpl	.-10     	; 0x622 <__floatsisf+0x62>
 62c:	88 0f       	add	r24, r24
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <__fp_split3>:
 636:	57 fd       	sbrc	r21, 7
 638:	90 58       	subi	r25, 0x80	; 128
 63a:	44 0f       	add	r20, r20
 63c:	55 1f       	adc	r21, r21
 63e:	59 f0       	breq	.+22     	; 0x656 <__fp_splitA+0x10>
 640:	5f 3f       	cpi	r21, 0xFF	; 255
 642:	71 f0       	breq	.+28     	; 0x660 <__fp_splitA+0x1a>
 644:	47 95       	ror	r20

00000646 <__fp_splitA>:
 646:	88 0f       	add	r24, r24
 648:	97 fb       	bst	r25, 7
 64a:	99 1f       	adc	r25, r25
 64c:	61 f0       	breq	.+24     	; 0x666 <__fp_splitA+0x20>
 64e:	9f 3f       	cpi	r25, 0xFF	; 255
 650:	79 f0       	breq	.+30     	; 0x670 <__fp_splitA+0x2a>
 652:	87 95       	ror	r24
 654:	08 95       	ret
 656:	12 16       	cp	r1, r18
 658:	13 06       	cpc	r1, r19
 65a:	14 06       	cpc	r1, r20
 65c:	55 1f       	adc	r21, r21
 65e:	f2 cf       	rjmp	.-28     	; 0x644 <__fp_split3+0xe>
 660:	46 95       	lsr	r20
 662:	f1 df       	rcall	.-30     	; 0x646 <__fp_splitA>
 664:	08 c0       	rjmp	.+16     	; 0x676 <__fp_splitA+0x30>
 666:	16 16       	cp	r1, r22
 668:	17 06       	cpc	r1, r23
 66a:	18 06       	cpc	r1, r24
 66c:	99 1f       	adc	r25, r25
 66e:	f1 cf       	rjmp	.-30     	; 0x652 <__fp_splitA+0xc>
 670:	86 95       	lsr	r24
 672:	71 05       	cpc	r23, r1
 674:	61 05       	cpc	r22, r1
 676:	08 94       	sec
 678:	08 95       	ret

0000067a <__fp_zero>:
 67a:	e8 94       	clt

0000067c <__fp_szero>:
 67c:	bb 27       	eor	r27, r27
 67e:	66 27       	eor	r22, r22
 680:	77 27       	eor	r23, r23
 682:	cb 01       	movw	r24, r22
 684:	97 f9       	bld	r25, 7
 686:	08 95       	ret

00000688 <__mulsf3>:
 688:	0e 94 57 03 	call	0x6ae	; 0x6ae <__mulsf3x>
 68c:	0c 94 c8 03 	jmp	0x790	; 0x790 <__fp_round>
 690:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_pscA>
 694:	38 f0       	brcs	.+14     	; 0x6a4 <__mulsf3+0x1c>
 696:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_pscB>
 69a:	20 f0       	brcs	.+8      	; 0x6a4 <__mulsf3+0x1c>
 69c:	95 23       	and	r25, r21
 69e:	11 f0       	breq	.+4      	; 0x6a4 <__mulsf3+0x1c>
 6a0:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_inf>
 6a4:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__fp_nan>
 6a8:	11 24       	eor	r1, r1
 6aa:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_szero>

000006ae <__mulsf3x>:
 6ae:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_split3>
 6b2:	70 f3       	brcs	.-36     	; 0x690 <__mulsf3+0x8>

000006b4 <__mulsf3_pse>:
 6b4:	95 9f       	mul	r25, r21
 6b6:	c1 f3       	breq	.-16     	; 0x6a8 <__mulsf3+0x20>
 6b8:	95 0f       	add	r25, r21
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	55 1f       	adc	r21, r21
 6be:	62 9f       	mul	r22, r18
 6c0:	f0 01       	movw	r30, r0
 6c2:	72 9f       	mul	r23, r18
 6c4:	bb 27       	eor	r27, r27
 6c6:	f0 0d       	add	r31, r0
 6c8:	b1 1d       	adc	r27, r1
 6ca:	63 9f       	mul	r22, r19
 6cc:	aa 27       	eor	r26, r26
 6ce:	f0 0d       	add	r31, r0
 6d0:	b1 1d       	adc	r27, r1
 6d2:	aa 1f       	adc	r26, r26
 6d4:	64 9f       	mul	r22, r20
 6d6:	66 27       	eor	r22, r22
 6d8:	b0 0d       	add	r27, r0
 6da:	a1 1d       	adc	r26, r1
 6dc:	66 1f       	adc	r22, r22
 6de:	82 9f       	mul	r24, r18
 6e0:	22 27       	eor	r18, r18
 6e2:	b0 0d       	add	r27, r0
 6e4:	a1 1d       	adc	r26, r1
 6e6:	62 1f       	adc	r22, r18
 6e8:	73 9f       	mul	r23, r19
 6ea:	b0 0d       	add	r27, r0
 6ec:	a1 1d       	adc	r26, r1
 6ee:	62 1f       	adc	r22, r18
 6f0:	83 9f       	mul	r24, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	61 1d       	adc	r22, r1
 6f6:	22 1f       	adc	r18, r18
 6f8:	74 9f       	mul	r23, r20
 6fa:	33 27       	eor	r19, r19
 6fc:	a0 0d       	add	r26, r0
 6fe:	61 1d       	adc	r22, r1
 700:	23 1f       	adc	r18, r19
 702:	84 9f       	mul	r24, r20
 704:	60 0d       	add	r22, r0
 706:	21 1d       	adc	r18, r1
 708:	82 2f       	mov	r24, r18
 70a:	76 2f       	mov	r23, r22
 70c:	6a 2f       	mov	r22, r26
 70e:	11 24       	eor	r1, r1
 710:	9f 57       	subi	r25, 0x7F	; 127
 712:	50 40       	sbci	r21, 0x00	; 0
 714:	9a f0       	brmi	.+38     	; 0x73c <__mulsf3_pse+0x88>
 716:	f1 f0       	breq	.+60     	; 0x754 <__mulsf3_pse+0xa0>
 718:	88 23       	and	r24, r24
 71a:	4a f0       	brmi	.+18     	; 0x72e <__mulsf3_pse+0x7a>
 71c:	ee 0f       	add	r30, r30
 71e:	ff 1f       	adc	r31, r31
 720:	bb 1f       	adc	r27, r27
 722:	66 1f       	adc	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	50 40       	sbci	r21, 0x00	; 0
 72c:	a9 f7       	brne	.-22     	; 0x718 <__mulsf3_pse+0x64>
 72e:	9e 3f       	cpi	r25, 0xFE	; 254
 730:	51 05       	cpc	r21, r1
 732:	80 f0       	brcs	.+32     	; 0x754 <__mulsf3_pse+0xa0>
 734:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_inf>
 738:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__fp_szero>
 73c:	5f 3f       	cpi	r21, 0xFF	; 255
 73e:	e4 f3       	brlt	.-8      	; 0x738 <__mulsf3_pse+0x84>
 740:	98 3e       	cpi	r25, 0xE8	; 232
 742:	d4 f3       	brlt	.-12     	; 0x738 <__mulsf3_pse+0x84>
 744:	86 95       	lsr	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f7 95       	ror	r31
 74e:	e7 95       	ror	r30
 750:	9f 5f       	subi	r25, 0xFF	; 255
 752:	c1 f7       	brne	.-16     	; 0x744 <__mulsf3_pse+0x90>
 754:	fe 2b       	or	r31, r30
 756:	88 0f       	add	r24, r24
 758:	91 1d       	adc	r25, r1
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret

00000762 <__fp_inf>:
 762:	97 f9       	bld	r25, 7
 764:	9f 67       	ori	r25, 0x7F	; 127
 766:	80 e8       	ldi	r24, 0x80	; 128
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	08 95       	ret

0000076e <__fp_nan>:
 76e:	9f ef       	ldi	r25, 0xFF	; 255
 770:	80 ec       	ldi	r24, 0xC0	; 192
 772:	08 95       	ret

00000774 <__fp_pscA>:
 774:	00 24       	eor	r0, r0
 776:	0a 94       	dec	r0
 778:	16 16       	cp	r1, r22
 77a:	17 06       	cpc	r1, r23
 77c:	18 06       	cpc	r1, r24
 77e:	09 06       	cpc	r0, r25
 780:	08 95       	ret

00000782 <__fp_pscB>:
 782:	00 24       	eor	r0, r0
 784:	0a 94       	dec	r0
 786:	12 16       	cp	r1, r18
 788:	13 06       	cpc	r1, r19
 78a:	14 06       	cpc	r1, r20
 78c:	05 06       	cpc	r0, r21
 78e:	08 95       	ret

00000790 <__fp_round>:
 790:	09 2e       	mov	r0, r25
 792:	03 94       	inc	r0
 794:	00 0c       	add	r0, r0
 796:	11 f4       	brne	.+4      	; 0x79c <__fp_round+0xc>
 798:	88 23       	and	r24, r24
 79a:	52 f0       	brmi	.+20     	; 0x7b0 <__fp_round+0x20>
 79c:	bb 0f       	add	r27, r27
 79e:	40 f4       	brcc	.+16     	; 0x7b0 <__fp_round+0x20>
 7a0:	bf 2b       	or	r27, r31
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__fp_round+0x18>
 7a4:	60 ff       	sbrs	r22, 0
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <__fp_round+0x20>
 7a8:	6f 5f       	subi	r22, 0xFF	; 255
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	08 95       	ret

000007b2 <__udivmodsi4>:
 7b2:	a1 e2       	ldi	r26, 0x21	; 33
 7b4:	1a 2e       	mov	r1, r26
 7b6:	aa 1b       	sub	r26, r26
 7b8:	bb 1b       	sub	r27, r27
 7ba:	fd 01       	movw	r30, r26
 7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <__udivmodsi4_ep>

000007be <__udivmodsi4_loop>:
 7be:	aa 1f       	adc	r26, r26
 7c0:	bb 1f       	adc	r27, r27
 7c2:	ee 1f       	adc	r30, r30
 7c4:	ff 1f       	adc	r31, r31
 7c6:	a2 17       	cp	r26, r18
 7c8:	b3 07       	cpc	r27, r19
 7ca:	e4 07       	cpc	r30, r20
 7cc:	f5 07       	cpc	r31, r21
 7ce:	20 f0       	brcs	.+8      	; 0x7d8 <__udivmodsi4_ep>
 7d0:	a2 1b       	sub	r26, r18
 7d2:	b3 0b       	sbc	r27, r19
 7d4:	e4 0b       	sbc	r30, r20
 7d6:	f5 0b       	sbc	r31, r21

000007d8 <__udivmodsi4_ep>:
 7d8:	66 1f       	adc	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	1a 94       	dec	r1
 7e2:	69 f7       	brne	.-38     	; 0x7be <__udivmodsi4_loop>
 7e4:	60 95       	com	r22
 7e6:	70 95       	com	r23
 7e8:	80 95       	com	r24
 7ea:	90 95       	com	r25
 7ec:	9b 01       	movw	r18, r22
 7ee:	ac 01       	movw	r20, r24
 7f0:	bd 01       	movw	r22, r26
 7f2:	cf 01       	movw	r24, r30
 7f4:	08 95       	ret

000007f6 <__tablejump2__>:
 7f6:	ee 0f       	add	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	05 90       	lpm	r0, Z+
 7fc:	f4 91       	lpm	r31, Z
 7fe:	e0 2d       	mov	r30, r0
 800:	09 94       	ijmp

00000802 <malloc>:
 802:	0f 93       	push	r16
 804:	1f 93       	push	r17
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	82 30       	cpi	r24, 0x02	; 2
 80c:	91 05       	cpc	r25, r1
 80e:	10 f4       	brcc	.+4      	; 0x814 <malloc+0x12>
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__flp>
 818:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__flp+0x1>
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	a0 e0       	ldi	r26, 0x00	; 0
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	30 97       	sbiw	r30, 0x00	; 0
 826:	19 f1       	breq	.+70     	; 0x86e <malloc+0x6c>
 828:	40 81       	ld	r20, Z
 82a:	51 81       	ldd	r21, Z+1	; 0x01
 82c:	02 81       	ldd	r16, Z+2	; 0x02
 82e:	13 81       	ldd	r17, Z+3	; 0x03
 830:	48 17       	cp	r20, r24
 832:	59 07       	cpc	r21, r25
 834:	c8 f0       	brcs	.+50     	; 0x868 <malloc+0x66>
 836:	84 17       	cp	r24, r20
 838:	95 07       	cpc	r25, r21
 83a:	69 f4       	brne	.+26     	; 0x856 <malloc+0x54>
 83c:	10 97       	sbiw	r26, 0x00	; 0
 83e:	31 f0       	breq	.+12     	; 0x84c <malloc+0x4a>
 840:	12 96       	adiw	r26, 0x02	; 2
 842:	0c 93       	st	X, r16
 844:	12 97       	sbiw	r26, 0x02	; 2
 846:	13 96       	adiw	r26, 0x03	; 3
 848:	1c 93       	st	X, r17
 84a:	27 c0       	rjmp	.+78     	; 0x89a <malloc+0x98>
 84c:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <__flp>
 850:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <__flp+0x1>
 854:	22 c0       	rjmp	.+68     	; 0x89a <malloc+0x98>
 856:	21 15       	cp	r18, r1
 858:	31 05       	cpc	r19, r1
 85a:	19 f0       	breq	.+6      	; 0x862 <malloc+0x60>
 85c:	42 17       	cp	r20, r18
 85e:	53 07       	cpc	r21, r19
 860:	18 f4       	brcc	.+6      	; 0x868 <malloc+0x66>
 862:	9a 01       	movw	r18, r20
 864:	bd 01       	movw	r22, r26
 866:	ef 01       	movw	r28, r30
 868:	df 01       	movw	r26, r30
 86a:	f8 01       	movw	r30, r16
 86c:	db cf       	rjmp	.-74     	; 0x824 <malloc+0x22>
 86e:	21 15       	cp	r18, r1
 870:	31 05       	cpc	r19, r1
 872:	f9 f0       	breq	.+62     	; 0x8b2 <malloc+0xb0>
 874:	28 1b       	sub	r18, r24
 876:	39 0b       	sbc	r19, r25
 878:	24 30       	cpi	r18, 0x04	; 4
 87a:	31 05       	cpc	r19, r1
 87c:	80 f4       	brcc	.+32     	; 0x89e <malloc+0x9c>
 87e:	8a 81       	ldd	r24, Y+2	; 0x02
 880:	9b 81       	ldd	r25, Y+3	; 0x03
 882:	61 15       	cp	r22, r1
 884:	71 05       	cpc	r23, r1
 886:	21 f0       	breq	.+8      	; 0x890 <malloc+0x8e>
 888:	fb 01       	movw	r30, r22
 88a:	93 83       	std	Z+3, r25	; 0x03
 88c:	82 83       	std	Z+2, r24	; 0x02
 88e:	04 c0       	rjmp	.+8      	; 0x898 <malloc+0x96>
 890:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__flp+0x1>
 894:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__flp>
 898:	fe 01       	movw	r30, r28
 89a:	32 96       	adiw	r30, 0x02	; 2
 89c:	44 c0       	rjmp	.+136    	; 0x926 <__stack+0x27>
 89e:	fe 01       	movw	r30, r28
 8a0:	e2 0f       	add	r30, r18
 8a2:	f3 1f       	adc	r31, r19
 8a4:	81 93       	st	Z+, r24
 8a6:	91 93       	st	Z+, r25
 8a8:	22 50       	subi	r18, 0x02	; 2
 8aa:	31 09       	sbc	r19, r1
 8ac:	39 83       	std	Y+1, r19	; 0x01
 8ae:	28 83       	st	Y, r18
 8b0:	3a c0       	rjmp	.+116    	; 0x926 <__stack+0x27>
 8b2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 8b6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 8ba:	23 2b       	or	r18, r19
 8bc:	41 f4       	brne	.+16     	; 0x8ce <malloc+0xcc>
 8be:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 8c2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 8c6:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <__data_end+0x1>
 8ca:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
 8ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 8d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 8d6:	21 15       	cp	r18, r1
 8d8:	31 05       	cpc	r19, r1
 8da:	41 f4       	brne	.+16     	; 0x8ec <malloc+0xea>
 8dc:	2d b7       	in	r18, 0x3d	; 61
 8de:	3e b7       	in	r19, 0x3e	; 62
 8e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 8e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 8e8:	24 1b       	sub	r18, r20
 8ea:	35 0b       	sbc	r19, r21
 8ec:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 8f0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__data_end+0x1>
 8f4:	e2 17       	cp	r30, r18
 8f6:	f3 07       	cpc	r31, r19
 8f8:	a0 f4       	brcc	.+40     	; 0x922 <__stack+0x23>
 8fa:	2e 1b       	sub	r18, r30
 8fc:	3f 0b       	sbc	r19, r31
 8fe:	28 17       	cp	r18, r24
 900:	39 07       	cpc	r19, r25
 902:	78 f0       	brcs	.+30     	; 0x922 <__stack+0x23>
 904:	ac 01       	movw	r20, r24
 906:	4e 5f       	subi	r20, 0xFE	; 254
 908:	5f 4f       	sbci	r21, 0xFF	; 255
 90a:	24 17       	cp	r18, r20
 90c:	35 07       	cpc	r19, r21
 90e:	48 f0       	brcs	.+18     	; 0x922 <__stack+0x23>
 910:	4e 0f       	add	r20, r30
 912:	5f 1f       	adc	r21, r31
 914:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <__data_end+0x1>
 918:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <__data_end>
 91c:	81 93       	st	Z+, r24
 91e:	91 93       	st	Z+, r25
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
 922:	e0 e0       	ldi	r30, 0x00	; 0
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	cf 01       	movw	r24, r30
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	08 95       	ret

00000932 <free>:
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	00 97       	sbiw	r24, 0x00	; 0
 938:	09 f4       	brne	.+2      	; 0x93c <free+0xa>
 93a:	81 c0       	rjmp	.+258    	; 0xa3e <free+0x10c>
 93c:	fc 01       	movw	r30, r24
 93e:	32 97       	sbiw	r30, 0x02	; 2
 940:	13 82       	std	Z+3, r1	; 0x03
 942:	12 82       	std	Z+2, r1	; 0x02
 944:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <__flp>
 948:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <__flp+0x1>
 94c:	10 97       	sbiw	r26, 0x00	; 0
 94e:	81 f4       	brne	.+32     	; 0x970 <free+0x3e>
 950:	20 81       	ld	r18, Z
 952:	31 81       	ldd	r19, Z+1	; 0x01
 954:	82 0f       	add	r24, r18
 956:	93 1f       	adc	r25, r19
 958:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 95c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 960:	28 17       	cp	r18, r24
 962:	39 07       	cpc	r19, r25
 964:	51 f5       	brne	.+84     	; 0x9ba <free+0x88>
 966:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x1>
 96a:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end>
 96e:	67 c0       	rjmp	.+206    	; 0xa3e <free+0x10c>
 970:	ed 01       	movw	r28, r26
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	ce 17       	cp	r28, r30
 978:	df 07       	cpc	r29, r31
 97a:	40 f4       	brcc	.+16     	; 0x98c <free+0x5a>
 97c:	4a 81       	ldd	r20, Y+2	; 0x02
 97e:	5b 81       	ldd	r21, Y+3	; 0x03
 980:	9e 01       	movw	r18, r28
 982:	41 15       	cp	r20, r1
 984:	51 05       	cpc	r21, r1
 986:	f1 f0       	breq	.+60     	; 0x9c4 <free+0x92>
 988:	ea 01       	movw	r28, r20
 98a:	f5 cf       	rjmp	.-22     	; 0x976 <free+0x44>
 98c:	d3 83       	std	Z+3, r29	; 0x03
 98e:	c2 83       	std	Z+2, r28	; 0x02
 990:	40 81       	ld	r20, Z
 992:	51 81       	ldd	r21, Z+1	; 0x01
 994:	84 0f       	add	r24, r20
 996:	95 1f       	adc	r25, r21
 998:	c8 17       	cp	r28, r24
 99a:	d9 07       	cpc	r29, r25
 99c:	59 f4       	brne	.+22     	; 0x9b4 <free+0x82>
 99e:	88 81       	ld	r24, Y
 9a0:	99 81       	ldd	r25, Y+1	; 0x01
 9a2:	84 0f       	add	r24, r20
 9a4:	95 1f       	adc	r25, r21
 9a6:	02 96       	adiw	r24, 0x02	; 2
 9a8:	91 83       	std	Z+1, r25	; 0x01
 9aa:	80 83       	st	Z, r24
 9ac:	8a 81       	ldd	r24, Y+2	; 0x02
 9ae:	9b 81       	ldd	r25, Y+3	; 0x03
 9b0:	93 83       	std	Z+3, r25	; 0x03
 9b2:	82 83       	std	Z+2, r24	; 0x02
 9b4:	21 15       	cp	r18, r1
 9b6:	31 05       	cpc	r19, r1
 9b8:	29 f4       	brne	.+10     	; 0x9c4 <free+0x92>
 9ba:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__flp+0x1>
 9be:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__flp>
 9c2:	3d c0       	rjmp	.+122    	; 0xa3e <free+0x10c>
 9c4:	e9 01       	movw	r28, r18
 9c6:	fb 83       	std	Y+3, r31	; 0x03
 9c8:	ea 83       	std	Y+2, r30	; 0x02
 9ca:	49 91       	ld	r20, Y+
 9cc:	59 91       	ld	r21, Y+
 9ce:	c4 0f       	add	r28, r20
 9d0:	d5 1f       	adc	r29, r21
 9d2:	ec 17       	cp	r30, r28
 9d4:	fd 07       	cpc	r31, r29
 9d6:	61 f4       	brne	.+24     	; 0x9f0 <free+0xbe>
 9d8:	80 81       	ld	r24, Z
 9da:	91 81       	ldd	r25, Z+1	; 0x01
 9dc:	84 0f       	add	r24, r20
 9de:	95 1f       	adc	r25, r21
 9e0:	02 96       	adiw	r24, 0x02	; 2
 9e2:	e9 01       	movw	r28, r18
 9e4:	99 83       	std	Y+1, r25	; 0x01
 9e6:	88 83       	st	Y, r24
 9e8:	82 81       	ldd	r24, Z+2	; 0x02
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	9b 83       	std	Y+3, r25	; 0x03
 9ee:	8a 83       	std	Y+2, r24	; 0x02
 9f0:	e0 e0       	ldi	r30, 0x00	; 0
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	12 96       	adiw	r26, 0x02	; 2
 9f6:	8d 91       	ld	r24, X+
 9f8:	9c 91       	ld	r25, X
 9fa:	13 97       	sbiw	r26, 0x03	; 3
 9fc:	00 97       	sbiw	r24, 0x00	; 0
 9fe:	19 f0       	breq	.+6      	; 0xa06 <free+0xd4>
 a00:	fd 01       	movw	r30, r26
 a02:	dc 01       	movw	r26, r24
 a04:	f7 cf       	rjmp	.-18     	; 0x9f4 <free+0xc2>
 a06:	8d 91       	ld	r24, X+
 a08:	9c 91       	ld	r25, X
 a0a:	11 97       	sbiw	r26, 0x01	; 1
 a0c:	9d 01       	movw	r18, r26
 a0e:	2e 5f       	subi	r18, 0xFE	; 254
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	82 0f       	add	r24, r18
 a14:	93 1f       	adc	r25, r19
 a16:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 a1a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 a1e:	28 17       	cp	r18, r24
 a20:	39 07       	cpc	r19, r25
 a22:	69 f4       	brne	.+26     	; 0xa3e <free+0x10c>
 a24:	30 97       	sbiw	r30, 0x00	; 0
 a26:	29 f4       	brne	.+10     	; 0xa32 <free+0x100>
 a28:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__flp+0x1>
 a2c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__flp>
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <free+0x104>
 a32:	13 82       	std	Z+3, r1	; 0x03
 a34:	12 82       	std	Z+2, r1	; 0x02
 a36:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x1>
 a3a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end>
 a3e:	df 91       	pop	r29
 a40:	cf 91       	pop	r28
 a42:	08 95       	ret

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
