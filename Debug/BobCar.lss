
BobCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001784  00001818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080011c  0080011c  00001834  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ee3  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e3f  00000000  00000000  000039a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109c  00000000  00000000  000047e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00005880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000904  00000000  00000000  00005cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb3  00000000  00000000  000065c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	eb 00       	.word	0x00eb	; ????
      6a:	f9 00       	.word	0x00f9	; ????
      6c:	e5 00       	.word	0x00e5	; ????
      6e:	fb 00       	.word	0x00fb	; ????
      70:	e7 00       	.word	0x00e7	; ????
      72:	f9 00       	.word	0x00f9	; ????
      74:	f9 00       	.word	0x00f9	; ????
      76:	f5 00       	.word	0x00f5	; ????
      78:	f9 00       	.word	0x00f9	; ????
      7a:	f9 00       	.word	0x00f9	; ????
      7c:	ef 00       	.word	0x00ef	; ????
      7e:	f9 00       	.word	0x00f9	; ????
      80:	f9 00       	.word	0x00f9	; ????
      82:	f9 00       	.word	0x00f9	; ????
      84:	e3 00       	.word	0x00e3	; ????
      86:	f9 00       	.word	0x00f9	; ????
      88:	ed 00       	.word	0x00ed	; ????
      8a:	f9 00       	.word	0x00f9	; ????
      8c:	f9 00       	.word	0x00f9	; ????
      8e:	f9 00       	.word	0x00f9	; ????
      90:	f9 00       	.word	0x00f9	; ????
      92:	f3 00       	.word	0x00f3	; ????
      94:	f9 00       	.word	0x00f9	; ????
      96:	e9 00       	.word	0x00e9	; ????
      98:	f9 00       	.word	0x00f9	; ????
      9a:	f9 00       	.word	0x00f9	; ????
      9c:	f9 00       	.word	0x00f9	; ????
      9e:	f9 00       	.word	0x00f9	; ????
      a0:	f9 00       	.word	0x00f9	; ????
      a2:	f9 00       	.word	0x00f9	; ????
      a4:	f9 00       	.word	0x00f9	; ????
      a6:	f9 00       	.word	0x00f9	; ????
      a8:	f9 00       	.word	0x00f9	; ????
      aa:	f9 00       	.word	0x00f9	; ????
      ac:	f9 00       	.word	0x00f9	; ????
      ae:	f9 00       	.word	0x00f9	; ????
      b0:	f9 00       	.word	0x00f9	; ????
      b2:	f9 00       	.word	0x00f9	; ????
      b4:	f9 00       	.word	0x00f9	; ????
      b6:	f9 00       	.word	0x00f9	; ????
      b8:	f9 00       	.word	0x00f9	; ????
      ba:	f9 00       	.word	0x00f9	; ????
      bc:	f1 00       	.word	0x00f1	; ????
      be:	bd 01       	movw	r22, r26
      c0:	c9 01       	movw	r24, r18
      c2:	d5 01       	movw	r26, r10
      c4:	e1 01       	movw	r28, r2
      c6:	ed 01       	movw	r28, r26
      c8:	f9 01       	movw	r30, r18
      ca:	05 02       	muls	r16, r21
      cc:	23 03       	mulsu	r18, r19
      ce:	28 03       	fmul	r18, r16
      d0:	69 03       	fmul	r22, r17
      d2:	c0 03       	fmuls	r20, r16
      d4:	15 04       	cpc	r1, r5
      d6:	56 04       	cpc	r5, r6
      d8:	ad 04       	cpc	r10, r13

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e4 e8       	ldi	r30, 0x84	; 132
      ee:	f7 e1       	ldi	r31, 0x17	; 23
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	ac 31       	cpi	r26, 0x1C	; 28
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	ac e1       	ldi	r26, 0x1C	; 28
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ae 32       	cpi	r26, 0x2E	; 46
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 1a 01 	call	0x234	; 0x234 <main>
     110:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <CTRL_SendDistance>:

void CTRL_SendTemp(unsigned int temperature){
	char message[15];
	sprintf(message, "T%u\n", temperature);
	UART_putstring(&message[0]);
}
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	64 97       	sbiw	r28, 0x14	; 20
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	5f 93       	push	r21
     132:	4f 93       	push	r20
     134:	3f 93       	push	r19
     136:	2f 93       	push	r18
     138:	9f 93       	push	r25
     13a:	8f 93       	push	r24
     13c:	7f 93       	push	r23
     13e:	6f 93       	push	r22
     140:	86 e0       	ldi	r24, 0x06	; 6
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	9f 93       	push	r25
     146:	8f 93       	push	r24
     148:	8e 01       	movw	r16, r28
     14a:	0f 5f       	subi	r16, 0xFF	; 255
     14c:	1f 4f       	sbci	r17, 0xFF	; 255
     14e:	1f 93       	push	r17
     150:	0f 93       	push	r16
     152:	0e 94 d6 08 	call	0x11ac	; 0x11ac <sprintf>
     156:	c8 01       	movw	r24, r16
     158:	0e 94 4b 06 	call	0xc96	; 0xc96 <UART_putstring>
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	de bf       	out	0x3e, r29	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	cd bf       	out	0x3d, r28	; 61
     166:	64 96       	adiw	r28, 0x14	; 20
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	0f be       	out	0x3f, r0	; 63
     170:	cd bf       	out	0x3d, r28	; 61
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <CTRL_GetPower>:

void CTRL_GetPower(void){
	if(UART_available()){
     17c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <UART_available>
     180:	88 23       	and	r24, r24
     182:	99 f0       	breq	.+38     	; 0x1aa <CTRL_GetPower+0x2e>
		power = 10*(int)(UART_read()-'0');
     184:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_read>
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	c0 97       	sbiw	r24, 0x30	; 48
     18c:	9c 01       	movw	r18, r24
     18e:	22 0f       	add	r18, r18
     190:	33 1f       	adc	r19, r19
     192:	88 0f       	add	r24, r24
     194:	99 1f       	adc	r25, r25
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	82 0f       	add	r24, r18
     1a0:	93 1f       	adc	r25, r19
     1a2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <power+0x1>
     1a6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <power>
     1aa:	08 95       	ret

000001ac <CTRL_GetCommand>:
	}
}

enum commands CTRL_GetCommand(){
	char received_char;
	received_char = UART_read();
     1ac:	0e 94 60 06 	call	0xcc0	; 0xcc0 <UART_read>
	
	switch(received_char){
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	fc 01       	movw	r30, r24
     1b4:	e3 54       	subi	r30, 0x43	; 67
     1b6:	f1 09       	sbc	r31, r1
     1b8:	eb 32       	cpi	r30, 0x2B	; 43
     1ba:	f1 05       	cpc	r31, r1
     1bc:	d0 f4       	brcc	.+52     	; 0x1f2 <CTRL_GetCommand+0x46>
     1be:	ec 5c       	subi	r30, 0xCC	; 204
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__tablejump2__>
		case 'F':
			return FORWARD;
			break;
		case 'Q':
			return FORWARD_LEFT;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	08 95       	ret
			break;
		case 'E':
			return FORWARD_RIGHT;
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	08 95       	ret
			break;
		case 'G':
			return BACKWARDS;
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	08 95       	ret
			break;
		case 'Z':
			return BACKWARDS_LEFT;
     1d2:	84 e0       	ldi	r24, 0x04	; 4
     1d4:	08 95       	ret
			break;
		case 'C':
			return BACKWARDS_RIGHT;
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	08 95       	ret
			break;
		case 'S':
			return NEUTRAL;
     1da:	86 e0       	ldi	r24, 0x06	; 6
     1dc:	08 95       	ret
			break;
		case 'M':
			return LIGHTS_ON;
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	08 95       	ret
			break;
		case 'm':
			return LIGHTS_OFF;
     1e2:	89 e0       	ldi	r24, 0x09	; 9
     1e4:	08 95       	ret
			break;
		case 'X':
			return BEEP;
     1e6:	8a e0       	ldi	r24, 0x0A	; 10
     1e8:	08 95       	ret
			break;
		case 'J':
			CTRL_GetPower();
     1ea:	0e 94 be 00 	call	0x17c	; 0x17c <CTRL_GetPower>
			return POWER;
     1ee:	87 e0       	ldi	r24, 0x07	; 7
     1f0:	08 95       	ret
			break;
		default:
			return UNKNOWN;
     1f2:	8b e0       	ldi	r24, 0x0B	; 11
     1f4:	08 95       	ret
	char received_char;
	received_char = UART_read();
	
	switch(received_char){
		case 'F':
			return FORWARD;
     1f6:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return UNKNOWN;
			break;
	}
}
     1f8:	08 95       	ret

000001fa <Init_Timer0>:
/* Init_Timer0
*  Initialize Timer0 for Fast PWM on pin 5 (BUZZER)
*/
void Init_Timer0() {
	
	sei();
     1fa:	78 94       	sei
	
	//		  tmr 8-bit									 | toggle pin 5
	TCCR0A |= (1 << WGM02) | (1 << WGM01) | (1 << WGM00) | (1 << COM0B1);
     1fc:	84 b5       	in	r24, 0x24	; 36
     1fe:	8b 62       	ori	r24, 0x2B	; 43
     200:	84 bd       	out	0x24, r24	; 36
	
	//TIMSK0 |= (1 << TOIE0);
		
	OCR0A = 0xF0;
     202:	80 ef       	ldi	r24, 0xF0	; 240
     204:	87 bd       	out	0x27, r24	; 39
     206:	08 95       	ret

00000208 <LnS_Init>:

/* LnS_Init
 * initialize lights and buzzer pins as outputs and set to 0
 */
void LnS_Init(){
	DDRC |= (1 << PIN_MAIN_LIGHTS);
     208:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= (1 << PIN_BACKWARD_LIGHTS);
     20a:	39 9a       	sbi	0x07, 1	; 7
	DDRC |= (1 << PIN_BREAK_LIGHTS);
     20c:	3a 9a       	sbi	0x07, 2	; 7
	DDRD |= (1 << PIN_BUZZER);
     20e:	55 9a       	sbi	0x0a, 5	; 10
	PORTC &= ~(1 << PIN_MAIN_LIGHTS);
     210:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1 << PIN_BACKWARD_LIGHTS);
     212:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1 << PIN_BREAK_LIGHTS);
     214:	42 98       	cbi	0x08, 2	; 8
	PORTD &= ~(1 << PIN_BUZZER);
     216:	5d 98       	cbi	0x0b, 5	; 11
	Init_Timer0();
     218:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Init_Timer0>
 * Switch buzzer ON/OFF
 *	state: ON/OFF defined in .h
 */
void LnS_BuzzerSwitch(int state){
	if(state == OFF)
		TCCR0B &= (0 << CS02);		//timer 0 off
     21c:	85 b5       	in	r24, 0x25	; 37
     21e:	15 bc       	out	0x25, r1	; 37
     220:	08 95       	ret

00000222 <LnS_BuzzerSwitch>:
/* LnS_BuzzerSwitch
 * Switch buzzer ON/OFF
 *	state: ON/OFF defined in .h
 */
void LnS_BuzzerSwitch(int state){
	if(state == OFF)
     222:	89 2b       	or	r24, r25
     224:	19 f4       	brne	.+6      	; 0x22c <LnS_BuzzerSwitch+0xa>
		TCCR0B &= (0 << CS02);		//timer 0 off
     226:	85 b5       	in	r24, 0x25	; 37
     228:	15 bc       	out	0x25, r1	; 37
     22a:	08 95       	ret
	else
		TCCR0B |= (1 << CS02);		//16Mhz / (1 * 255) = 62kHz}
     22c:	85 b5       	in	r24, 0x25	; 37
     22e:	84 60       	ori	r24, 0x04	; 4
     230:	85 bd       	out	0x25, r24	; 37
     232:	08 95       	ret

00000234 <main>:
#include <util/delay.h>


int main(void)
{	
	UART_init(9600, true, true);
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	80 e8       	ldi	r24, 0x80	; 128
     23a:	95 e2       	ldi	r25, 0x25	; 37
     23c:	0e 94 09 06 	call	0xc12	; 0xc12 <UART_init>

	POWTR_Init();
     240:	0e 94 60 01 	call	0x2c0	; 0x2c0 <POWTR_Init>
	LnS_Init();
     244:	0e 94 04 01 	call	0x208	; 0x208 <LnS_Init>
	SENS_Init();
     248:	0e 94 0c 02 	call	0x418	; 0x418 <SENS_Init>
	
	LnS_BuzzerSwitch(ON);
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     254:	2f ef       	ldi	r18, 0xFF	; 255
     256:	82 e5       	ldi	r24, 0x52	; 82
     258:	97 e0       	ldi	r25, 0x07	; 7
     25a:	21 50       	subi	r18, 0x01	; 1
     25c:	80 40       	sbci	r24, 0x00	; 0
     25e:	90 40       	sbci	r25, 0x00	; 0
     260:	e1 f7       	brne	.-8      	; 0x25a <main+0x26>
     262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x30>
     264:	00 00       	nop
	_delay_ms(150);
	LnS_BuzzerSwitch(OFF);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
	
	while (1)
	{		
		// read sensors
		SENS_CheckForObstacles(200, 50);
     26e:	62 e3       	ldi	r22, 0x32	; 50
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	88 ec       	ldi	r24, 0xC8	; 200
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 97 02 	call	0x52e	; 0x52e <SENS_CheckForObstacles>
		SENS_CheckLight();
     27a:	0e 94 96 02 	call	0x52c	; 0x52c <SENS_CheckLight>
		
		// read commands from controller
		if(UART_available()){
     27e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <UART_available>
     282:	88 23       	and	r24, r24
     284:	41 f0       	breq	.+16     	; 0x296 <main+0x62>
			command = CTRL_GetCommand();
     286:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CTRL_GetCommand>
     28a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <command>
			if((int)command <= 7){
     28e:	88 30       	cpi	r24, 0x08	; 8
     290:	10 f4       	brcc	.+4      	; 0x296 <main+0x62>
				POWTR_SendCommand(command);
     292:	0e 94 b3 01 	call	0x366	; 0x366 <POWTR_SendCommand>
     296:	2f ef       	ldi	r18, 0xFF	; 255
     298:	89 ef       	ldi	r24, 0xF9	; 249
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	21 50       	subi	r18, 0x01	; 1
     29e:	80 40       	sbci	r24, 0x00	; 0
     2a0:	90 40       	sbci	r25, 0x00	; 0
     2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x68>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x72>
     2a6:	00 00       	nop
     2a8:	e2 cf       	rjmp	.-60     	; 0x26e <main+0x3a>

000002aa <Timer2_Init>:
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
     2aa:	e0 eb       	ldi	r30, 0xB0	; 176
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	83 68       	ori	r24, 0x83	; 131
     2b2:	80 83       	st	Z, r24
     2b4:	e1 eb       	ldi	r30, 0xB1	; 177
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	84 60       	ori	r24, 0x04	; 4
     2bc:	80 83       	st	Z, r24
     2be:	08 95       	ret

000002c0 <POWTR_Init>:
/* POWTR_init
 * Initialize motoros PWM, pins as outputs and set them to LOW
 */
void POWTR_Init(){
	// driving motor pins
	DDRD |= (1 << PIN_BWD);
     2c0:	54 9a       	sbi	0x0a, 4	; 10
	DDRC |= (1 << PIN_FWD);
     2c2:	3d 9a       	sbi	0x07, 5	; 7
	DDRB |= (1 << PIN_POWER);
     2c4:	23 9a       	sbi	0x04, 3	; 4
	PORTD &= ~(1 << PIN_BWD);
     2c6:	5c 98       	cbi	0x0b, 4	; 11
	PORTC &= ~(1 << PIN_FWD);
     2c8:	45 98       	cbi	0x08, 5	; 8
	PORTB &= ~(1 << PIN_POWER);
     2ca:	2b 98       	cbi	0x05, 3	; 5
	
	// turning motor pins
	DDRD |= (1 << PIN_TURN_L);
     2cc:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1 << PIN_TURN_R);
     2ce:	20 9a       	sbi	0x04, 0	; 4
	PORTD &= ~(1 << PIN_TURN_L);
     2d0:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
     2d2:	28 98       	cbi	0x05, 0	; 5
	
	Timer2_Init();
     2d4:	0e 94 55 01 	call	0x2aa	; 0x2aa <Timer2_Init>
	
	power = 50;
     2d8:	82 e3       	ldi	r24, 0x32	; 50
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <power+0x1>
     2e0:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <power>
	car_state = STOPPED;
     2e4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <car_state>
     2e8:	08 95       	ret

000002ea <POWTR_TurnLeft>:
/* POWTR_TurnLeft
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnLeft(){
	PORTD |= (1 << PIN_TURN_L);
     2ea:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
     2ec:	28 98       	cbi	0x05, 0	; 5
     2ee:	08 95       	ret

000002f0 <POWTR_TurnRight>:
/* POWTR_TurnRight
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnRight(){
	PORTD &= ~(1 << PIN_TURN_L);
     2f0:	5f 98       	cbi	0x0b, 7	; 11
	PORTB |= (1 << PIN_TURN_R);
     2f2:	28 9a       	sbi	0x05, 0	; 5
     2f4:	08 95       	ret

000002f6 <POWTR_NoTurn>:

/* POWTR_NoTurn
 * Set motor driver inputs to 0 to not turn the wheels
 */
void POWTR_NoTurn(){
	PORTD &= ~(1 << PIN_TURN_L);
     2f6:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
     2f8:	28 98       	cbi	0x05, 0	; 5
     2fa:	08 95       	ret

000002fc <POWTR_DriveForward>:
/* POWTR_DriveForward
 * Set motor driver inputs to rotate 
 * driving motor forward
 */
void POWTR_DriveForward(){
	PORTC |= (1 << PIN_FWD);
     2fc:	45 9a       	sbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
     2fe:	5c 98       	cbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
     300:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <power>
     304:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <power+0x1>
     308:	4e e6       	ldi	r20, 0x6E	; 110
     30a:	42 9f       	mul	r20, r18
     30c:	c0 01       	movw	r24, r0
     30e:	43 9f       	mul	r20, r19
     310:	90 0d       	add	r25, r0
     312:	11 24       	eor	r1, r1
     314:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     318:	08 95       	ret

0000031a <POWTR_DriveBackward>:
/* POWTR_DriveBackward
 * Set motor driver inputs to rotate 
 * driving motor backward
 */
void POWTR_DriveBackward(){
	PORTC &= ~(1 << PIN_FWD);
     31a:	45 98       	cbi	0x08, 5	; 8
	PORTD |= (1 << PIN_BWD);
     31c:	5c 9a       	sbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
     31e:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <power>
     322:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <power+0x1>
     326:	4e e6       	ldi	r20, 0x6E	; 110
     328:	42 9f       	mul	r20, r18
     32a:	c0 01       	movw	r24, r0
     32c:	43 9f       	mul	r20, r19
     32e:	90 0d       	add	r25, r0
     330:	11 24       	eor	r1, r1
     332:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     336:	08 95       	ret

00000338 <POWTR_Stop>:
     338:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
/* POWTR_Stop
 * Set motor driver inputs and timer counter to 0
 */
void POWTR_Stop(){
	Timer2_SetCounter(0);
	PORTC &= ~(1 << PIN_FWD);
     33c:	45 98       	cbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
     33e:	5c 98       	cbi	0x0b, 4	; 11
     340:	08 95       	ret

00000342 <POWTR_BlockDrivingForward>:
}

void POWTR_BlockDrivingForward(){
	block_forward = true;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <block_forward>
	POWTR_Stop();
     348:	0e 94 9c 01 	call	0x338	; 0x338 <POWTR_Stop>
     34c:	08 95       	ret

0000034e <POWTR_BlockDrivingBackward>:
}

void POWTR_BlockDrivingBackward(){
	block_backward = true;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	POWTR_Stop();
     354:	0e 94 9c 01 	call	0x338	; 0x338 <POWTR_Stop>
     358:	08 95       	ret

0000035a <POWTR_UnblockDrivingForward>:
}

void POWTR_UnblockDrivingForward(){
	block_forward = false;
     35a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <block_forward>
     35e:	08 95       	ret

00000360 <POWTR_UnblockDrivingBackward>:
}

void POWTR_UnblockDrivingBackward(){
	block_backward = false;
     360:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
     364:	08 95       	ret

00000366 <POWTR_SendCommand>:
 * Params:
 *	command:	command from bluetooth module (of type enum command)
 *				related to powertrain
 */
void POWTR_SendCommand(enum commands command){
	switch(command){
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	87 30       	cpi	r24, 0x07	; 7
     36a:	91 05       	cpc	r25, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <POWTR_SendCommand+0xa>
     36e:	53 c0       	rjmp	.+166    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     370:	fc 01       	movw	r30, r24
     372:	e1 5a       	subi	r30, 0xA1	; 161
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__tablejump2__>
		case FORWARD:
			if(block_forward) break;
     37a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <block_forward>
     37e:	81 11       	cpse	r24, r1
     380:	4a c0       	rjmp	.+148    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			car_state = DRV_FWD;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_NoTurn();
     388:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <POWTR_NoTurn>
			POWTR_DriveForward();
     38c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <POWTR_DriveForward>
			break;
     390:	08 95       	ret
		case FORWARD_LEFT:
			if(block_forward) break;
     392:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <block_forward>
     396:	81 11       	cpse	r24, r1
     398:	3e c0       	rjmp	.+124    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			car_state = DRV_FWD_L;
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnLeft();
     3a0:	0e 94 75 01 	call	0x2ea	; 0x2ea <POWTR_TurnLeft>
			POWTR_DriveForward();
     3a4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <POWTR_DriveForward>
			break;
     3a8:	08 95       	ret
		case FORWARD_RIGHT:
			if(block_forward) break;
     3aa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <block_forward>
     3ae:	81 11       	cpse	r24, r1
     3b0:	32 c0       	rjmp	.+100    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			car_state = DRV_FWD_R;
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnRight();
     3b8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <POWTR_TurnRight>
			POWTR_DriveForward();
     3bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <POWTR_DriveForward>
			break;
     3c0:	08 95       	ret
		case BACKWARDS:
			if(block_backward) break;
     3c2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     3c6:	81 11       	cpse	r24, r1
     3c8:	26 c0       	rjmp	.+76     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			car_state = DRV_BWD;
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_NoTurn();
     3d0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <POWTR_NoTurn>
			POWTR_DriveBackward();
     3d4:	0e 94 8d 01 	call	0x31a	; 0x31a <POWTR_DriveBackward>
			break;
     3d8:	08 95       	ret
		case BACKWARDS_LEFT:
			if(block_backward) break;
     3da:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     3de:	81 11       	cpse	r24, r1
     3e0:	1a c0       	rjmp	.+52     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			car_state = DRV_BWD_L;
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnLeft();
     3e8:	0e 94 75 01 	call	0x2ea	; 0x2ea <POWTR_TurnLeft>
			POWTR_DriveBackward();
     3ec:	0e 94 8d 01 	call	0x31a	; 0x31a <POWTR_DriveBackward>
			break;
     3f0:	08 95       	ret
		case BACKWARDS_RIGHT:
			if(block_backward) break;
     3f2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     3f6:	81 11       	cpse	r24, r1
     3f8:	0e c0       	rjmp	.+28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			car_state = DRV_BWD_R;
     3fa:	86 e0       	ldi	r24, 0x06	; 6
     3fc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnRight();
     400:	0e 94 78 01 	call	0x2f0	; 0x2f0 <POWTR_TurnRight>
			POWTR_DriveBackward();
     404:	0e 94 8d 01 	call	0x31a	; 0x31a <POWTR_DriveBackward>
			break;
     408:	08 95       	ret
		case NEUTRAL:
			car_state = STOPPED;
     40a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <car_state>
			POWTR_NoTurn();
     40e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <POWTR_NoTurn>
			POWTR_Stop();
     412:	0e 94 9c 01 	call	0x338	; 0x338 <POWTR_Stop>
     416:	08 95       	ret

00000418 <SENS_Init>:
sr_04 *RR_proximity;
sr_04 *RL_proximity;
sr_04 *FR_proximity;
sr_04 *FL_proximity;

void SENS_Init(){	
     418:	8f 92       	push	r8
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
	// rear right proximity sensor
	RR_proximity = sensor_new(4, &DDRB, DDB1, &PORTB, PORTB1, &DDRB, DDB2, &PINB, PINB2);
     426:	68 94       	set
     428:	88 24       	eor	r8, r8
     42a:	81 f8       	bld	r8, 1
     42c:	0f 2e       	mov	r0, r31
     42e:	f3 e2       	ldi	r31, 0x23	; 35
     430:	af 2e       	mov	r10, r31
     432:	b1 2c       	mov	r11, r1
     434:	f0 2d       	mov	r31, r0
     436:	68 94       	set
     438:	cc 24       	eor	r12, r12
     43a:	c1 f8       	bld	r12, 1
     43c:	0f 2e       	mov	r0, r31
     43e:	f4 e2       	ldi	r31, 0x24	; 36
     440:	ef 2e       	mov	r14, r31
     442:	f1 2c       	mov	r15, r1
     444:	f0 2d       	mov	r31, r0
     446:	01 e0       	ldi	r16, 0x01	; 1
     448:	25 e2       	ldi	r18, 0x25	; 37
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	64 e2       	ldi	r22, 0x24	; 36
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	0e 94 0e 05 	call	0xa1c	; 0xa1c <sensor_new>
     458:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <RR_proximity+0x1>
     45c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <RR_proximity>
	// rear left proximity sensor
	RL_proximity = sensor_new(4, &DDRC, DDC3, &PORTC, PORTC3, &DDRC, DDC4, &PINC, PINC4);
     460:	68 94       	set
     462:	88 24       	eor	r8, r8
     464:	82 f8       	bld	r8, 2
     466:	0f 2e       	mov	r0, r31
     468:	f6 e2       	ldi	r31, 0x26	; 38
     46a:	af 2e       	mov	r10, r31
     46c:	b1 2c       	mov	r11, r1
     46e:	f0 2d       	mov	r31, r0
     470:	68 94       	set
     472:	cc 24       	eor	r12, r12
     474:	c2 f8       	bld	r12, 2
     476:	0f 2e       	mov	r0, r31
     478:	f7 e2       	ldi	r31, 0x27	; 39
     47a:	ef 2e       	mov	r14, r31
     47c:	f1 2c       	mov	r15, r1
     47e:	f0 2d       	mov	r31, r0
     480:	03 e0       	ldi	r16, 0x03	; 3
     482:	28 e2       	ldi	r18, 0x28	; 40
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	43 e0       	ldi	r20, 0x03	; 3
     488:	67 e2       	ldi	r22, 0x27	; 39
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <sensor_new>
     492:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <RL_proximity+0x1>
     496:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <RL_proximity>
	// front right proximity sensor
	FR_proximity = sensor_new(4, &DDRD, DDD3, &PORTD, PORTD3, &DDRD, DDD6, &PIND, PIND6);
     49a:	0f 2e       	mov	r0, r31
     49c:	f6 e0       	ldi	r31, 0x06	; 6
     49e:	8f 2e       	mov	r8, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f9 e2       	ldi	r31, 0x29	; 41
     4a6:	af 2e       	mov	r10, r31
     4a8:	b1 2c       	mov	r11, r1
     4aa:	f0 2d       	mov	r31, r0
     4ac:	0f 2e       	mov	r0, r31
     4ae:	f6 e0       	ldi	r31, 0x06	; 6
     4b0:	cf 2e       	mov	r12, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	0f 2e       	mov	r0, r31
     4b6:	fa e2       	ldi	r31, 0x2A	; 42
     4b8:	ef 2e       	mov	r14, r31
     4ba:	f1 2c       	mov	r15, r1
     4bc:	f0 2d       	mov	r31, r0
     4be:	2b e2       	ldi	r18, 0x2B	; 43
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	43 e0       	ldi	r20, 0x03	; 3
     4c4:	6a e2       	ldi	r22, 0x2A	; 42
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	84 e0       	ldi	r24, 0x04	; 4
     4ca:	0e 94 0e 05 	call	0xa1c	; 0xa1c <sensor_new>
     4ce:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <FR_proximity+0x1>
     4d2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <FR_proximity>
	// front left proximity sensor
	FL_proximity = sensor_new(4, &DDRB, DDB5, &PORTB, PORTB5, &DDRB, DDB4, &PINB, PINB4);
     4d6:	68 94       	set
     4d8:	88 24       	eor	r8, r8
     4da:	82 f8       	bld	r8, 2
     4dc:	0f 2e       	mov	r0, r31
     4de:	f3 e2       	ldi	r31, 0x23	; 35
     4e0:	af 2e       	mov	r10, r31
     4e2:	b1 2c       	mov	r11, r1
     4e4:	f0 2d       	mov	r31, r0
     4e6:	68 94       	set
     4e8:	cc 24       	eor	r12, r12
     4ea:	c2 f8       	bld	r12, 2
     4ec:	0f 2e       	mov	r0, r31
     4ee:	f4 e2       	ldi	r31, 0x24	; 36
     4f0:	ef 2e       	mov	r14, r31
     4f2:	f1 2c       	mov	r15, r1
     4f4:	f0 2d       	mov	r31, r0
     4f6:	05 e0       	ldi	r16, 0x05	; 5
     4f8:	25 e2       	ldi	r18, 0x25	; 37
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	45 e0       	ldi	r20, 0x05	; 5
     4fe:	64 e2       	ldi	r22, 0x24	; 36
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	0e 94 0e 05 	call	0xa1c	; 0xa1c <sensor_new>
     508:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <FL_proximity+0x1>
     50c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <FL_proximity>
	
	ADMUX = 0b01100000;
     510:	80 e6       	ldi	r24, 0x60	; 96
     512:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b10000111;
     516:	87 e8       	ldi	r24, 0x87	; 135
     518:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
}
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	cf 90       	pop	r12
     524:	bf 90       	pop	r11
     526:	af 90       	pop	r10
     528:	8f 90       	pop	r8
     52a:	08 95       	ret

0000052c <SENS_CheckLight>:

void SENS_CheckLight(void){
     52c:	08 95       	ret

0000052e <SENS_CheckForObstacles>:
	
}

void SENS_CheckForObstacles(int warn_distance, int critical_distance){
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	8c 01       	movw	r16, r24
     548:	eb 01       	movw	r28, r22
	switch(car_state){
     54a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <car_state>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	08 f4       	brcc	.+2      	; 0x554 <SENS_CheckForObstacles+0x26>
     552:	6c c0       	rjmp	.+216    	; 0x62c <SENS_CheckForObstacles+0xfe>
     554:	84 30       	cpi	r24, 0x04	; 4
     556:	18 f0       	brcs	.+6      	; 0x55e <SENS_CheckForObstacles+0x30>
     558:	87 30       	cpi	r24, 0x07	; 7
     55a:	a8 f1       	brcs	.+106    	; 0x5c6 <SENS_CheckForObstacles+0x98>
     55c:	67 c0       	rjmp	.+206    	; 0x62c <SENS_CheckForObstacles+0xfe>
		case DRV_FWD:
		case DRV_FWD_L:
		case DRV_FWD_R:
			get_dist_mm(FL_proximity);
     55e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <FL_proximity>
     562:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <FL_proximity+0x1>
     566:	0e 94 e5 05 	call	0xbca	; 0xbca <get_dist_mm>
			get_dist_mm(FR_proximity);
     56a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FR_proximity>
     56e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <FR_proximity+0x1>
     572:	0e 94 e5 05 	call	0xbca	; 0xbca <get_dist_mm>
			CTRL_SendDistance((FL_proximity->_last_distance_mm)/10, (FR_proximity->_last_distance_mm)/10);
     576:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     57a:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     57e:	60 81       	ld	r22, Z
     580:	71 81       	ldd	r23, Z+1	; 0x01
     582:	82 81       	ldd	r24, Z+2	; 0x02
     584:	93 81       	ldd	r25, Z+3	; 0x03
     586:	0f 2e       	mov	r0, r31
     588:	fa e0       	ldi	r31, 0x0A	; 10
     58a:	cf 2e       	mov	r12, r31
     58c:	d1 2c       	mov	r13, r1
     58e:	e1 2c       	mov	r14, r1
     590:	f1 2c       	mov	r15, r1
     592:	f0 2d       	mov	r31, r0
     594:	a7 01       	movw	r20, r14
     596:	96 01       	movw	r18, r12
     598:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__udivmodsi4>
     59c:	49 01       	movw	r8, r18
     59e:	5a 01       	movw	r10, r20
     5a0:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     5a4:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     5a8:	60 81       	ld	r22, Z
     5aa:	71 81       	ldd	r23, Z+1	; 0x01
     5ac:	82 81       	ldd	r24, Z+2	; 0x02
     5ae:	93 81       	ldd	r25, Z+3	; 0x03
     5b0:	a7 01       	movw	r20, r14
     5b2:	96 01       	movw	r18, r12
     5b4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__udivmodsi4>
     5b8:	ca 01       	movw	r24, r20
     5ba:	b9 01       	movw	r22, r18
     5bc:	a5 01       	movw	r20, r10
     5be:	94 01       	movw	r18, r8
     5c0:	0e 94 8c 00 	call	0x118	; 0x118 <CTRL_SendDistance>
			break;
     5c4:	33 c0       	rjmp	.+102    	; 0x62c <SENS_CheckForObstacles+0xfe>
		case DRV_BWD:
		case DRV_BWD_L:
		case DRV_BWD_R:
			get_dist_mm(RL_proximity);
     5c6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <RL_proximity>
     5ca:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <RL_proximity+0x1>
     5ce:	0e 94 e5 05 	call	0xbca	; 0xbca <get_dist_mm>
			get_dist_mm(RR_proximity);
     5d2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <RR_proximity>
     5d6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <RR_proximity+0x1>
     5da:	0e 94 e5 05 	call	0xbca	; 0xbca <get_dist_mm>
			CTRL_SendDistance((RL_proximity->_last_distance_mm)/10, (RR_proximity->_last_distance_mm)/10);
     5de:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     5e2:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     5e6:	60 81       	ld	r22, Z
     5e8:	71 81       	ldd	r23, Z+1	; 0x01
     5ea:	82 81       	ldd	r24, Z+2	; 0x02
     5ec:	93 81       	ldd	r25, Z+3	; 0x03
     5ee:	0f 2e       	mov	r0, r31
     5f0:	fa e0       	ldi	r31, 0x0A	; 10
     5f2:	cf 2e       	mov	r12, r31
     5f4:	d1 2c       	mov	r13, r1
     5f6:	e1 2c       	mov	r14, r1
     5f8:	f1 2c       	mov	r15, r1
     5fa:	f0 2d       	mov	r31, r0
     5fc:	a7 01       	movw	r20, r14
     5fe:	96 01       	movw	r18, r12
     600:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__udivmodsi4>
     604:	49 01       	movw	r8, r18
     606:	5a 01       	movw	r10, r20
     608:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     60c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     610:	60 81       	ld	r22, Z
     612:	71 81       	ldd	r23, Z+1	; 0x01
     614:	82 81       	ldd	r24, Z+2	; 0x02
     616:	93 81       	ldd	r25, Z+3	; 0x03
     618:	a7 01       	movw	r20, r14
     61a:	96 01       	movw	r18, r12
     61c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__udivmodsi4>
     620:	ca 01       	movw	r24, r20
     622:	b9 01       	movw	r22, r18
     624:	a5 01       	movw	r20, r10
     626:	94 01       	movw	r18, r8
     628:	0e 94 8c 00 	call	0x118	; 0x118 <CTRL_SendDistance>
			break;
		default:
			break;
	}
	
	switch (car_state){
     62c:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <car_state>
     630:	8e 2f       	mov	r24, r30
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	87 30       	cpi	r24, 0x07	; 7
     636:	91 05       	cpc	r25, r1
     638:	08 f0       	brcs	.+2      	; 0x63c <SENS_CheckForObstacles+0x10e>
     63a:	e3 c1       	rjmp	.+966    	; 0xa02 <__stack+0x103>
     63c:	fc 01       	movw	r30, r24
     63e:	ea 59       	subi	r30, 0x9A	; 154
     640:	ff 4f       	sbci	r31, 0xFF	; 255
     642:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__tablejump2__>
		case STOPPED:
			LnS_BuzzerSwitch(OFF);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
			break;
     64e:	d9 c1       	rjmp	.+946    	; 0xa02 <__stack+0x103>
		case DRV_FWD:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     650:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     654:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     658:	40 81       	ld	r20, Z
     65a:	51 81       	ldd	r21, Z+1	; 0x01
     65c:	62 81       	ldd	r22, Z+2	; 0x02
     65e:	73 81       	ldd	r23, Z+3	; 0x03
     660:	ce 01       	movw	r24, r28
     662:	dd 0f       	add	r29, r29
     664:	aa 0b       	sbc	r26, r26
     666:	bb 0b       	sbc	r27, r27
     668:	84 17       	cp	r24, r20
     66a:	95 07       	cpc	r25, r21
     66c:	a6 07       	cpc	r26, r22
     66e:	b7 07       	cpc	r27, r23
     670:	68 f4       	brcc	.+26     	; 0x68c <SENS_CheckForObstacles+0x15e>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
     672:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     676:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     67a:	c0 80       	ld	r12, Z
     67c:	d1 80       	ldd	r13, Z+1	; 0x01
     67e:	e2 80       	ldd	r14, Z+2	; 0x02
     680:	f3 80       	ldd	r15, Z+3	; 0x03
	switch (car_state){
		case STOPPED:
			LnS_BuzzerSwitch(OFF);
			break;
		case DRV_FWD:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     682:	8c 15       	cp	r24, r12
     684:	9d 05       	cpc	r25, r13
     686:	ae 05       	cpc	r26, r14
     688:	bf 05       	cpc	r27, r15
     68a:	38 f0       	brcs	.+14     	; 0x69a <SENS_CheckForObstacles+0x16c>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingForward();
     68c:	0e 94 a1 01 	call	0x342	; 0x342 <POWTR_BlockDrivingForward>
				LnS_BuzzerSwitch(ON);
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     698:	b4 c1       	rjmp	.+872    	; 0xa02 <__stack+0x103>
			} else if((FL_proximity->_last_distance_mm <= warn_distance) ||
     69a:	01 2e       	mov	r0, r17
     69c:	00 0c       	add	r0, r0
     69e:	22 0b       	sbc	r18, r18
     6a0:	33 0b       	sbc	r19, r19
     6a2:	04 17       	cp	r16, r20
     6a4:	15 07       	cpc	r17, r21
     6a6:	26 07       	cpc	r18, r22
     6a8:	37 07       	cpc	r19, r23
     6aa:	28 f4       	brcc	.+10     	; 0x6b6 <SENS_CheckForObstacles+0x188>
     6ac:	0c 15       	cp	r16, r12
     6ae:	1d 05       	cpc	r17, r13
     6b0:	2e 05       	cpc	r18, r14
     6b2:	3f 05       	cpc	r19, r15
     6b4:	38 f0       	brcs	.+14     	; 0x6c4 <SENS_CheckForObstacles+0x196>
					  (FR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingForward();
     6b6:	0e 94 ad 01 	call	0x35a	; 0x35a <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(ON);
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     6c2:	9f c1       	rjmp	.+830    	; 0xa02 <__stack+0x103>
			} else {
				POWTR_UnblockDrivingForward();
     6c4:	0e 94 ad 01 	call	0x35a	; 0x35a <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(OFF);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     6d0:	98 c1       	rjmp	.+816    	; 0xa02 <__stack+0x103>
			}
			break;
		case DRV_FWD_L:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     6d2:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     6d6:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     6da:	c0 80       	ld	r12, Z
     6dc:	d1 80       	ldd	r13, Z+1	; 0x01
     6de:	e2 80       	ldd	r14, Z+2	; 0x02
     6e0:	f3 80       	ldd	r15, Z+3	; 0x03
     6e2:	ce 01       	movw	r24, r28
     6e4:	0d 2e       	mov	r0, r29
     6e6:	00 0c       	add	r0, r0
     6e8:	aa 0b       	sbc	r26, r26
     6ea:	bb 0b       	sbc	r27, r27
     6ec:	8c 15       	cp	r24, r12
     6ee:	9d 05       	cpc	r25, r13
     6f0:	ae 05       	cpc	r26, r14
     6f2:	bf 05       	cpc	r27, r15
     6f4:	b8 f4       	brcc	.+46     	; 0x724 <SENS_CheckForObstacles+0x1f6>
			   (FR_proximity->_last_distance_mm <= critical_distance/2)){
     6f6:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     6fa:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     6fe:	40 81       	ld	r20, Z
     700:	51 81       	ldd	r21, Z+1	; 0x01
     702:	62 81       	ldd	r22, Z+2	; 0x02
     704:	73 81       	ldd	r23, Z+3	; 0x03
				POWTR_UnblockDrivingForward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_FWD_L:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     706:	ce 01       	movw	r24, r28
     708:	dd 23       	and	r29, r29
     70a:	0c f4       	brge	.+2      	; 0x70e <SENS_CheckForObstacles+0x1e0>
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	95 95       	asr	r25
     710:	87 95       	ror	r24
     712:	09 2e       	mov	r0, r25
     714:	00 0c       	add	r0, r0
     716:	aa 0b       	sbc	r26, r26
     718:	bb 0b       	sbc	r27, r27
     71a:	84 17       	cp	r24, r20
     71c:	95 07       	cpc	r25, r21
     71e:	a6 07       	cpc	r26, r22
     720:	b7 07       	cpc	r27, r23
     722:	38 f0       	brcs	.+14     	; 0x732 <SENS_CheckForObstacles+0x204>
			   (FR_proximity->_last_distance_mm <= critical_distance/2)){
				POWTR_BlockDrivingForward();
     724:	0e 94 a1 01 	call	0x342	; 0x342 <POWTR_BlockDrivingForward>
				LnS_BuzzerSwitch(ON);
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     730:	68 c1       	rjmp	.+720    	; 0xa02 <__stack+0x103>
			} else if((FL_proximity->_last_distance_mm <= warn_distance) ||
     732:	c8 01       	movw	r24, r16
     734:	01 2e       	mov	r0, r17
     736:	00 0c       	add	r0, r0
     738:	aa 0b       	sbc	r26, r26
     73a:	bb 0b       	sbc	r27, r27
     73c:	8c 15       	cp	r24, r12
     73e:	9d 05       	cpc	r25, r13
     740:	ae 05       	cpc	r26, r14
     742:	bf 05       	cpc	r27, r15
     744:	78 f4       	brcc	.+30     	; 0x764 <SENS_CheckForObstacles+0x236>
     746:	c8 01       	movw	r24, r16
     748:	99 23       	and	r25, r25
     74a:	0c f4       	brge	.+2      	; 0x74e <SENS_CheckForObstacles+0x220>
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	95 95       	asr	r25
     750:	87 95       	ror	r24
     752:	09 2e       	mov	r0, r25
     754:	00 0c       	add	r0, r0
     756:	aa 0b       	sbc	r26, r26
     758:	bb 0b       	sbc	r27, r27
     75a:	84 17       	cp	r24, r20
     75c:	95 07       	cpc	r25, r21
     75e:	a6 07       	cpc	r26, r22
     760:	b7 07       	cpc	r27, r23
     762:	38 f0       	brcs	.+14     	; 0x772 <SENS_CheckForObstacles+0x244>
					  (FR_proximity->_last_distance_mm <= warn_distance/2)){
				POWTR_UnblockDrivingForward();
     764:	0e 94 ad 01 	call	0x35a	; 0x35a <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(ON);
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     770:	48 c1       	rjmp	.+656    	; 0xa02 <__stack+0x103>
			} else {
				POWTR_UnblockDrivingForward();
     772:	0e 94 ad 01 	call	0x35a	; 0x35a <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(OFF);
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     77e:	41 c1       	rjmp	.+642    	; 0xa02 <__stack+0x103>
			}
			break;
		case DRV_FWD_R:
			if((FL_proximity->_last_distance_mm <= critical_distance/2) ||
     780:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     784:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     788:	40 81       	ld	r20, Z
     78a:	51 81       	ldd	r21, Z+1	; 0x01
     78c:	62 81       	ldd	r22, Z+2	; 0x02
     78e:	73 81       	ldd	r23, Z+3	; 0x03
     790:	ce 01       	movw	r24, r28
     792:	dd 23       	and	r29, r29
     794:	0c f4       	brge	.+2      	; 0x798 <SENS_CheckForObstacles+0x26a>
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	95 95       	asr	r25
     79a:	87 95       	ror	r24
     79c:	09 2e       	mov	r0, r25
     79e:	00 0c       	add	r0, r0
     7a0:	aa 0b       	sbc	r26, r26
     7a2:	bb 0b       	sbc	r27, r27
     7a4:	84 17       	cp	r24, r20
     7a6:	95 07       	cpc	r25, r21
     7a8:	a6 07       	cpc	r26, r22
     7aa:	b7 07       	cpc	r27, r23
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <SENS_CheckForObstacles+0x2a2>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
     7ae:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     7b2:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     7b6:	c0 80       	ld	r12, Z
     7b8:	d1 80       	ldd	r13, Z+1	; 0x01
     7ba:	e2 80       	ldd	r14, Z+2	; 0x02
     7bc:	f3 80       	ldd	r15, Z+3	; 0x03
				POWTR_UnblockDrivingForward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_FWD_R:
			if((FL_proximity->_last_distance_mm <= critical_distance/2) ||
     7be:	ce 01       	movw	r24, r28
     7c0:	dd 0f       	add	r29, r29
     7c2:	aa 0b       	sbc	r26, r26
     7c4:	bb 0b       	sbc	r27, r27
     7c6:	8c 15       	cp	r24, r12
     7c8:	9d 05       	cpc	r25, r13
     7ca:	ae 05       	cpc	r26, r14
     7cc:	bf 05       	cpc	r27, r15
     7ce:	38 f0       	brcs	.+14     	; 0x7de <SENS_CheckForObstacles+0x2b0>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingForward();
     7d0:	0e 94 a1 01 	call	0x342	; 0x342 <POWTR_BlockDrivingForward>
				LnS_BuzzerSwitch(ON);
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     7dc:	12 c1       	rjmp	.+548    	; 0xa02 <__stack+0x103>
			} else if((FL_proximity->_last_distance_mm <= warn_distance/2) ||
     7de:	c8 01       	movw	r24, r16
     7e0:	11 23       	and	r17, r17
     7e2:	0c f4       	brge	.+2      	; 0x7e6 <SENS_CheckForObstacles+0x2b8>
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	95 95       	asr	r25
     7e8:	87 95       	ror	r24
     7ea:	09 2e       	mov	r0, r25
     7ec:	00 0c       	add	r0, r0
     7ee:	aa 0b       	sbc	r26, r26
     7f0:	bb 0b       	sbc	r27, r27
     7f2:	84 17       	cp	r24, r20
     7f4:	95 07       	cpc	r25, r21
     7f6:	a6 07       	cpc	r26, r22
     7f8:	b7 07       	cpc	r27, r23
     7fa:	48 f4       	brcc	.+18     	; 0x80e <SENS_CheckForObstacles+0x2e0>
     7fc:	01 2e       	mov	r0, r17
     7fe:	00 0c       	add	r0, r0
     800:	22 0b       	sbc	r18, r18
     802:	33 0b       	sbc	r19, r19
     804:	0c 15       	cp	r16, r12
     806:	1d 05       	cpc	r17, r13
     808:	2e 05       	cpc	r18, r14
     80a:	3f 05       	cpc	r19, r15
     80c:	38 f0       	brcs	.+14     	; 0x81c <SENS_CheckForObstacles+0x2ee>
					  (FR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingForward();
     80e:	0e 94 ad 01 	call	0x35a	; 0x35a <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(ON);
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     81a:	f3 c0       	rjmp	.+486    	; 0xa02 <__stack+0x103>
			} else {
				POWTR_UnblockDrivingForward();
     81c:	0e 94 ad 01 	call	0x35a	; 0x35a <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(OFF);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     828:	ec c0       	rjmp	.+472    	; 0xa02 <__stack+0x103>
			}
			break;
		case DRV_BWD:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     82a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     82e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     832:	40 81       	ld	r20, Z
     834:	51 81       	ldd	r21, Z+1	; 0x01
     836:	62 81       	ldd	r22, Z+2	; 0x02
     838:	73 81       	ldd	r23, Z+3	; 0x03
     83a:	ce 01       	movw	r24, r28
     83c:	dd 0f       	add	r29, r29
     83e:	aa 0b       	sbc	r26, r26
     840:	bb 0b       	sbc	r27, r27
     842:	84 17       	cp	r24, r20
     844:	95 07       	cpc	r25, r21
     846:	a6 07       	cpc	r26, r22
     848:	b7 07       	cpc	r27, r23
     84a:	68 f4       	brcc	.+26     	; 0x866 <SENS_CheckForObstacles+0x338>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
     84c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     850:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     854:	c0 80       	ld	r12, Z
     856:	d1 80       	ldd	r13, Z+1	; 0x01
     858:	e2 80       	ldd	r14, Z+2	; 0x02
     85a:	f3 80       	ldd	r15, Z+3	; 0x03
				POWTR_UnblockDrivingForward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_BWD:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     85c:	8c 15       	cp	r24, r12
     85e:	9d 05       	cpc	r25, r13
     860:	ae 05       	cpc	r26, r14
     862:	bf 05       	cpc	r27, r15
     864:	38 f0       	brcs	.+14     	; 0x874 <SENS_CheckForObstacles+0x346>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingBackward();
     866:	0e 94 a7 01 	call	0x34e	; 0x34e <POWTR_BlockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     872:	c7 c0       	rjmp	.+398    	; 0xa02 <__stack+0x103>
			} else if((RL_proximity->_last_distance_mm <= warn_distance) ||
     874:	01 2e       	mov	r0, r17
     876:	00 0c       	add	r0, r0
     878:	22 0b       	sbc	r18, r18
     87a:	33 0b       	sbc	r19, r19
     87c:	04 17       	cp	r16, r20
     87e:	15 07       	cpc	r17, r21
     880:	26 07       	cpc	r18, r22
     882:	37 07       	cpc	r19, r23
     884:	28 f4       	brcc	.+10     	; 0x890 <SENS_CheckForObstacles+0x362>
     886:	0c 15       	cp	r16, r12
     888:	1d 05       	cpc	r17, r13
     88a:	2e 05       	cpc	r18, r14
     88c:	3f 05       	cpc	r19, r15
     88e:	38 f0       	brcs	.+14     	; 0x89e <SENS_CheckForObstacles+0x370>
					  (RR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingBackward();
     890:	0e 94 b0 01 	call	0x360	; 0x360 <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     89c:	b2 c0       	rjmp	.+356    	; 0xa02 <__stack+0x103>
			} else {
				POWTR_UnblockDrivingBackward();
     89e:	0e 94 b0 01 	call	0x360	; 0x360 <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(OFF);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     8aa:	ab c0       	rjmp	.+342    	; 0xa02 <__stack+0x103>
			}
			break;
		case DRV_BWD_L:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     8ac:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     8b0:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     8b4:	c0 80       	ld	r12, Z
     8b6:	d1 80       	ldd	r13, Z+1	; 0x01
     8b8:	e2 80       	ldd	r14, Z+2	; 0x02
     8ba:	f3 80       	ldd	r15, Z+3	; 0x03
     8bc:	ce 01       	movw	r24, r28
     8be:	0d 2e       	mov	r0, r29
     8c0:	00 0c       	add	r0, r0
     8c2:	aa 0b       	sbc	r26, r26
     8c4:	bb 0b       	sbc	r27, r27
     8c6:	8c 15       	cp	r24, r12
     8c8:	9d 05       	cpc	r25, r13
     8ca:	ae 05       	cpc	r26, r14
     8cc:	bf 05       	cpc	r27, r15
     8ce:	b8 f4       	brcc	.+46     	; 0x8fe <SENS_CheckForObstacles+0x3d0>
			   (RR_proximity->_last_distance_mm <= critical_distance/2)){
     8d0:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     8d4:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     8d8:	40 81       	ld	r20, Z
     8da:	51 81       	ldd	r21, Z+1	; 0x01
     8dc:	62 81       	ldd	r22, Z+2	; 0x02
     8de:	73 81       	ldd	r23, Z+3	; 0x03
				POWTR_UnblockDrivingBackward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_BWD_L:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     8e0:	ce 01       	movw	r24, r28
     8e2:	dd 23       	and	r29, r29
     8e4:	0c f4       	brge	.+2      	; 0x8e8 <SENS_CheckForObstacles+0x3ba>
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	95 95       	asr	r25
     8ea:	87 95       	ror	r24
     8ec:	09 2e       	mov	r0, r25
     8ee:	00 0c       	add	r0, r0
     8f0:	aa 0b       	sbc	r26, r26
     8f2:	bb 0b       	sbc	r27, r27
     8f4:	84 17       	cp	r24, r20
     8f6:	95 07       	cpc	r25, r21
     8f8:	a6 07       	cpc	r26, r22
     8fa:	b7 07       	cpc	r27, r23
     8fc:	38 f0       	brcs	.+14     	; 0x90c <__stack+0xd>
			   (RR_proximity->_last_distance_mm <= critical_distance/2)){
				POWTR_BlockDrivingBackward();
     8fe:	0e 94 a7 01 	call	0x34e	; 0x34e <POWTR_BlockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     90a:	7b c0       	rjmp	.+246    	; 0xa02 <__stack+0x103>
			} else if((RL_proximity->_last_distance_mm <= warn_distance) ||
     90c:	c8 01       	movw	r24, r16
     90e:	01 2e       	mov	r0, r17
     910:	00 0c       	add	r0, r0
     912:	aa 0b       	sbc	r26, r26
     914:	bb 0b       	sbc	r27, r27
     916:	8c 15       	cp	r24, r12
     918:	9d 05       	cpc	r25, r13
     91a:	ae 05       	cpc	r26, r14
     91c:	bf 05       	cpc	r27, r15
     91e:	78 f4       	brcc	.+30     	; 0x93e <__stack+0x3f>
     920:	c8 01       	movw	r24, r16
     922:	99 23       	and	r25, r25
     924:	0c f4       	brge	.+2      	; 0x928 <__stack+0x29>
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	95 95       	asr	r25
     92a:	87 95       	ror	r24
     92c:	09 2e       	mov	r0, r25
     92e:	00 0c       	add	r0, r0
     930:	aa 0b       	sbc	r26, r26
     932:	bb 0b       	sbc	r27, r27
     934:	84 17       	cp	r24, r20
     936:	95 07       	cpc	r25, r21
     938:	a6 07       	cpc	r26, r22
     93a:	b7 07       	cpc	r27, r23
     93c:	38 f0       	brcs	.+14     	; 0x94c <__stack+0x4d>
					  (RR_proximity->_last_distance_mm <= warn_distance/2)){
				POWTR_UnblockDrivingBackward();
     93e:	0e 94 b0 01 	call	0x360	; 0x360 <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     94a:	5b c0       	rjmp	.+182    	; 0xa02 <__stack+0x103>
			} else {
				POWTR_UnblockDrivingBackward();
     94c:	0e 94 b0 01 	call	0x360	; 0x360 <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(OFF);
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     958:	54 c0       	rjmp	.+168    	; 0xa02 <__stack+0x103>
			}
			break;
		case DRV_BWD_R:
			if((RL_proximity->_last_distance_mm <= critical_distance/2) ||
     95a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     95e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     962:	40 81       	ld	r20, Z
     964:	51 81       	ldd	r21, Z+1	; 0x01
     966:	62 81       	ldd	r22, Z+2	; 0x02
     968:	73 81       	ldd	r23, Z+3	; 0x03
     96a:	ce 01       	movw	r24, r28
     96c:	dd 23       	and	r29, r29
     96e:	0c f4       	brge	.+2      	; 0x972 <__stack+0x73>
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	95 95       	asr	r25
     974:	87 95       	ror	r24
     976:	09 2e       	mov	r0, r25
     978:	00 0c       	add	r0, r0
     97a:	aa 0b       	sbc	r26, r26
     97c:	bb 0b       	sbc	r27, r27
     97e:	84 17       	cp	r24, r20
     980:	95 07       	cpc	r25, r21
     982:	a6 07       	cpc	r26, r22
     984:	b7 07       	cpc	r27, r23
     986:	88 f4       	brcc	.+34     	; 0x9aa <__stack+0xab>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
     988:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     98c:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     990:	c0 80       	ld	r12, Z
     992:	d1 80       	ldd	r13, Z+1	; 0x01
     994:	e2 80       	ldd	r14, Z+2	; 0x02
     996:	f3 80       	ldd	r15, Z+3	; 0x03
				POWTR_UnblockDrivingBackward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_BWD_R:
			if((RL_proximity->_last_distance_mm <= critical_distance/2) ||
     998:	ce 01       	movw	r24, r28
     99a:	dd 0f       	add	r29, r29
     99c:	aa 0b       	sbc	r26, r26
     99e:	bb 0b       	sbc	r27, r27
     9a0:	8c 15       	cp	r24, r12
     9a2:	9d 05       	cpc	r25, r13
     9a4:	ae 05       	cpc	r26, r14
     9a6:	bf 05       	cpc	r27, r15
     9a8:	38 f0       	brcs	.+14     	; 0x9b8 <__stack+0xb9>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingBackward();
     9aa:	0e 94 a7 01 	call	0x34e	; 0x34e <POWTR_BlockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     9b6:	25 c0       	rjmp	.+74     	; 0xa02 <__stack+0x103>
			} else if((RL_proximity->_last_distance_mm <= warn_distance/2) ||
     9b8:	c8 01       	movw	r24, r16
     9ba:	11 23       	and	r17, r17
     9bc:	0c f4       	brge	.+2      	; 0x9c0 <__stack+0xc1>
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	95 95       	asr	r25
     9c2:	87 95       	ror	r24
     9c4:	09 2e       	mov	r0, r25
     9c6:	00 0c       	add	r0, r0
     9c8:	aa 0b       	sbc	r26, r26
     9ca:	bb 0b       	sbc	r27, r27
     9cc:	84 17       	cp	r24, r20
     9ce:	95 07       	cpc	r25, r21
     9d0:	a6 07       	cpc	r26, r22
     9d2:	b7 07       	cpc	r27, r23
     9d4:	48 f4       	brcc	.+18     	; 0x9e8 <__stack+0xe9>
     9d6:	01 2e       	mov	r0, r17
     9d8:	00 0c       	add	r0, r0
     9da:	22 0b       	sbc	r18, r18
     9dc:	33 0b       	sbc	r19, r19
     9de:	0c 15       	cp	r16, r12
     9e0:	1d 05       	cpc	r17, r13
     9e2:	2e 05       	cpc	r18, r14
     9e4:	3f 05       	cpc	r19, r15
     9e6:	38 f0       	brcs	.+14     	; 0x9f6 <__stack+0xf7>
					  (RR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingBackward();
     9e8:	0e 94 b0 01 	call	0x360	; 0x360 <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <__stack+0x103>
			} else {
				POWTR_UnblockDrivingBackward();
     9f6:	0e 94 b0 01 	call	0x360	; 0x360 <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(OFF);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 11 01 	call	0x222	; 0x222 <LnS_BuzzerSwitch>
			}
			break;
		default:
			break;
	}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	ef 90       	pop	r14
     a0e:	df 90       	pop	r13
     a10:	cf 90       	pop	r12
     a12:	bf 90       	pop	r11
     a14:	af 90       	pop	r10
     a16:	9f 90       	pop	r9
     a18:	8f 90       	pop	r8
     a1a:	08 95       	ret

00000a1c <sensor_new>:
  TCCR1B &= ~((1 << CS12)|(1 << CS11)|(1 << CS10));
}

int calculate_distance_mm(uint16_t duration) {
  return (unsigned long)((double)duration * 0.686);
}
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	18 2f       	mov	r17, r24
     a40:	2b 01       	movw	r4, r22
     a42:	d4 2e       	mov	r13, r20
     a44:	39 01       	movw	r6, r18
     a46:	83 e1       	ldi	r24, 0x13	; 19
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <malloc>
     a4e:	fc 01       	movw	r30, r24
     a50:	d2 01       	movw	r26, r4
     a52:	4c 91       	ld	r20, X
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	9c 01       	movw	r18, r24
     a5a:	0d 2c       	mov	r0, r13
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <sensor_new+0x46>
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	0a 94       	dec	r0
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <sensor_new+0x42>
     a66:	24 2b       	or	r18, r20
     a68:	2c 93       	st	X, r18
     a6a:	d3 01       	movw	r26, r6
     a6c:	4c 91       	ld	r20, X
     a6e:	9c 01       	movw	r18, r24
     a70:	00 2e       	mov	r0, r16
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <sensor_new+0x5c>
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	0a 94       	dec	r0
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <sensor_new+0x58>
     a7c:	24 23       	and	r18, r20
     a7e:	2c 93       	st	X, r18
     a80:	d7 01       	movw	r26, r14
     a82:	2c 91       	ld	r18, X
     a84:	0c 2c       	mov	r0, r12
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <sensor_new+0x70>
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	0a 94       	dec	r0
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <sensor_new+0x6c>
     a90:	80 95       	com	r24
     a92:	82 23       	and	r24, r18
     a94:	8c 93       	st	X, r24
     a96:	a0 e8       	ldi	r26, 0x80	; 128
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	8c 91       	ld	r24, X
     a9c:	1c 92       	st	X, r1
     a9e:	16 83       	std	Z+6, r17	; 0x06
     aa0:	50 86       	std	Z+8, r5	; 0x08
     aa2:	47 82       	std	Z+7, r4	; 0x07
     aa4:	d1 86       	std	Z+9, r13	; 0x09
     aa6:	73 86       	std	Z+11, r7	; 0x0b
     aa8:	62 86       	std	Z+10, r6	; 0x0a
     aaa:	04 87       	std	Z+12, r16	; 0x0c
     aac:	f6 86       	std	Z+14, r15	; 0x0e
     aae:	e5 86       	std	Z+13, r14	; 0x0d
     ab0:	c7 86       	std	Z+15, r12	; 0x0f
     ab2:	b1 8a       	std	Z+17, r11	; 0x11
     ab4:	a0 8a       	std	Z+16, r10	; 0x10
     ab6:	82 8a       	std	Z+18, r8	; 0x12
     ab8:	15 82       	std	Z+5, r1	; 0x05
     aba:	14 82       	std	Z+4, r1	; 0x04
     abc:	10 82       	st	Z, r1
     abe:	11 82       	std	Z+1, r1	; 0x01
     ac0:	12 82       	std	Z+2, r1	; 0x02
     ac2:	13 82       	std	Z+3, r1	; 0x03
     ac4:	cf 01       	movw	r24, r30
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	bf 90       	pop	r11
     ad8:	af 90       	pop	r10
     ada:	8f 90       	pop	r8
     adc:	7f 90       	pop	r7
     ade:	6f 90       	pop	r6
     ae0:	5f 90       	pop	r5
     ae2:	4f 90       	pop	r4
     ae4:	08 95       	ret

00000ae6 <set_trig_high>:
     ae6:	dc 01       	movw	r26, r24
     ae8:	1a 96       	adiw	r26, 0x0a	; 10
     aea:	ed 91       	ld	r30, X+
     aec:	fc 91       	ld	r31, X
     aee:	1b 97       	sbiw	r26, 0x0b	; 11
     af0:	40 81       	ld	r20, Z
     af2:	21 e0       	ldi	r18, 0x01	; 1
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	c9 01       	movw	r24, r18
     af8:	1c 96       	adiw	r26, 0x0c	; 12
     afa:	0c 90       	ld	r0, X
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <set_trig_high+0x1c>
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	0a 94       	dec	r0
     b04:	e2 f7       	brpl	.-8      	; 0xafe <set_trig_high+0x18>
     b06:	84 2b       	or	r24, r20
     b08:	80 83       	st	Z, r24
     b0a:	08 95       	ret

00000b0c <set_trig_low>:
     b0c:	dc 01       	movw	r26, r24
     b0e:	1a 96       	adiw	r26, 0x0a	; 10
     b10:	ed 91       	ld	r30, X+
     b12:	fc 91       	ld	r31, X
     b14:	1b 97       	sbiw	r26, 0x0b	; 11
     b16:	40 81       	ld	r20, Z
     b18:	21 e0       	ldi	r18, 0x01	; 1
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	b9 01       	movw	r22, r18
     b1e:	1c 96       	adiw	r26, 0x0c	; 12
     b20:	0c 90       	ld	r0, X
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <set_trig_low+0x1c>
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	0a 94       	dec	r0
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <set_trig_low+0x18>
     b2c:	cb 01       	movw	r24, r22
     b2e:	80 95       	com	r24
     b30:	84 23       	and	r24, r20
     b32:	80 83       	st	Z, r24
     b34:	08 95       	ret

00000b36 <measure_duration>:
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ec 01       	movw	r28, r24
     b3c:	0e 94 86 05 	call	0xb0c	; 0xb0c <set_trig_low>
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	8a 95       	dec	r24
     b44:	f1 f7       	brne	.-4      	; 0xb42 <measure_duration+0xc>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <measure_duration+0x12>
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 73 05 	call	0xae6	; 0xae6 <set_trig_high>
     b4e:	85 e3       	ldi	r24, 0x35	; 53
     b50:	8a 95       	dec	r24
     b52:	f1 f7       	brne	.-4      	; 0xb50 <measure_duration+0x1a>
     b54:	00 00       	nop
     b56:	ce 01       	movw	r24, r28
     b58:	0e 94 86 05 	call	0xb0c	; 0xb0c <set_trig_low>
     b5c:	e8 89       	ldd	r30, Y+16	; 0x10
     b5e:	f9 89       	ldd	r31, Y+17	; 0x11
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	0a 88       	ldd	r0, Y+18	; 0x12
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <measure_duration+0x36>
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	0a 94       	dec	r0
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <measure_duration+0x32>
     b70:	80 81       	ld	r24, Z
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	82 23       	and	r24, r18
     b76:	93 23       	and	r25, r19
     b78:	89 2b       	or	r24, r25
     b7a:	d1 f3       	breq	.-12     	; 0xb70 <measure_duration+0x3a>
     b7c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b80:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b84:	e1 e8       	ldi	r30, 0x81	; 129
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	83 60       	ori	r24, 0x03	; 3
     b8c:	80 83       	st	Z, r24
     b8e:	e8 89       	ldd	r30, Y+16	; 0x10
     b90:	f9 89       	ldd	r31, Y+17	; 0x11
     b92:	21 e0       	ldi	r18, 0x01	; 1
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	0a 88       	ldd	r0, Y+18	; 0x12
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <measure_duration+0x68>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	0a 94       	dec	r0
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <measure_duration+0x64>
     ba2:	80 81       	ld	r24, Z
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	82 23       	and	r24, r18
     ba8:	93 23       	and	r25, r19
     baa:	89 2b       	or	r24, r25
     bac:	d1 f7       	brne	.-12     	; 0xba2 <measure_duration+0x6c>
     bae:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bb2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bb6:	9d 83       	std	Y+5, r25	; 0x05
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	e1 e8       	ldi	r30, 0x81	; 129
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	88 7f       	andi	r24, 0xF8	; 248
     bc2:	80 83       	st	Z, r24
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <get_dist_mm>:

int get_dist_mm(sr_04 *sensor) {
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	ec 01       	movw	r28, r24
  measure_duration(sensor);
     bd4:	0e 94 9b 05 	call	0xb36	; 0xb36 <measure_duration>
  // stop timer
  TCCR1B &= ~((1 << CS12)|(1 << CS11)|(1 << CS10));
}

int calculate_distance_mm(uint16_t duration) {
  return (unsigned long)((double)duration * 0.686);
     bd8:	6c 81       	ldd	r22, Y+4	; 0x04
     bda:	7d 81       	ldd	r23, Y+5	; 0x05
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 92 06 	call	0xd24	; 0xd24 <__floatunsisf>
     be4:	22 eb       	ldi	r18, 0xB2	; 178
     be6:	3d e9       	ldi	r19, 0x9D	; 157
     be8:	4f e2       	ldi	r20, 0x2F	; 47
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__mulsf3>
     bf0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__fixunssfsi>
}

int get_dist_mm(sr_04 *sensor) {
  measure_duration(sensor);
  sensor->_last_distance_mm = calculate_distance_mm(sensor->_last_duration);
     bf4:	8b 01       	movw	r16, r22
     bf6:	07 2e       	mov	r0, r23
     bf8:	00 0c       	add	r0, r0
     bfa:	22 0b       	sbc	r18, r18
     bfc:	33 0b       	sbc	r19, r19
     bfe:	08 83       	st	Y, r16
     c00:	19 83       	std	Y+1, r17	; 0x01
     c02:	2a 83       	std	Y+2, r18	; 0x02
     c04:	3b 83       	std	Y+3, r19	; 0x03

  return sensor->_last_distance_mm;
}
     c06:	cb 01       	movw	r24, r22
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <UART_init>:
#include <avr/io.h>
#include <stdbool.h>

#define F_CPU 16000000UL

void UART_init(unsigned int baud, bool RX, bool TX){
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	d6 2f       	mov	r29, r22
     c18:	c4 2f       	mov	r28, r20
	unsigned int baudrate;
	baudrate = (((F_CPU / (baud * 16UL))) - 1);
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	aa 1f       	adc	r26, r26
     c24:	bb 1f       	adc	r27, r27
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	aa 1f       	adc	r26, r26
     c2c:	bb 1f       	adc	r27, r27
     c2e:	9c 01       	movw	r18, r24
     c30:	ad 01       	movw	r20, r26
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	44 1f       	adc	r20, r20
     c40:	55 1f       	adc	r21, r21
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	74 e2       	ldi	r23, 0x24	; 36
     c46:	84 ef       	ldi	r24, 0xF4	; 244
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__udivmodsi4>
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudrate >> 8);
     c52:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)baudrate;
     c56:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// parity bits
	//UCSR0C |= 1 << UPM01; // 1 parity bit
	
	// data bits
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     c5a:	e2 ec       	ldi	r30, 0xC2	; 194
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	86 60       	ori	r24, 0x06	; 6
     c62:	80 83       	st	Z, r24
	
	// 1 stopbit is default

	if(RX) {
     c64:	dd 23       	and	r29, r29
     c66:	29 f0       	breq	.+10     	; 0xc72 <UART_init+0x60>
		UCSR0B |= 1<<RXEN0;
     c68:	e1 ec       	ldi	r30, 0xC1	; 193
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	80 61       	ori	r24, 0x10	; 16
     c70:	80 83       	st	Z, r24
	}
	
	if(TX) {
     c72:	cc 23       	and	r28, r28
     c74:	29 f0       	breq	.+10     	; 0xc80 <UART_init+0x6e>
		UCSR0B |= 1<<TXEN0;
     c76:	e1 ec       	ldi	r30, 0xC1	; 193
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	88 60       	ori	r24, 0x08	; 8
     c7e:	80 83       	st	Z, r24
	}
}
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <UART_send>:

void UART_send( unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
     c86:	e0 ec       	ldi	r30, 0xC0	; 192
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	90 81       	ld	r25, Z
     c8c:	95 ff       	sbrs	r25, 5
     c8e:	fd cf       	rjmp	.-6      	; 0xc8a <UART_send+0x4>
	UDR0 = data;
     c90:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c94:	08 95       	ret

00000c96 <UART_putstring>:
}

void UART_putstring(char* StringPtr){
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
     c9c:	88 81       	ld	r24, Y
     c9e:	88 23       	and	r24, r24
     ca0:	31 f0       	breq	.+12     	; 0xcae <UART_putstring+0x18>
     ca2:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_send(*StringPtr);
     ca4:	0e 94 43 06 	call	0xc86	; 0xc86 <UART_send>
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void UART_putstring(char* StringPtr){
	while(*StringPtr != 0x00)
     ca8:	89 91       	ld	r24, Y+
     caa:	81 11       	cpse	r24, r1
     cac:	fb cf       	rjmp	.-10     	; 0xca4 <UART_putstring+0xe>
	{
		UART_send(*StringPtr);
		StringPtr++;
	}
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <UART_available>:

bool UART_available(){
	return (UCSR0A & (1<<RXC0));
     cb4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}
     cb8:	88 1f       	adc	r24, r24
     cba:	88 27       	eor	r24, r24
     cbc:	88 1f       	adc	r24, r24
     cbe:	08 95       	ret

00000cc0 <UART_read>:

unsigned char UART_read(){
	return UDR0;
     cc0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     cc4:	08 95       	ret

00000cc6 <__fixunssfsi>:
     cc6:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_splitA>
     cca:	88 f0       	brcs	.+34     	; 0xcee <__fixunssfsi+0x28>
     ccc:	9f 57       	subi	r25, 0x7F	; 127
     cce:	98 f0       	brcs	.+38     	; 0xcf6 <__fixunssfsi+0x30>
     cd0:	b9 2f       	mov	r27, r25
     cd2:	99 27       	eor	r25, r25
     cd4:	b7 51       	subi	r27, 0x17	; 23
     cd6:	b0 f0       	brcs	.+44     	; 0xd04 <__fixunssfsi+0x3e>
     cd8:	e1 f0       	breq	.+56     	; 0xd12 <__fixunssfsi+0x4c>
     cda:	66 0f       	add	r22, r22
     cdc:	77 1f       	adc	r23, r23
     cde:	88 1f       	adc	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	1a f0       	brmi	.+6      	; 0xcea <__fixunssfsi+0x24>
     ce4:	ba 95       	dec	r27
     ce6:	c9 f7       	brne	.-14     	; 0xcda <__fixunssfsi+0x14>
     ce8:	14 c0       	rjmp	.+40     	; 0xd12 <__fixunssfsi+0x4c>
     cea:	b1 30       	cpi	r27, 0x01	; 1
     cec:	91 f0       	breq	.+36     	; 0xd12 <__fixunssfsi+0x4c>
     cee:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_zero>
     cf2:	b1 e0       	ldi	r27, 0x01	; 1
     cf4:	08 95       	ret
     cf6:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_zero>
     cfa:	67 2f       	mov	r22, r23
     cfc:	78 2f       	mov	r23, r24
     cfe:	88 27       	eor	r24, r24
     d00:	b8 5f       	subi	r27, 0xF8	; 248
     d02:	39 f0       	breq	.+14     	; 0xd12 <__fixunssfsi+0x4c>
     d04:	b9 3f       	cpi	r27, 0xF9	; 249
     d06:	cc f3       	brlt	.-14     	; 0xcfa <__fixunssfsi+0x34>
     d08:	86 95       	lsr	r24
     d0a:	77 95       	ror	r23
     d0c:	67 95       	ror	r22
     d0e:	b3 95       	inc	r27
     d10:	d9 f7       	brne	.-10     	; 0xd08 <__fixunssfsi+0x42>
     d12:	3e f4       	brtc	.+14     	; 0xd22 <__fixunssfsi+0x5c>
     d14:	90 95       	com	r25
     d16:	80 95       	com	r24
     d18:	70 95       	com	r23
     d1a:	61 95       	neg	r22
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	8f 4f       	sbci	r24, 0xFF	; 255
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	08 95       	ret

00000d24 <__floatunsisf>:
     d24:	e8 94       	clt
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <__floatsisf+0x12>

00000d28 <__floatsisf>:
     d28:	97 fb       	bst	r25, 7
     d2a:	3e f4       	brtc	.+14     	; 0xd3a <__floatsisf+0x12>
     d2c:	90 95       	com	r25
     d2e:	80 95       	com	r24
     d30:	70 95       	com	r23
     d32:	61 95       	neg	r22
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	8f 4f       	sbci	r24, 0xFF	; 255
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	99 23       	and	r25, r25
     d3c:	a9 f0       	breq	.+42     	; 0xd68 <__floatsisf+0x40>
     d3e:	f9 2f       	mov	r31, r25
     d40:	96 e9       	ldi	r25, 0x96	; 150
     d42:	bb 27       	eor	r27, r27
     d44:	93 95       	inc	r25
     d46:	f6 95       	lsr	r31
     d48:	87 95       	ror	r24
     d4a:	77 95       	ror	r23
     d4c:	67 95       	ror	r22
     d4e:	b7 95       	ror	r27
     d50:	f1 11       	cpse	r31, r1
     d52:	f8 cf       	rjmp	.-16     	; 0xd44 <__floatsisf+0x1c>
     d54:	fa f4       	brpl	.+62     	; 0xd94 <__floatsisf+0x6c>
     d56:	bb 0f       	add	r27, r27
     d58:	11 f4       	brne	.+4      	; 0xd5e <__floatsisf+0x36>
     d5a:	60 ff       	sbrs	r22, 0
     d5c:	1b c0       	rjmp	.+54     	; 0xd94 <__floatsisf+0x6c>
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	16 c0       	rjmp	.+44     	; 0xd94 <__floatsisf+0x6c>
     d68:	88 23       	and	r24, r24
     d6a:	11 f0       	breq	.+4      	; 0xd70 <__floatsisf+0x48>
     d6c:	96 e9       	ldi	r25, 0x96	; 150
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <__floatsisf+0x6a>
     d70:	77 23       	and	r23, r23
     d72:	21 f0       	breq	.+8      	; 0xd7c <__floatsisf+0x54>
     d74:	9e e8       	ldi	r25, 0x8E	; 142
     d76:	87 2f       	mov	r24, r23
     d78:	76 2f       	mov	r23, r22
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <__floatsisf+0x5e>
     d7c:	66 23       	and	r22, r22
     d7e:	71 f0       	breq	.+28     	; 0xd9c <__floatsisf+0x74>
     d80:	96 e8       	ldi	r25, 0x86	; 134
     d82:	86 2f       	mov	r24, r22
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	2a f0       	brmi	.+10     	; 0xd94 <__floatsisf+0x6c>
     d8a:	9a 95       	dec	r25
     d8c:	66 0f       	add	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	88 1f       	adc	r24, r24
     d92:	da f7       	brpl	.-10     	; 0xd8a <__floatsisf+0x62>
     d94:	88 0f       	add	r24, r24
     d96:	96 95       	lsr	r25
     d98:	87 95       	ror	r24
     d9a:	97 f9       	bld	r25, 7
     d9c:	08 95       	ret

00000d9e <__fp_split3>:
     d9e:	57 fd       	sbrc	r21, 7
     da0:	90 58       	subi	r25, 0x80	; 128
     da2:	44 0f       	add	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	59 f0       	breq	.+22     	; 0xdbe <__fp_splitA+0x10>
     da8:	5f 3f       	cpi	r21, 0xFF	; 255
     daa:	71 f0       	breq	.+28     	; 0xdc8 <__fp_splitA+0x1a>
     dac:	47 95       	ror	r20

00000dae <__fp_splitA>:
     dae:	88 0f       	add	r24, r24
     db0:	97 fb       	bst	r25, 7
     db2:	99 1f       	adc	r25, r25
     db4:	61 f0       	breq	.+24     	; 0xdce <__fp_splitA+0x20>
     db6:	9f 3f       	cpi	r25, 0xFF	; 255
     db8:	79 f0       	breq	.+30     	; 0xdd8 <__fp_splitA+0x2a>
     dba:	87 95       	ror	r24
     dbc:	08 95       	ret
     dbe:	12 16       	cp	r1, r18
     dc0:	13 06       	cpc	r1, r19
     dc2:	14 06       	cpc	r1, r20
     dc4:	55 1f       	adc	r21, r21
     dc6:	f2 cf       	rjmp	.-28     	; 0xdac <__fp_split3+0xe>
     dc8:	46 95       	lsr	r20
     dca:	f1 df       	rcall	.-30     	; 0xdae <__fp_splitA>
     dcc:	08 c0       	rjmp	.+16     	; 0xdde <__fp_splitA+0x30>
     dce:	16 16       	cp	r1, r22
     dd0:	17 06       	cpc	r1, r23
     dd2:	18 06       	cpc	r1, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	f1 cf       	rjmp	.-30     	; 0xdba <__fp_splitA+0xc>
     dd8:	86 95       	lsr	r24
     dda:	71 05       	cpc	r23, r1
     ddc:	61 05       	cpc	r22, r1
     dde:	08 94       	sec
     de0:	08 95       	ret

00000de2 <__fp_zero>:
     de2:	e8 94       	clt

00000de4 <__fp_szero>:
     de4:	bb 27       	eor	r27, r27
     de6:	66 27       	eor	r22, r22
     de8:	77 27       	eor	r23, r23
     dea:	cb 01       	movw	r24, r22
     dec:	97 f9       	bld	r25, 7
     dee:	08 95       	ret

00000df0 <__mulsf3>:
     df0:	0e 94 0b 07 	call	0xe16	; 0xe16 <__mulsf3x>
     df4:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__fp_round>
     df8:	0e 94 6e 07 	call	0xedc	; 0xedc <__fp_pscA>
     dfc:	38 f0       	brcs	.+14     	; 0xe0c <__mulsf3+0x1c>
     dfe:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_pscB>
     e02:	20 f0       	brcs	.+8      	; 0xe0c <__mulsf3+0x1c>
     e04:	95 23       	and	r25, r21
     e06:	11 f0       	breq	.+4      	; 0xe0c <__mulsf3+0x1c>
     e08:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_inf>
     e0c:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_nan>
     e10:	11 24       	eor	r1, r1
     e12:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>

00000e16 <__mulsf3x>:
     e16:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_split3>
     e1a:	70 f3       	brcs	.-36     	; 0xdf8 <__mulsf3+0x8>

00000e1c <__mulsf3_pse>:
     e1c:	95 9f       	mul	r25, r21
     e1e:	c1 f3       	breq	.-16     	; 0xe10 <__mulsf3+0x20>
     e20:	95 0f       	add	r25, r21
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	55 1f       	adc	r21, r21
     e26:	62 9f       	mul	r22, r18
     e28:	f0 01       	movw	r30, r0
     e2a:	72 9f       	mul	r23, r18
     e2c:	bb 27       	eor	r27, r27
     e2e:	f0 0d       	add	r31, r0
     e30:	b1 1d       	adc	r27, r1
     e32:	63 9f       	mul	r22, r19
     e34:	aa 27       	eor	r26, r26
     e36:	f0 0d       	add	r31, r0
     e38:	b1 1d       	adc	r27, r1
     e3a:	aa 1f       	adc	r26, r26
     e3c:	64 9f       	mul	r22, r20
     e3e:	66 27       	eor	r22, r22
     e40:	b0 0d       	add	r27, r0
     e42:	a1 1d       	adc	r26, r1
     e44:	66 1f       	adc	r22, r22
     e46:	82 9f       	mul	r24, r18
     e48:	22 27       	eor	r18, r18
     e4a:	b0 0d       	add	r27, r0
     e4c:	a1 1d       	adc	r26, r1
     e4e:	62 1f       	adc	r22, r18
     e50:	73 9f       	mul	r23, r19
     e52:	b0 0d       	add	r27, r0
     e54:	a1 1d       	adc	r26, r1
     e56:	62 1f       	adc	r22, r18
     e58:	83 9f       	mul	r24, r19
     e5a:	a0 0d       	add	r26, r0
     e5c:	61 1d       	adc	r22, r1
     e5e:	22 1f       	adc	r18, r18
     e60:	74 9f       	mul	r23, r20
     e62:	33 27       	eor	r19, r19
     e64:	a0 0d       	add	r26, r0
     e66:	61 1d       	adc	r22, r1
     e68:	23 1f       	adc	r18, r19
     e6a:	84 9f       	mul	r24, r20
     e6c:	60 0d       	add	r22, r0
     e6e:	21 1d       	adc	r18, r1
     e70:	82 2f       	mov	r24, r18
     e72:	76 2f       	mov	r23, r22
     e74:	6a 2f       	mov	r22, r26
     e76:	11 24       	eor	r1, r1
     e78:	9f 57       	subi	r25, 0x7F	; 127
     e7a:	50 40       	sbci	r21, 0x00	; 0
     e7c:	9a f0       	brmi	.+38     	; 0xea4 <__mulsf3_pse+0x88>
     e7e:	f1 f0       	breq	.+60     	; 0xebc <__mulsf3_pse+0xa0>
     e80:	88 23       	and	r24, r24
     e82:	4a f0       	brmi	.+18     	; 0xe96 <__mulsf3_pse+0x7a>
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	bb 1f       	adc	r27, r27
     e8a:	66 1f       	adc	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	50 40       	sbci	r21, 0x00	; 0
     e94:	a9 f7       	brne	.-22     	; 0xe80 <__mulsf3_pse+0x64>
     e96:	9e 3f       	cpi	r25, 0xFE	; 254
     e98:	51 05       	cpc	r21, r1
     e9a:	80 f0       	brcs	.+32     	; 0xebc <__mulsf3_pse+0xa0>
     e9c:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_inf>
     ea0:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_szero>
     ea4:	5f 3f       	cpi	r21, 0xFF	; 255
     ea6:	e4 f3       	brlt	.-8      	; 0xea0 <__mulsf3_pse+0x84>
     ea8:	98 3e       	cpi	r25, 0xE8	; 232
     eaa:	d4 f3       	brlt	.-12     	; 0xea0 <__mulsf3_pse+0x84>
     eac:	86 95       	lsr	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f7 95       	ror	r31
     eb6:	e7 95       	ror	r30
     eb8:	9f 5f       	subi	r25, 0xFF	; 255
     eba:	c1 f7       	brne	.-16     	; 0xeac <__mulsf3_pse+0x90>
     ebc:	fe 2b       	or	r31, r30
     ebe:	88 0f       	add	r24, r24
     ec0:	91 1d       	adc	r25, r1
     ec2:	96 95       	lsr	r25
     ec4:	87 95       	ror	r24
     ec6:	97 f9       	bld	r25, 7
     ec8:	08 95       	ret

00000eca <__fp_inf>:
     eca:	97 f9       	bld	r25, 7
     ecc:	9f 67       	ori	r25, 0x7F	; 127
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	08 95       	ret

00000ed6 <__fp_nan>:
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	80 ec       	ldi	r24, 0xC0	; 192
     eda:	08 95       	ret

00000edc <__fp_pscA>:
     edc:	00 24       	eor	r0, r0
     ede:	0a 94       	dec	r0
     ee0:	16 16       	cp	r1, r22
     ee2:	17 06       	cpc	r1, r23
     ee4:	18 06       	cpc	r1, r24
     ee6:	09 06       	cpc	r0, r25
     ee8:	08 95       	ret

00000eea <__fp_pscB>:
     eea:	00 24       	eor	r0, r0
     eec:	0a 94       	dec	r0
     eee:	12 16       	cp	r1, r18
     ef0:	13 06       	cpc	r1, r19
     ef2:	14 06       	cpc	r1, r20
     ef4:	05 06       	cpc	r0, r21
     ef6:	08 95       	ret

00000ef8 <__fp_round>:
     ef8:	09 2e       	mov	r0, r25
     efa:	03 94       	inc	r0
     efc:	00 0c       	add	r0, r0
     efe:	11 f4       	brne	.+4      	; 0xf04 <__fp_round+0xc>
     f00:	88 23       	and	r24, r24
     f02:	52 f0       	brmi	.+20     	; 0xf18 <__fp_round+0x20>
     f04:	bb 0f       	add	r27, r27
     f06:	40 f4       	brcc	.+16     	; 0xf18 <__fp_round+0x20>
     f08:	bf 2b       	or	r27, r31
     f0a:	11 f4       	brne	.+4      	; 0xf10 <__fp_round+0x18>
     f0c:	60 ff       	sbrs	r22, 0
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <__fp_round+0x20>
     f10:	6f 5f       	subi	r22, 0xFF	; 255
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f 4f       	sbci	r24, 0xFF	; 255
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	08 95       	ret

00000f1a <__udivmodsi4>:
     f1a:	a1 e2       	ldi	r26, 0x21	; 33
     f1c:	1a 2e       	mov	r1, r26
     f1e:	aa 1b       	sub	r26, r26
     f20:	bb 1b       	sub	r27, r27
     f22:	fd 01       	movw	r30, r26
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <__udivmodsi4_ep>

00000f26 <__udivmodsi4_loop>:
     f26:	aa 1f       	adc	r26, r26
     f28:	bb 1f       	adc	r27, r27
     f2a:	ee 1f       	adc	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	a2 17       	cp	r26, r18
     f30:	b3 07       	cpc	r27, r19
     f32:	e4 07       	cpc	r30, r20
     f34:	f5 07       	cpc	r31, r21
     f36:	20 f0       	brcs	.+8      	; 0xf40 <__udivmodsi4_ep>
     f38:	a2 1b       	sub	r26, r18
     f3a:	b3 0b       	sbc	r27, r19
     f3c:	e4 0b       	sbc	r30, r20
     f3e:	f5 0b       	sbc	r31, r21

00000f40 <__udivmodsi4_ep>:
     f40:	66 1f       	adc	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	1a 94       	dec	r1
     f4a:	69 f7       	brne	.-38     	; 0xf26 <__udivmodsi4_loop>
     f4c:	60 95       	com	r22
     f4e:	70 95       	com	r23
     f50:	80 95       	com	r24
     f52:	90 95       	com	r25
     f54:	9b 01       	movw	r18, r22
     f56:	ac 01       	movw	r20, r24
     f58:	bd 01       	movw	r22, r26
     f5a:	cf 01       	movw	r24, r30
     f5c:	08 95       	ret

00000f5e <__tablejump2__>:
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	05 90       	lpm	r0, Z+
     f64:	f4 91       	lpm	r31, Z
     f66:	e0 2d       	mov	r30, r0
     f68:	09 94       	ijmp

00000f6a <malloc>:
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	10 f4       	brcc	.+4      	; 0xf7c <malloc+0x12>
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__flp>
     f80:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__flp+0x1>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	19 f1       	breq	.+70     	; 0xfd6 <malloc+0x6c>
     f90:	40 81       	ld	r20, Z
     f92:	51 81       	ldd	r21, Z+1	; 0x01
     f94:	02 81       	ldd	r16, Z+2	; 0x02
     f96:	13 81       	ldd	r17, Z+3	; 0x03
     f98:	48 17       	cp	r20, r24
     f9a:	59 07       	cpc	r21, r25
     f9c:	c8 f0       	brcs	.+50     	; 0xfd0 <malloc+0x66>
     f9e:	84 17       	cp	r24, r20
     fa0:	95 07       	cpc	r25, r21
     fa2:	69 f4       	brne	.+26     	; 0xfbe <malloc+0x54>
     fa4:	10 97       	sbiw	r26, 0x00	; 0
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <malloc+0x4a>
     fa8:	12 96       	adiw	r26, 0x02	; 2
     faa:	0c 93       	st	X, r16
     fac:	12 97       	sbiw	r26, 0x02	; 2
     fae:	13 96       	adiw	r26, 0x03	; 3
     fb0:	1c 93       	st	X, r17
     fb2:	27 c0       	rjmp	.+78     	; 0x1002 <malloc+0x98>
     fb4:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <__flp>
     fb8:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <__flp+0x1>
     fbc:	22 c0       	rjmp	.+68     	; 0x1002 <malloc+0x98>
     fbe:	21 15       	cp	r18, r1
     fc0:	31 05       	cpc	r19, r1
     fc2:	19 f0       	breq	.+6      	; 0xfca <malloc+0x60>
     fc4:	42 17       	cp	r20, r18
     fc6:	53 07       	cpc	r21, r19
     fc8:	18 f4       	brcc	.+6      	; 0xfd0 <malloc+0x66>
     fca:	9a 01       	movw	r18, r20
     fcc:	bd 01       	movw	r22, r26
     fce:	ef 01       	movw	r28, r30
     fd0:	df 01       	movw	r26, r30
     fd2:	f8 01       	movw	r30, r16
     fd4:	db cf       	rjmp	.-74     	; 0xf8c <malloc+0x22>
     fd6:	21 15       	cp	r18, r1
     fd8:	31 05       	cpc	r19, r1
     fda:	f9 f0       	breq	.+62     	; 0x101a <malloc+0xb0>
     fdc:	28 1b       	sub	r18, r24
     fde:	39 0b       	sbc	r19, r25
     fe0:	24 30       	cpi	r18, 0x04	; 4
     fe2:	31 05       	cpc	r19, r1
     fe4:	80 f4       	brcc	.+32     	; 0x1006 <malloc+0x9c>
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	61 15       	cp	r22, r1
     fec:	71 05       	cpc	r23, r1
     fee:	21 f0       	breq	.+8      	; 0xff8 <malloc+0x8e>
     ff0:	fb 01       	movw	r30, r22
     ff2:	93 83       	std	Z+3, r25	; 0x03
     ff4:	82 83       	std	Z+2, r24	; 0x02
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <malloc+0x96>
     ff8:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__flp+0x1>
     ffc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__flp>
    1000:	fe 01       	movw	r30, r28
    1002:	32 96       	adiw	r30, 0x02	; 2
    1004:	44 c0       	rjmp	.+136    	; 0x108e <malloc+0x124>
    1006:	fe 01       	movw	r30, r28
    1008:	e2 0f       	add	r30, r18
    100a:	f3 1f       	adc	r31, r19
    100c:	81 93       	st	Z+, r24
    100e:	91 93       	st	Z+, r25
    1010:	22 50       	subi	r18, 0x02	; 2
    1012:	31 09       	sbc	r19, r1
    1014:	39 83       	std	Y+1, r19	; 0x01
    1016:	28 83       	st	Y, r18
    1018:	3a c0       	rjmp	.+116    	; 0x108e <malloc+0x124>
    101a:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    101e:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    1022:	23 2b       	or	r18, r19
    1024:	41 f4       	brne	.+16     	; 0x1036 <malloc+0xcc>
    1026:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    102a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    102e:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__brkval+0x1>
    1032:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__brkval>
    1036:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    103a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    103e:	21 15       	cp	r18, r1
    1040:	31 05       	cpc	r19, r1
    1042:	41 f4       	brne	.+16     	; 0x1054 <malloc+0xea>
    1044:	2d b7       	in	r18, 0x3d	; 61
    1046:	3e b7       	in	r19, 0x3e	; 62
    1048:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    104c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1050:	24 1b       	sub	r18, r20
    1052:	35 0b       	sbc	r19, r21
    1054:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__brkval>
    1058:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__brkval+0x1>
    105c:	e2 17       	cp	r30, r18
    105e:	f3 07       	cpc	r31, r19
    1060:	a0 f4       	brcc	.+40     	; 0x108a <malloc+0x120>
    1062:	2e 1b       	sub	r18, r30
    1064:	3f 0b       	sbc	r19, r31
    1066:	28 17       	cp	r18, r24
    1068:	39 07       	cpc	r19, r25
    106a:	78 f0       	brcs	.+30     	; 0x108a <malloc+0x120>
    106c:	ac 01       	movw	r20, r24
    106e:	4e 5f       	subi	r20, 0xFE	; 254
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
    1072:	24 17       	cp	r18, r20
    1074:	35 07       	cpc	r19, r21
    1076:	48 f0       	brcs	.+18     	; 0x108a <malloc+0x120>
    1078:	4e 0f       	add	r20, r30
    107a:	5f 1f       	adc	r21, r31
    107c:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <__brkval+0x1>
    1080:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <__brkval>
    1084:	81 93       	st	Z+, r24
    1086:	91 93       	st	Z+, r25
    1088:	02 c0       	rjmp	.+4      	; 0x108e <malloc+0x124>
    108a:	e0 e0       	ldi	r30, 0x00	; 0
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	cf 01       	movw	r24, r30
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <free>:
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <free+0xa>
    10a2:	81 c0       	rjmp	.+258    	; 0x11a6 <free+0x10c>
    10a4:	fc 01       	movw	r30, r24
    10a6:	32 97       	sbiw	r30, 0x02	; 2
    10a8:	13 82       	std	Z+3, r1	; 0x03
    10aa:	12 82       	std	Z+2, r1	; 0x02
    10ac:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__flp>
    10b0:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__flp+0x1>
    10b4:	10 97       	sbiw	r26, 0x00	; 0
    10b6:	81 f4       	brne	.+32     	; 0x10d8 <free+0x3e>
    10b8:	20 81       	ld	r18, Z
    10ba:	31 81       	ldd	r19, Z+1	; 0x01
    10bc:	82 0f       	add	r24, r18
    10be:	93 1f       	adc	r25, r19
    10c0:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    10c4:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	51 f5       	brne	.+84     	; 0x1122 <free+0x88>
    10ce:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__brkval+0x1>
    10d2:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__brkval>
    10d6:	67 c0       	rjmp	.+206    	; 0x11a6 <free+0x10c>
    10d8:	ed 01       	movw	r28, r26
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	ce 17       	cp	r28, r30
    10e0:	df 07       	cpc	r29, r31
    10e2:	40 f4       	brcc	.+16     	; 0x10f4 <free+0x5a>
    10e4:	4a 81       	ldd	r20, Y+2	; 0x02
    10e6:	5b 81       	ldd	r21, Y+3	; 0x03
    10e8:	9e 01       	movw	r18, r28
    10ea:	41 15       	cp	r20, r1
    10ec:	51 05       	cpc	r21, r1
    10ee:	f1 f0       	breq	.+60     	; 0x112c <free+0x92>
    10f0:	ea 01       	movw	r28, r20
    10f2:	f5 cf       	rjmp	.-22     	; 0x10de <free+0x44>
    10f4:	d3 83       	std	Z+3, r29	; 0x03
    10f6:	c2 83       	std	Z+2, r28	; 0x02
    10f8:	40 81       	ld	r20, Z
    10fa:	51 81       	ldd	r21, Z+1	; 0x01
    10fc:	84 0f       	add	r24, r20
    10fe:	95 1f       	adc	r25, r21
    1100:	c8 17       	cp	r28, r24
    1102:	d9 07       	cpc	r29, r25
    1104:	59 f4       	brne	.+22     	; 0x111c <free+0x82>
    1106:	88 81       	ld	r24, Y
    1108:	99 81       	ldd	r25, Y+1	; 0x01
    110a:	84 0f       	add	r24, r20
    110c:	95 1f       	adc	r25, r21
    110e:	02 96       	adiw	r24, 0x02	; 2
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	93 83       	std	Z+3, r25	; 0x03
    111a:	82 83       	std	Z+2, r24	; 0x02
    111c:	21 15       	cp	r18, r1
    111e:	31 05       	cpc	r19, r1
    1120:	29 f4       	brne	.+10     	; 0x112c <free+0x92>
    1122:	f0 93 2d 01 	sts	0x012D, r31	; 0x80012d <__flp+0x1>
    1126:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <__flp>
    112a:	3d c0       	rjmp	.+122    	; 0x11a6 <free+0x10c>
    112c:	e9 01       	movw	r28, r18
    112e:	fb 83       	std	Y+3, r31	; 0x03
    1130:	ea 83       	std	Y+2, r30	; 0x02
    1132:	49 91       	ld	r20, Y+
    1134:	59 91       	ld	r21, Y+
    1136:	c4 0f       	add	r28, r20
    1138:	d5 1f       	adc	r29, r21
    113a:	ec 17       	cp	r30, r28
    113c:	fd 07       	cpc	r31, r29
    113e:	61 f4       	brne	.+24     	; 0x1158 <free+0xbe>
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	84 0f       	add	r24, r20
    1146:	95 1f       	adc	r25, r21
    1148:	02 96       	adiw	r24, 0x02	; 2
    114a:	e9 01       	movw	r28, r18
    114c:	99 83       	std	Y+1, r25	; 0x01
    114e:	88 83       	st	Y, r24
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	9b 83       	std	Y+3, r25	; 0x03
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	e0 e0       	ldi	r30, 0x00	; 0
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	12 96       	adiw	r26, 0x02	; 2
    115e:	8d 91       	ld	r24, X+
    1160:	9c 91       	ld	r25, X
    1162:	13 97       	sbiw	r26, 0x03	; 3
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	19 f0       	breq	.+6      	; 0x116e <free+0xd4>
    1168:	fd 01       	movw	r30, r26
    116a:	dc 01       	movw	r26, r24
    116c:	f7 cf       	rjmp	.-18     	; 0x115c <free+0xc2>
    116e:	8d 91       	ld	r24, X+
    1170:	9c 91       	ld	r25, X
    1172:	11 97       	sbiw	r26, 0x01	; 1
    1174:	9d 01       	movw	r18, r26
    1176:	2e 5f       	subi	r18, 0xFE	; 254
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    1182:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    1186:	28 17       	cp	r18, r24
    1188:	39 07       	cpc	r19, r25
    118a:	69 f4       	brne	.+26     	; 0x11a6 <free+0x10c>
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	29 f4       	brne	.+10     	; 0x119a <free+0x100>
    1190:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__flp+0x1>
    1194:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__flp>
    1198:	02 c0       	rjmp	.+4      	; 0x119e <free+0x104>
    119a:	13 82       	std	Z+3, r1	; 0x03
    119c:	12 82       	std	Z+2, r1	; 0x02
    119e:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__brkval+0x1>
    11a2:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__brkval>
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <sprintf>:
    11ac:	ae e0       	ldi	r26, 0x0E	; 14
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ec ed       	ldi	r30, 0xDC	; 220
    11b2:	f8 e0       	ldi	r31, 0x08	; 8
    11b4:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__prologue_saves__+0x1c>
    11b8:	0d 89       	ldd	r16, Y+21	; 0x15
    11ba:	1e 89       	ldd	r17, Y+22	; 0x16
    11bc:	86 e0       	ldi	r24, 0x06	; 6
    11be:	8c 83       	std	Y+4, r24	; 0x04
    11c0:	1a 83       	std	Y+2, r17	; 0x02
    11c2:	09 83       	std	Y+1, r16	; 0x01
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	9f e7       	ldi	r25, 0x7F	; 127
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	ae 01       	movw	r20, r28
    11ce:	47 5e       	subi	r20, 0xE7	; 231
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	6f 89       	ldd	r22, Y+23	; 0x17
    11d4:	78 8d       	ldd	r23, Y+24	; 0x18
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <vfprintf>
    11de:	ef 81       	ldd	r30, Y+7	; 0x07
    11e0:	f8 85       	ldd	r31, Y+8	; 0x08
    11e2:	e0 0f       	add	r30, r16
    11e4:	f1 1f       	adc	r31, r17
    11e6:	10 82       	st	Z, r1
    11e8:	2e 96       	adiw	r28, 0x0e	; 14
    11ea:	e4 e0       	ldi	r30, 0x04	; 4
    11ec:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__epilogue_restores__+0x1c>

000011f0 <vfprintf>:
    11f0:	ab e0       	ldi	r26, 0x0B	; 11
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee ef       	ldi	r30, 0xFE	; 254
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__prologue_saves__>
    11fc:	6c 01       	movw	r12, r24
    11fe:	7b 01       	movw	r14, r22
    1200:	8a 01       	movw	r16, r20
    1202:	fc 01       	movw	r30, r24
    1204:	17 82       	std	Z+7, r1	; 0x07
    1206:	16 82       	std	Z+6, r1	; 0x06
    1208:	83 81       	ldd	r24, Z+3	; 0x03
    120a:	81 ff       	sbrs	r24, 1
    120c:	cc c1       	rjmp	.+920    	; 0x15a6 <vfprintf+0x3b6>
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	3c 01       	movw	r6, r24
    1214:	f6 01       	movw	r30, r12
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	f7 01       	movw	r30, r14
    121a:	93 fd       	sbrc	r25, 3
    121c:	85 91       	lpm	r24, Z+
    121e:	93 ff       	sbrs	r25, 3
    1220:	81 91       	ld	r24, Z+
    1222:	7f 01       	movw	r14, r30
    1224:	88 23       	and	r24, r24
    1226:	09 f4       	brne	.+2      	; 0x122a <vfprintf+0x3a>
    1228:	ba c1       	rjmp	.+884    	; 0x159e <vfprintf+0x3ae>
    122a:	85 32       	cpi	r24, 0x25	; 37
    122c:	39 f4       	brne	.+14     	; 0x123c <vfprintf+0x4c>
    122e:	93 fd       	sbrc	r25, 3
    1230:	85 91       	lpm	r24, Z+
    1232:	93 ff       	sbrs	r25, 3
    1234:	81 91       	ld	r24, Z+
    1236:	7f 01       	movw	r14, r30
    1238:	85 32       	cpi	r24, 0x25	; 37
    123a:	29 f4       	brne	.+10     	; 0x1246 <vfprintf+0x56>
    123c:	b6 01       	movw	r22, r12
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    1244:	e7 cf       	rjmp	.-50     	; 0x1214 <vfprintf+0x24>
    1246:	91 2c       	mov	r9, r1
    1248:	21 2c       	mov	r2, r1
    124a:	31 2c       	mov	r3, r1
    124c:	ff e1       	ldi	r31, 0x1F	; 31
    124e:	f3 15       	cp	r31, r3
    1250:	d8 f0       	brcs	.+54     	; 0x1288 <vfprintf+0x98>
    1252:	8b 32       	cpi	r24, 0x2B	; 43
    1254:	79 f0       	breq	.+30     	; 0x1274 <vfprintf+0x84>
    1256:	38 f4       	brcc	.+14     	; 0x1266 <vfprintf+0x76>
    1258:	80 32       	cpi	r24, 0x20	; 32
    125a:	79 f0       	breq	.+30     	; 0x127a <vfprintf+0x8a>
    125c:	83 32       	cpi	r24, 0x23	; 35
    125e:	a1 f4       	brne	.+40     	; 0x1288 <vfprintf+0x98>
    1260:	23 2d       	mov	r18, r3
    1262:	20 61       	ori	r18, 0x10	; 16
    1264:	1d c0       	rjmp	.+58     	; 0x12a0 <vfprintf+0xb0>
    1266:	8d 32       	cpi	r24, 0x2D	; 45
    1268:	61 f0       	breq	.+24     	; 0x1282 <vfprintf+0x92>
    126a:	80 33       	cpi	r24, 0x30	; 48
    126c:	69 f4       	brne	.+26     	; 0x1288 <vfprintf+0x98>
    126e:	23 2d       	mov	r18, r3
    1270:	21 60       	ori	r18, 0x01	; 1
    1272:	16 c0       	rjmp	.+44     	; 0x12a0 <vfprintf+0xb0>
    1274:	83 2d       	mov	r24, r3
    1276:	82 60       	ori	r24, 0x02	; 2
    1278:	38 2e       	mov	r3, r24
    127a:	e3 2d       	mov	r30, r3
    127c:	e4 60       	ori	r30, 0x04	; 4
    127e:	3e 2e       	mov	r3, r30
    1280:	2a c0       	rjmp	.+84     	; 0x12d6 <vfprintf+0xe6>
    1282:	f3 2d       	mov	r31, r3
    1284:	f8 60       	ori	r31, 0x08	; 8
    1286:	1d c0       	rjmp	.+58     	; 0x12c2 <vfprintf+0xd2>
    1288:	37 fc       	sbrc	r3, 7
    128a:	2d c0       	rjmp	.+90     	; 0x12e6 <vfprintf+0xf6>
    128c:	20 ed       	ldi	r18, 0xD0	; 208
    128e:	28 0f       	add	r18, r24
    1290:	2a 30       	cpi	r18, 0x0A	; 10
    1292:	40 f0       	brcs	.+16     	; 0x12a4 <vfprintf+0xb4>
    1294:	8e 32       	cpi	r24, 0x2E	; 46
    1296:	b9 f4       	brne	.+46     	; 0x12c6 <vfprintf+0xd6>
    1298:	36 fc       	sbrc	r3, 6
    129a:	81 c1       	rjmp	.+770    	; 0x159e <vfprintf+0x3ae>
    129c:	23 2d       	mov	r18, r3
    129e:	20 64       	ori	r18, 0x40	; 64
    12a0:	32 2e       	mov	r3, r18
    12a2:	19 c0       	rjmp	.+50     	; 0x12d6 <vfprintf+0xe6>
    12a4:	36 fe       	sbrs	r3, 6
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <vfprintf+0xc4>
    12a8:	8a e0       	ldi	r24, 0x0A	; 10
    12aa:	98 9e       	mul	r9, r24
    12ac:	20 0d       	add	r18, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	92 2e       	mov	r9, r18
    12b2:	11 c0       	rjmp	.+34     	; 0x12d6 <vfprintf+0xe6>
    12b4:	ea e0       	ldi	r30, 0x0A	; 10
    12b6:	2e 9e       	mul	r2, r30
    12b8:	20 0d       	add	r18, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	22 2e       	mov	r2, r18
    12be:	f3 2d       	mov	r31, r3
    12c0:	f0 62       	ori	r31, 0x20	; 32
    12c2:	3f 2e       	mov	r3, r31
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <vfprintf+0xe6>
    12c6:	8c 36       	cpi	r24, 0x6C	; 108
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <vfprintf+0xe2>
    12ca:	83 2d       	mov	r24, r3
    12cc:	80 68       	ori	r24, 0x80	; 128
    12ce:	38 2e       	mov	r3, r24
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0xe6>
    12d2:	88 36       	cpi	r24, 0x68	; 104
    12d4:	41 f4       	brne	.+16     	; 0x12e6 <vfprintf+0xf6>
    12d6:	f7 01       	movw	r30, r14
    12d8:	93 fd       	sbrc	r25, 3
    12da:	85 91       	lpm	r24, Z+
    12dc:	93 ff       	sbrs	r25, 3
    12de:	81 91       	ld	r24, Z+
    12e0:	7f 01       	movw	r14, r30
    12e2:	81 11       	cpse	r24, r1
    12e4:	b3 cf       	rjmp	.-154    	; 0x124c <vfprintf+0x5c>
    12e6:	98 2f       	mov	r25, r24
    12e8:	9f 7d       	andi	r25, 0xDF	; 223
    12ea:	95 54       	subi	r25, 0x45	; 69
    12ec:	93 30       	cpi	r25, 0x03	; 3
    12ee:	28 f4       	brcc	.+10     	; 0x12fa <vfprintf+0x10a>
    12f0:	0c 5f       	subi	r16, 0xFC	; 252
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	9f e3       	ldi	r25, 0x3F	; 63
    12f6:	99 83       	std	Y+1, r25	; 0x01
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <vfprintf+0x124>
    12fa:	83 36       	cpi	r24, 0x63	; 99
    12fc:	31 f0       	breq	.+12     	; 0x130a <vfprintf+0x11a>
    12fe:	83 37       	cpi	r24, 0x73	; 115
    1300:	71 f0       	breq	.+28     	; 0x131e <vfprintf+0x12e>
    1302:	83 35       	cpi	r24, 0x53	; 83
    1304:	09 f0       	breq	.+2      	; 0x1308 <vfprintf+0x118>
    1306:	59 c0       	rjmp	.+178    	; 0x13ba <vfprintf+0x1ca>
    1308:	21 c0       	rjmp	.+66     	; 0x134c <vfprintf+0x15c>
    130a:	f8 01       	movw	r30, r16
    130c:	80 81       	ld	r24, Z
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	0e 5f       	subi	r16, 0xFE	; 254
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	88 24       	eor	r8, r8
    1316:	83 94       	inc	r8
    1318:	91 2c       	mov	r9, r1
    131a:	53 01       	movw	r10, r6
    131c:	13 c0       	rjmp	.+38     	; 0x1344 <vfprintf+0x154>
    131e:	28 01       	movw	r4, r16
    1320:	f2 e0       	ldi	r31, 0x02	; 2
    1322:	4f 0e       	add	r4, r31
    1324:	51 1c       	adc	r5, r1
    1326:	f8 01       	movw	r30, r16
    1328:	a0 80       	ld	r10, Z
    132a:	b1 80       	ldd	r11, Z+1	; 0x01
    132c:	36 fe       	sbrs	r3, 6
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <vfprintf+0x146>
    1330:	69 2d       	mov	r22, r9
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <vfprintf+0x14a>
    1336:	6f ef       	ldi	r22, 0xFF	; 255
    1338:	7f ef       	ldi	r23, 0xFF	; 255
    133a:	c5 01       	movw	r24, r10
    133c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <strnlen>
    1340:	4c 01       	movw	r8, r24
    1342:	82 01       	movw	r16, r4
    1344:	f3 2d       	mov	r31, r3
    1346:	ff 77       	andi	r31, 0x7F	; 127
    1348:	3f 2e       	mov	r3, r31
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <vfprintf+0x188>
    134c:	28 01       	movw	r4, r16
    134e:	22 e0       	ldi	r18, 0x02	; 2
    1350:	42 0e       	add	r4, r18
    1352:	51 1c       	adc	r5, r1
    1354:	f8 01       	movw	r30, r16
    1356:	a0 80       	ld	r10, Z
    1358:	b1 80       	ldd	r11, Z+1	; 0x01
    135a:	36 fe       	sbrs	r3, 6
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <vfprintf+0x174>
    135e:	69 2d       	mov	r22, r9
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x178>
    1364:	6f ef       	ldi	r22, 0xFF	; 255
    1366:	7f ef       	ldi	r23, 0xFF	; 255
    1368:	c5 01       	movw	r24, r10
    136a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <strnlen_P>
    136e:	4c 01       	movw	r8, r24
    1370:	f3 2d       	mov	r31, r3
    1372:	f0 68       	ori	r31, 0x80	; 128
    1374:	3f 2e       	mov	r3, r31
    1376:	82 01       	movw	r16, r4
    1378:	33 fc       	sbrc	r3, 3
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <vfprintf+0x1c2>
    137c:	82 2d       	mov	r24, r2
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	88 16       	cp	r8, r24
    1382:	99 06       	cpc	r9, r25
    1384:	b0 f4       	brcc	.+44     	; 0x13b2 <vfprintf+0x1c2>
    1386:	b6 01       	movw	r22, r12
    1388:	80 e2       	ldi	r24, 0x20	; 32
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    1390:	2a 94       	dec	r2
    1392:	f4 cf       	rjmp	.-24     	; 0x137c <vfprintf+0x18c>
    1394:	f5 01       	movw	r30, r10
    1396:	37 fc       	sbrc	r3, 7
    1398:	85 91       	lpm	r24, Z+
    139a:	37 fe       	sbrs	r3, 7
    139c:	81 91       	ld	r24, Z+
    139e:	5f 01       	movw	r10, r30
    13a0:	b6 01       	movw	r22, r12
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    13a8:	21 10       	cpse	r2, r1
    13aa:	2a 94       	dec	r2
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	82 1a       	sub	r8, r18
    13b0:	91 08       	sbc	r9, r1
    13b2:	81 14       	cp	r8, r1
    13b4:	91 04       	cpc	r9, r1
    13b6:	71 f7       	brne	.-36     	; 0x1394 <vfprintf+0x1a4>
    13b8:	e8 c0       	rjmp	.+464    	; 0x158a <vfprintf+0x39a>
    13ba:	84 36       	cpi	r24, 0x64	; 100
    13bc:	11 f0       	breq	.+4      	; 0x13c2 <vfprintf+0x1d2>
    13be:	89 36       	cpi	r24, 0x69	; 105
    13c0:	41 f5       	brne	.+80     	; 0x1412 <vfprintf+0x222>
    13c2:	f8 01       	movw	r30, r16
    13c4:	37 fe       	sbrs	r3, 7
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <vfprintf+0x1e6>
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	0c 5f       	subi	r16, 0xFC	; 252
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <vfprintf+0x1f6>
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
    13da:	07 2e       	mov	r0, r23
    13dc:	00 0c       	add	r0, r0
    13de:	88 0b       	sbc	r24, r24
    13e0:	99 0b       	sbc	r25, r25
    13e2:	0e 5f       	subi	r16, 0xFE	; 254
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	f3 2d       	mov	r31, r3
    13e8:	ff 76       	andi	r31, 0x6F	; 111
    13ea:	3f 2e       	mov	r3, r31
    13ec:	97 ff       	sbrs	r25, 7
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <vfprintf+0x212>
    13f0:	90 95       	com	r25
    13f2:	80 95       	com	r24
    13f4:	70 95       	com	r23
    13f6:	61 95       	neg	r22
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	8f 4f       	sbci	r24, 0xFF	; 255
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	f0 68       	ori	r31, 0x80	; 128
    1400:	3f 2e       	mov	r3, r31
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	a3 01       	movw	r20, r6
    1408:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__ultoa_invert>
    140c:	88 2e       	mov	r8, r24
    140e:	86 18       	sub	r8, r6
    1410:	45 c0       	rjmp	.+138    	; 0x149c <vfprintf+0x2ac>
    1412:	85 37       	cpi	r24, 0x75	; 117
    1414:	31 f4       	brne	.+12     	; 0x1422 <vfprintf+0x232>
    1416:	23 2d       	mov	r18, r3
    1418:	2f 7e       	andi	r18, 0xEF	; 239
    141a:	b2 2e       	mov	r11, r18
    141c:	2a e0       	ldi	r18, 0x0A	; 10
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	25 c0       	rjmp	.+74     	; 0x146c <vfprintf+0x27c>
    1422:	93 2d       	mov	r25, r3
    1424:	99 7f       	andi	r25, 0xF9	; 249
    1426:	b9 2e       	mov	r11, r25
    1428:	8f 36       	cpi	r24, 0x6F	; 111
    142a:	c1 f0       	breq	.+48     	; 0x145c <vfprintf+0x26c>
    142c:	18 f4       	brcc	.+6      	; 0x1434 <vfprintf+0x244>
    142e:	88 35       	cpi	r24, 0x58	; 88
    1430:	79 f0       	breq	.+30     	; 0x1450 <vfprintf+0x260>
    1432:	b5 c0       	rjmp	.+362    	; 0x159e <vfprintf+0x3ae>
    1434:	80 37       	cpi	r24, 0x70	; 112
    1436:	19 f0       	breq	.+6      	; 0x143e <vfprintf+0x24e>
    1438:	88 37       	cpi	r24, 0x78	; 120
    143a:	21 f0       	breq	.+8      	; 0x1444 <vfprintf+0x254>
    143c:	b0 c0       	rjmp	.+352    	; 0x159e <vfprintf+0x3ae>
    143e:	e9 2f       	mov	r30, r25
    1440:	e0 61       	ori	r30, 0x10	; 16
    1442:	be 2e       	mov	r11, r30
    1444:	b4 fe       	sbrs	r11, 4
    1446:	0d c0       	rjmp	.+26     	; 0x1462 <vfprintf+0x272>
    1448:	fb 2d       	mov	r31, r11
    144a:	f4 60       	ori	r31, 0x04	; 4
    144c:	bf 2e       	mov	r11, r31
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <vfprintf+0x272>
    1450:	34 fe       	sbrs	r3, 4
    1452:	0a c0       	rjmp	.+20     	; 0x1468 <vfprintf+0x278>
    1454:	29 2f       	mov	r18, r25
    1456:	26 60       	ori	r18, 0x06	; 6
    1458:	b2 2e       	mov	r11, r18
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0x278>
    145c:	28 e0       	ldi	r18, 0x08	; 8
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	05 c0       	rjmp	.+10     	; 0x146c <vfprintf+0x27c>
    1462:	20 e1       	ldi	r18, 0x10	; 16
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x27c>
    1468:	20 e1       	ldi	r18, 0x10	; 16
    146a:	32 e0       	ldi	r19, 0x02	; 2
    146c:	f8 01       	movw	r30, r16
    146e:	b7 fe       	sbrs	r11, 7
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <vfprintf+0x290>
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	0c 5f       	subi	r16, 0xFC	; 252
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
    147e:	06 c0       	rjmp	.+12     	; 0x148c <vfprintf+0x29c>
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 5f       	subi	r16, 0xFE	; 254
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	a3 01       	movw	r20, r6
    148e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__ultoa_invert>
    1492:	88 2e       	mov	r8, r24
    1494:	86 18       	sub	r8, r6
    1496:	fb 2d       	mov	r31, r11
    1498:	ff 77       	andi	r31, 0x7F	; 127
    149a:	3f 2e       	mov	r3, r31
    149c:	36 fe       	sbrs	r3, 6
    149e:	0d c0       	rjmp	.+26     	; 0x14ba <vfprintf+0x2ca>
    14a0:	23 2d       	mov	r18, r3
    14a2:	2e 7f       	andi	r18, 0xFE	; 254
    14a4:	a2 2e       	mov	r10, r18
    14a6:	89 14       	cp	r8, r9
    14a8:	58 f4       	brcc	.+22     	; 0x14c0 <vfprintf+0x2d0>
    14aa:	34 fe       	sbrs	r3, 4
    14ac:	0b c0       	rjmp	.+22     	; 0x14c4 <vfprintf+0x2d4>
    14ae:	32 fc       	sbrc	r3, 2
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <vfprintf+0x2d4>
    14b2:	83 2d       	mov	r24, r3
    14b4:	8e 7e       	andi	r24, 0xEE	; 238
    14b6:	a8 2e       	mov	r10, r24
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <vfprintf+0x2d4>
    14ba:	b8 2c       	mov	r11, r8
    14bc:	a3 2c       	mov	r10, r3
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <vfprintf+0x2d6>
    14c0:	b8 2c       	mov	r11, r8
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <vfprintf+0x2d6>
    14c4:	b9 2c       	mov	r11, r9
    14c6:	a4 fe       	sbrs	r10, 4
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <vfprintf+0x2f8>
    14ca:	fe 01       	movw	r30, r28
    14cc:	e8 0d       	add	r30, r8
    14ce:	f1 1d       	adc	r31, r1
    14d0:	80 81       	ld	r24, Z
    14d2:	80 33       	cpi	r24, 0x30	; 48
    14d4:	21 f4       	brne	.+8      	; 0x14de <vfprintf+0x2ee>
    14d6:	9a 2d       	mov	r25, r10
    14d8:	99 7e       	andi	r25, 0xE9	; 233
    14da:	a9 2e       	mov	r10, r25
    14dc:	09 c0       	rjmp	.+18     	; 0x14f0 <vfprintf+0x300>
    14de:	a2 fe       	sbrs	r10, 2
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <vfprintf+0x2fe>
    14e2:	b3 94       	inc	r11
    14e4:	b3 94       	inc	r11
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <vfprintf+0x300>
    14e8:	8a 2d       	mov	r24, r10
    14ea:	86 78       	andi	r24, 0x86	; 134
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <vfprintf+0x300>
    14ee:	b3 94       	inc	r11
    14f0:	a3 fc       	sbrc	r10, 3
    14f2:	11 c0       	rjmp	.+34     	; 0x1516 <vfprintf+0x326>
    14f4:	a0 fe       	sbrs	r10, 0
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <vfprintf+0x314>
    14f8:	b2 14       	cp	r11, r2
    14fa:	88 f4       	brcc	.+34     	; 0x151e <vfprintf+0x32e>
    14fc:	28 0c       	add	r2, r8
    14fe:	92 2c       	mov	r9, r2
    1500:	9b 18       	sub	r9, r11
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <vfprintf+0x330>
    1504:	b2 14       	cp	r11, r2
    1506:	60 f4       	brcc	.+24     	; 0x1520 <vfprintf+0x330>
    1508:	b6 01       	movw	r22, r12
    150a:	80 e2       	ldi	r24, 0x20	; 32
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    1512:	b3 94       	inc	r11
    1514:	f7 cf       	rjmp	.-18     	; 0x1504 <vfprintf+0x314>
    1516:	b2 14       	cp	r11, r2
    1518:	18 f4       	brcc	.+6      	; 0x1520 <vfprintf+0x330>
    151a:	2b 18       	sub	r2, r11
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <vfprintf+0x332>
    151e:	98 2c       	mov	r9, r8
    1520:	21 2c       	mov	r2, r1
    1522:	a4 fe       	sbrs	r10, 4
    1524:	10 c0       	rjmp	.+32     	; 0x1546 <vfprintf+0x356>
    1526:	b6 01       	movw	r22, r12
    1528:	80 e3       	ldi	r24, 0x30	; 48
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    1530:	a2 fe       	sbrs	r10, 2
    1532:	17 c0       	rjmp	.+46     	; 0x1562 <vfprintf+0x372>
    1534:	a1 fc       	sbrc	r10, 1
    1536:	03 c0       	rjmp	.+6      	; 0x153e <vfprintf+0x34e>
    1538:	88 e7       	ldi	r24, 0x78	; 120
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x352>
    153e:	88 e5       	ldi	r24, 0x58	; 88
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	b6 01       	movw	r22, r12
    1544:	0c c0       	rjmp	.+24     	; 0x155e <vfprintf+0x36e>
    1546:	8a 2d       	mov	r24, r10
    1548:	86 78       	andi	r24, 0x86	; 134
    154a:	59 f0       	breq	.+22     	; 0x1562 <vfprintf+0x372>
    154c:	a1 fe       	sbrs	r10, 1
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <vfprintf+0x364>
    1550:	8b e2       	ldi	r24, 0x2B	; 43
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <vfprintf+0x366>
    1554:	80 e2       	ldi	r24, 0x20	; 32
    1556:	a7 fc       	sbrc	r10, 7
    1558:	8d e2       	ldi	r24, 0x2D	; 45
    155a:	b6 01       	movw	r22, r12
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    1562:	89 14       	cp	r8, r9
    1564:	38 f4       	brcc	.+14     	; 0x1574 <vfprintf+0x384>
    1566:	b6 01       	movw	r22, r12
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    1570:	9a 94       	dec	r9
    1572:	f7 cf       	rjmp	.-18     	; 0x1562 <vfprintf+0x372>
    1574:	8a 94       	dec	r8
    1576:	f3 01       	movw	r30, r6
    1578:	e8 0d       	add	r30, r8
    157a:	f1 1d       	adc	r31, r1
    157c:	80 81       	ld	r24, Z
    157e:	b6 01       	movw	r22, r12
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    1586:	81 10       	cpse	r8, r1
    1588:	f5 cf       	rjmp	.-22     	; 0x1574 <vfprintf+0x384>
    158a:	22 20       	and	r2, r2
    158c:	09 f4       	brne	.+2      	; 0x1590 <vfprintf+0x3a0>
    158e:	42 ce       	rjmp	.-892    	; 0x1214 <vfprintf+0x24>
    1590:	b6 01       	movw	r22, r12
    1592:	80 e2       	ldi	r24, 0x20	; 32
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 ef 0a 	call	0x15de	; 0x15de <fputc>
    159a:	2a 94       	dec	r2
    159c:	f6 cf       	rjmp	.-20     	; 0x158a <vfprintf+0x39a>
    159e:	f6 01       	movw	r30, r12
    15a0:	86 81       	ldd	r24, Z+6	; 0x06
    15a2:	97 81       	ldd	r25, Z+7	; 0x07
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <vfprintf+0x3ba>
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	9f ef       	ldi	r25, 0xFF	; 255
    15aa:	2b 96       	adiw	r28, 0x0b	; 11
    15ac:	e2 e1       	ldi	r30, 0x12	; 18
    15ae:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__epilogue_restores__>

000015b2 <strnlen_P>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	05 90       	lpm	r0, Z+
    15b6:	61 50       	subi	r22, 0x01	; 1
    15b8:	70 40       	sbci	r23, 0x00	; 0
    15ba:	01 10       	cpse	r0, r1
    15bc:	d8 f7       	brcc	.-10     	; 0x15b4 <strnlen_P+0x2>
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	8e 0f       	add	r24, r30
    15c4:	9f 1f       	adc	r25, r31
    15c6:	08 95       	ret

000015c8 <strnlen>:
    15c8:	fc 01       	movw	r30, r24
    15ca:	61 50       	subi	r22, 0x01	; 1
    15cc:	70 40       	sbci	r23, 0x00	; 0
    15ce:	01 90       	ld	r0, Z+
    15d0:	01 10       	cpse	r0, r1
    15d2:	d8 f7       	brcc	.-10     	; 0x15ca <strnlen+0x2>
    15d4:	80 95       	com	r24
    15d6:	90 95       	com	r25
    15d8:	8e 0f       	add	r24, r30
    15da:	9f 1f       	adc	r25, r31
    15dc:	08 95       	ret

000015de <fputc>:
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	fb 01       	movw	r30, r22
    15e8:	23 81       	ldd	r18, Z+3	; 0x03
    15ea:	21 fd       	sbrc	r18, 1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <fputc+0x16>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	2c c0       	rjmp	.+88     	; 0x164c <fputc+0x6e>
    15f4:	22 ff       	sbrs	r18, 2
    15f6:	16 c0       	rjmp	.+44     	; 0x1624 <fputc+0x46>
    15f8:	46 81       	ldd	r20, Z+6	; 0x06
    15fa:	57 81       	ldd	r21, Z+7	; 0x07
    15fc:	24 81       	ldd	r18, Z+4	; 0x04
    15fe:	35 81       	ldd	r19, Z+5	; 0x05
    1600:	42 17       	cp	r20, r18
    1602:	53 07       	cpc	r21, r19
    1604:	44 f4       	brge	.+16     	; 0x1616 <fputc+0x38>
    1606:	a0 81       	ld	r26, Z
    1608:	b1 81       	ldd	r27, Z+1	; 0x01
    160a:	9d 01       	movw	r18, r26
    160c:	2f 5f       	subi	r18, 0xFF	; 255
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	31 83       	std	Z+1, r19	; 0x01
    1612:	20 83       	st	Z, r18
    1614:	8c 93       	st	X, r24
    1616:	26 81       	ldd	r18, Z+6	; 0x06
    1618:	37 81       	ldd	r19, Z+7	; 0x07
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	37 83       	std	Z+7, r19	; 0x07
    1620:	26 83       	std	Z+6, r18	; 0x06
    1622:	14 c0       	rjmp	.+40     	; 0x164c <fputc+0x6e>
    1624:	8b 01       	movw	r16, r22
    1626:	ec 01       	movw	r28, r24
    1628:	fb 01       	movw	r30, r22
    162a:	00 84       	ldd	r0, Z+8	; 0x08
    162c:	f1 85       	ldd	r31, Z+9	; 0x09
    162e:	e0 2d       	mov	r30, r0
    1630:	09 95       	icall
    1632:	89 2b       	or	r24, r25
    1634:	e1 f6       	brne	.-72     	; 0x15ee <fputc+0x10>
    1636:	d8 01       	movw	r26, r16
    1638:	16 96       	adiw	r26, 0x06	; 6
    163a:	8d 91       	ld	r24, X+
    163c:	9c 91       	ld	r25, X
    163e:	17 97       	sbiw	r26, 0x07	; 7
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	17 96       	adiw	r26, 0x07	; 7
    1644:	9c 93       	st	X, r25
    1646:	8e 93       	st	-X, r24
    1648:	16 97       	sbiw	r26, 0x06	; 6
    164a:	ce 01       	movw	r24, r28
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <__ultoa_invert>:
    1656:	fa 01       	movw	r30, r20
    1658:	aa 27       	eor	r26, r26
    165a:	28 30       	cpi	r18, 0x08	; 8
    165c:	51 f1       	breq	.+84     	; 0x16b2 <__ultoa_invert+0x5c>
    165e:	20 31       	cpi	r18, 0x10	; 16
    1660:	81 f1       	breq	.+96     	; 0x16c2 <__ultoa_invert+0x6c>
    1662:	e8 94       	clt
    1664:	6f 93       	push	r22
    1666:	6e 7f       	andi	r22, 0xFE	; 254
    1668:	6e 5f       	subi	r22, 0xFE	; 254
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	8f 4f       	sbci	r24, 0xFF	; 255
    166e:	9f 4f       	sbci	r25, 0xFF	; 255
    1670:	af 4f       	sbci	r26, 0xFF	; 255
    1672:	b1 e0       	ldi	r27, 0x01	; 1
    1674:	3e d0       	rcall	.+124    	; 0x16f2 <__ultoa_invert+0x9c>
    1676:	b4 e0       	ldi	r27, 0x04	; 4
    1678:	3c d0       	rcall	.+120    	; 0x16f2 <__ultoa_invert+0x9c>
    167a:	67 0f       	add	r22, r23
    167c:	78 1f       	adc	r23, r24
    167e:	89 1f       	adc	r24, r25
    1680:	9a 1f       	adc	r25, r26
    1682:	a1 1d       	adc	r26, r1
    1684:	68 0f       	add	r22, r24
    1686:	79 1f       	adc	r23, r25
    1688:	8a 1f       	adc	r24, r26
    168a:	91 1d       	adc	r25, r1
    168c:	a1 1d       	adc	r26, r1
    168e:	6a 0f       	add	r22, r26
    1690:	71 1d       	adc	r23, r1
    1692:	81 1d       	adc	r24, r1
    1694:	91 1d       	adc	r25, r1
    1696:	a1 1d       	adc	r26, r1
    1698:	20 d0       	rcall	.+64     	; 0x16da <__ultoa_invert+0x84>
    169a:	09 f4       	brne	.+2      	; 0x169e <__ultoa_invert+0x48>
    169c:	68 94       	set
    169e:	3f 91       	pop	r19
    16a0:	2a e0       	ldi	r18, 0x0A	; 10
    16a2:	26 9f       	mul	r18, r22
    16a4:	11 24       	eor	r1, r1
    16a6:	30 19       	sub	r19, r0
    16a8:	30 5d       	subi	r19, 0xD0	; 208
    16aa:	31 93       	st	Z+, r19
    16ac:	de f6       	brtc	.-74     	; 0x1664 <__ultoa_invert+0xe>
    16ae:	cf 01       	movw	r24, r30
    16b0:	08 95       	ret
    16b2:	46 2f       	mov	r20, r22
    16b4:	47 70       	andi	r20, 0x07	; 7
    16b6:	40 5d       	subi	r20, 0xD0	; 208
    16b8:	41 93       	st	Z+, r20
    16ba:	b3 e0       	ldi	r27, 0x03	; 3
    16bc:	0f d0       	rcall	.+30     	; 0x16dc <__ultoa_invert+0x86>
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <__ultoa_invert+0x5c>
    16c0:	f6 cf       	rjmp	.-20     	; 0x16ae <__ultoa_invert+0x58>
    16c2:	46 2f       	mov	r20, r22
    16c4:	4f 70       	andi	r20, 0x0F	; 15
    16c6:	40 5d       	subi	r20, 0xD0	; 208
    16c8:	4a 33       	cpi	r20, 0x3A	; 58
    16ca:	18 f0       	brcs	.+6      	; 0x16d2 <__ultoa_invert+0x7c>
    16cc:	49 5d       	subi	r20, 0xD9	; 217
    16ce:	31 fd       	sbrc	r19, 1
    16d0:	40 52       	subi	r20, 0x20	; 32
    16d2:	41 93       	st	Z+, r20
    16d4:	02 d0       	rcall	.+4      	; 0x16da <__ultoa_invert+0x84>
    16d6:	a9 f7       	brne	.-22     	; 0x16c2 <__ultoa_invert+0x6c>
    16d8:	ea cf       	rjmp	.-44     	; 0x16ae <__ultoa_invert+0x58>
    16da:	b4 e0       	ldi	r27, 0x04	; 4
    16dc:	a6 95       	lsr	r26
    16de:	97 95       	ror	r25
    16e0:	87 95       	ror	r24
    16e2:	77 95       	ror	r23
    16e4:	67 95       	ror	r22
    16e6:	ba 95       	dec	r27
    16e8:	c9 f7       	brne	.-14     	; 0x16dc <__ultoa_invert+0x86>
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	61 05       	cpc	r22, r1
    16ee:	71 05       	cpc	r23, r1
    16f0:	08 95       	ret
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	0a 2e       	mov	r0, r26
    16f8:	06 94       	lsr	r0
    16fa:	57 95       	ror	r21
    16fc:	47 95       	ror	r20
    16fe:	37 95       	ror	r19
    1700:	27 95       	ror	r18
    1702:	ba 95       	dec	r27
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__ultoa_invert+0xa2>
    1706:	62 0f       	add	r22, r18
    1708:	73 1f       	adc	r23, r19
    170a:	84 1f       	adc	r24, r20
    170c:	95 1f       	adc	r25, r21
    170e:	a0 1d       	adc	r26, r0
    1710:	08 95       	ret

00001712 <__prologue_saves__>:
    1712:	2f 92       	push	r2
    1714:	3f 92       	push	r3
    1716:	4f 92       	push	r4
    1718:	5f 92       	push	r5
    171a:	6f 92       	push	r6
    171c:	7f 92       	push	r7
    171e:	8f 92       	push	r8
    1720:	9f 92       	push	r9
    1722:	af 92       	push	r10
    1724:	bf 92       	push	r11
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	ca 1b       	sub	r28, r26
    173c:	db 0b       	sbc	r29, r27
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	09 94       	ijmp

0000174a <__epilogue_restores__>:
    174a:	2a 88       	ldd	r2, Y+18	; 0x12
    174c:	39 88       	ldd	r3, Y+17	; 0x11
    174e:	48 88       	ldd	r4, Y+16	; 0x10
    1750:	5f 84       	ldd	r5, Y+15	; 0x0f
    1752:	6e 84       	ldd	r6, Y+14	; 0x0e
    1754:	7d 84       	ldd	r7, Y+13	; 0x0d
    1756:	8c 84       	ldd	r8, Y+12	; 0x0c
    1758:	9b 84       	ldd	r9, Y+11	; 0x0b
    175a:	aa 84       	ldd	r10, Y+10	; 0x0a
    175c:	b9 84       	ldd	r11, Y+9	; 0x09
    175e:	c8 84       	ldd	r12, Y+8	; 0x08
    1760:	df 80       	ldd	r13, Y+7	; 0x07
    1762:	ee 80       	ldd	r14, Y+6	; 0x06
    1764:	fd 80       	ldd	r15, Y+5	; 0x05
    1766:	0c 81       	ldd	r16, Y+4	; 0x04
    1768:	1b 81       	ldd	r17, Y+3	; 0x03
    176a:	aa 81       	ldd	r26, Y+2	; 0x02
    176c:	b9 81       	ldd	r27, Y+1	; 0x01
    176e:	ce 0f       	add	r28, r30
    1770:	d1 1d       	adc	r29, r1
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	ed 01       	movw	r28, r26
    177e:	08 95       	ret

00001780 <_exit>:
    1780:	f8 94       	cli

00001782 <__stop_program>:
    1782:	ff cf       	rjmp	.-2      	; 0x1782 <__stop_program>
