
BobCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001732  000017c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080011e  0080011e  000017e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e43  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dfc  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000104c  00000000  00000000  0000469f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  000056ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e6  00000000  00000000  00005b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb3  00000000  00000000  000063ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006fa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	d3 00       	.word	0x00d3	; ????
      6a:	df 00       	.word	0x00df	; ????
      6c:	cd 00       	.word	0x00cd	; ????
      6e:	e1 00       	.word	0x00e1	; ????
      70:	cf 00       	.word	0x00cf	; ????
      72:	df 00       	.word	0x00df	; ????
      74:	df 00       	.word	0x00df	; ????
      76:	d7 00       	.word	0x00d7	; ????
      78:	df 00       	.word	0x00df	; ????
      7a:	df 00       	.word	0x00df	; ????
      7c:	d9 00       	.word	0x00d9	; ????
      7e:	df 00       	.word	0x00df	; ????
      80:	df 00       	.word	0x00df	; ????
      82:	df 00       	.word	0x00df	; ????
      84:	cb 00       	.word	0x00cb	; ????
      86:	df 00       	.word	0x00df	; ????
      88:	d5 00       	.word	0x00d5	; ????
      8a:	df 00       	.word	0x00df	; ????
      8c:	df 00       	.word	0x00df	; ????
      8e:	df 00       	.word	0x00df	; ????
      90:	df 00       	.word	0x00df	; ????
      92:	dd 00       	.word	0x00dd	; ????
      94:	df 00       	.word	0x00df	; ????
      96:	d1 00       	.word	0x00d1	; ????
      98:	df 00       	.word	0x00df	; ????
      9a:	df 00       	.word	0x00df	; ????
      9c:	df 00       	.word	0x00df	; ????
      9e:	df 00       	.word	0x00df	; ????
      a0:	df 00       	.word	0x00df	; ????
      a2:	df 00       	.word	0x00df	; ????
      a4:	df 00       	.word	0x00df	; ????
      a6:	df 00       	.word	0x00df	; ????
      a8:	df 00       	.word	0x00df	; ????
      aa:	df 00       	.word	0x00df	; ????
      ac:	df 00       	.word	0x00df	; ????
      ae:	df 00       	.word	0x00df	; ????
      b0:	df 00       	.word	0x00df	; ????
      b2:	df 00       	.word	0x00df	; ????
      b4:	df 00       	.word	0x00df	; ????
      b6:	df 00       	.word	0x00df	; ????
      b8:	df 00       	.word	0x00df	; ????
      ba:	df 00       	.word	0x00df	; ????
      bc:	db 00       	.word	0x00db	; ????
      be:	9b 01       	movw	r18, r22
      c0:	a7 01       	movw	r20, r14
      c2:	b3 01       	movw	r22, r6
      c4:	bf 01       	movw	r22, r30
      c6:	cb 01       	movw	r24, r22
      c8:	d7 01       	movw	r26, r14
      ca:	e3 01       	movw	r28, r6
      cc:	fa 02       	muls	r31, r26
      ce:	ff 02       	muls	r31, r31
      d0:	40 03       	mulsu	r20, r16
      d2:	97 03       	fmuls	r17, r23
      d4:	ec 03       	fmulsu	r22, r20
      d6:	2d 04       	cpc	r2, r13
      d8:	84 04       	cpc	r8, r4

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e2 e3       	ldi	r30, 0x32	; 50
      ee:	f7 e1       	ldi	r31, 0x17	; 23
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	ae 31       	cpi	r26, 0x1E	; 30
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	ae e1       	ldi	r26, 0x1E	; 30
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ae 32       	cpi	r26, 0x2E	; 46
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 00 01 	call	0x200	; 0x200 <main>
     110:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <CTRL_SendDistance>:

void CTRL_SendTemp(unsigned int temperature){
	char message[15];
	sprintf(message, "T%u\n", temperature);
	UART_putstring(&message[0]);
}
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	64 97       	sbiw	r28, 0x14	; 20
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	5f 93       	push	r21
     132:	4f 93       	push	r20
     134:	3f 93       	push	r19
     136:	2f 93       	push	r18
     138:	9f 93       	push	r25
     13a:	8f 93       	push	r24
     13c:	7f 93       	push	r23
     13e:	6f 93       	push	r22
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	9f 93       	push	r25
     146:	8f 93       	push	r24
     148:	8e 01       	movw	r16, r28
     14a:	0f 5f       	subi	r16, 0xFF	; 255
     14c:	1f 4f       	sbci	r17, 0xFF	; 255
     14e:	1f 93       	push	r17
     150:	0f 93       	push	r16
     152:	0e 94 ad 08 	call	0x115a	; 0x115a <sprintf>
     156:	c8 01       	movw	r24, r16
     158:	0e 94 22 06 	call	0xc44	; 0xc44 <UART_putstring>
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	de bf       	out	0x3e, r29	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	cd bf       	out	0x3d, r28	; 61
     166:	64 96       	adiw	r28, 0x14	; 20
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	0f be       	out	0x3f, r0	; 63
     170:	cd bf       	out	0x3d, r28	; 61
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <CTRL_GetCommand>:

enum commands CTRL_GetCommand(){
	char received_char;
	received_char = UART_read();
     17c:	0e 94 37 06 	call	0xc6e	; 0xc6e <UART_read>
	
	switch(received_char){
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	fc 01       	movw	r30, r24
     184:	e3 54       	subi	r30, 0x43	; 67
     186:	f1 09       	sbc	r31, r1
     188:	eb 32       	cpi	r30, 0x2B	; 43
     18a:	f1 05       	cpc	r31, r1
     18c:	c0 f4       	brcc	.+48     	; 0x1be <CTRL_GetCommand+0x42>
     18e:	ec 5c       	subi	r30, 0xCC	; 204
     190:	ff 4f       	sbci	r31, 0xFF	; 255
     192:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__tablejump2__>
		case 'F':
			return FORWARD;
			break;
		case 'Q':
			return FORWARD_LEFT;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	08 95       	ret
			break;
		case 'E':
			return FORWARD_RIGHT;
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	08 95       	ret
			break;
		case 'G':
			return BACKWARDS;
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	08 95       	ret
			break;
		case 'Z':
			return BACKWARDS_LEFT;
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	08 95       	ret
			break;
		case 'C':
			return BACKWARDS_RIGHT;
     1a6:	85 e0       	ldi	r24, 0x05	; 5
     1a8:	08 95       	ret
			break;
		case 'S':
			return NEUTRAL;
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	08 95       	ret
			break;
		case 'J':
			return POWER;
     1ae:	87 e0       	ldi	r24, 0x07	; 7
     1b0:	08 95       	ret
			break;
		case 'M':
			return LIGHTS_ON;
     1b2:	88 e0       	ldi	r24, 0x08	; 8
     1b4:	08 95       	ret
			break;
		case 'm':
			return LIGHTS_OFF;
     1b6:	89 e0       	ldi	r24, 0x09	; 9
     1b8:	08 95       	ret
			break;
		case 'X':
			return BEEP;
     1ba:	8a e0       	ldi	r24, 0x0A	; 10
     1bc:	08 95       	ret
			break;
		default:
			return UNKNOWN;
     1be:	8b e0       	ldi	r24, 0x0B	; 11
     1c0:	08 95       	ret
	char received_char;
	received_char = UART_read();
	
	switch(received_char){
		case 'F':
			return FORWARD;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return UNKNOWN;
			break;
	}
}
     1c4:	08 95       	ret

000001c6 <Init_Timer0>:
/* Init_Timer0
*  Initialize Timer0 for Fast PWM on pin 5 (BUZZER)
*/
void Init_Timer0() {
	
	sei();
     1c6:	78 94       	sei
	
	//		  tmr 8-bit									 | toggle pin 5
	TCCR0A |= (1 << WGM02) | (1 << WGM01) | (1 << WGM00) | (1 << COM0B1);
     1c8:	84 b5       	in	r24, 0x24	; 36
     1ca:	8b 62       	ori	r24, 0x2B	; 43
     1cc:	84 bd       	out	0x24, r24	; 36
	
	//TIMSK0 |= (1 << TOIE0);
		
	OCR0A = 0xF0;
     1ce:	80 ef       	ldi	r24, 0xF0	; 240
     1d0:	87 bd       	out	0x27, r24	; 39
     1d2:	08 95       	ret

000001d4 <LnS_Init>:

/* LnS_Init
 * initialize lights and buzzer pins as outputs and set to 0
 */
void LnS_Init(){
	DDRC |= (1 << PIN_MAIN_LIGHTS);
     1d4:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= (1 << PIN_BACKWARD_LIGHTS);
     1d6:	39 9a       	sbi	0x07, 1	; 7
	DDRC |= (1 << PIN_BREAK_LIGHTS);
     1d8:	3a 9a       	sbi	0x07, 2	; 7
	DDRD |= (1 << PIN_BUZZER);
     1da:	55 9a       	sbi	0x0a, 5	; 10
	PORTC &= ~(1 << PIN_MAIN_LIGHTS);
     1dc:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1 << PIN_BACKWARD_LIGHTS);
     1de:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1 << PIN_BREAK_LIGHTS);
     1e0:	42 98       	cbi	0x08, 2	; 8
	PORTD &= ~(1 << PIN_BUZZER);
     1e2:	5d 98       	cbi	0x0b, 5	; 11
	Init_Timer0();
     1e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Init_Timer0>
 * Switch buzzer ON/OFF
 *	state: ON/OFF defined in .h
 */
void LnS_BuzzerSwitch(int state){
	if(state == OFF)
		TCCR0B &= (0 << CS02);		//timer 0 off
     1e8:	85 b5       	in	r24, 0x25	; 37
     1ea:	15 bc       	out	0x25, r1	; 37
     1ec:	08 95       	ret

000001ee <LnS_BuzzerSwitch>:
/* LnS_BuzzerSwitch
 * Switch buzzer ON/OFF
 *	state: ON/OFF defined in .h
 */
void LnS_BuzzerSwitch(int state){
	if(state == OFF)
     1ee:	89 2b       	or	r24, r25
     1f0:	19 f4       	brne	.+6      	; 0x1f8 <LnS_BuzzerSwitch+0xa>
		TCCR0B &= (0 << CS02);		//timer 0 off
     1f2:	85 b5       	in	r24, 0x25	; 37
     1f4:	15 bc       	out	0x25, r1	; 37
     1f6:	08 95       	ret
	else
		TCCR0B |= (1 << CS02);		//16Mhz / (1 * 255) = 62kHz}
     1f8:	85 b5       	in	r24, 0x25	; 37
     1fa:	84 60       	ori	r24, 0x04	; 4
     1fc:	85 bd       	out	0x25, r24	; 37
     1fe:	08 95       	ret

00000200 <main>:
#include <util/delay.h>


int main(void)
{	
	UART_init(9600, true, true);
     200:	41 e0       	ldi	r20, 0x01	; 1
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	80 e8       	ldi	r24, 0x80	; 128
     206:	95 e2       	ldi	r25, 0x25	; 37
     208:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <UART_init>

	POWTR_Init();
     20c:	0e 94 44 01 	call	0x288	; 0x288 <POWTR_Init>
	LnS_Init();
     210:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LnS_Init>
	SENS_Init();
     214:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <SENS_Init>
	
	LnS_BuzzerSwitch(ON);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	82 e5       	ldi	r24, 0x52	; 82
     224:	97 e0       	ldi	r25, 0x07	; 7
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x26>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x30>
     230:	00 00       	nop
	_delay_ms(150);
	LnS_BuzzerSwitch(OFF);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
	
	while (1)
	{		
		// read sensors
		SENS_CheckForObstacles(200, 50);
     23a:	62 e3       	ldi	r22, 0x32	; 50
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	88 ec       	ldi	r24, 0xC8	; 200
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SENS_CheckForObstacles>
		
		// read commands from controller
		if(UART_available()){
     246:	0e 94 31 06 	call	0xc62	; 0xc62 <UART_available>
     24a:	88 23       	and	r24, r24
     24c:	41 f0       	breq	.+16     	; 0x25e <main+0x5e>
			command = CTRL_GetCommand();
     24e:	0e 94 be 00 	call	0x17c	; 0x17c <CTRL_GetCommand>
     252:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <command>
			if((int)command <= 7){
     256:	88 30       	cpi	r24, 0x08	; 8
     258:	10 f4       	brcc	.+4      	; 0x25e <main+0x5e>
				POWTR_SendCommand(command);
     25a:	0e 94 91 01 	call	0x322	; 0x322 <POWTR_SendCommand>
     25e:	2f ef       	ldi	r18, 0xFF	; 255
     260:	89 ef       	ldi	r24, 0xF9	; 249
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x64>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x6e>
     26e:	00 00       	nop
     270:	e4 cf       	rjmp	.-56     	; 0x23a <main+0x3a>

00000272 <Timer2_Init>:
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
     272:	e0 eb       	ldi	r30, 0xB0	; 176
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	83 68       	ori	r24, 0x83	; 131
     27a:	80 83       	st	Z, r24
     27c:	e1 eb       	ldi	r30, 0xB1	; 177
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	84 60       	ori	r24, 0x04	; 4
     284:	80 83       	st	Z, r24
     286:	08 95       	ret

00000288 <POWTR_Init>:
/* POWTR_init
 * Initialize motoros PWM, pins as outputs and set them to LOW
 */
void POWTR_Init(){
	// driving motor pins
	DDRD |= (1 << PIN_BWD);
     288:	54 9a       	sbi	0x0a, 4	; 10
	DDRC |= (1 << PIN_FWD);
     28a:	3d 9a       	sbi	0x07, 5	; 7
	DDRB |= (1 << PIN_POWER);
     28c:	23 9a       	sbi	0x04, 3	; 4
	PORTD &= ~(1 << PIN_BWD);
     28e:	5c 98       	cbi	0x0b, 4	; 11
	PORTC &= ~(1 << PIN_FWD);
     290:	45 98       	cbi	0x08, 5	; 8
	PORTB &= ~(1 << PIN_POWER);
     292:	2b 98       	cbi	0x05, 3	; 5
	
	// turning motor pins
	DDRD |= (1 << PIN_TURN_L);
     294:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1 << PIN_TURN_R);
     296:	20 9a       	sbi	0x04, 0	; 4
	PORTD &= ~(1 << PIN_TURN_L);
     298:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
     29a:	28 98       	cbi	0x05, 0	; 5
	
	Timer2_Init();
     29c:	0e 94 39 01 	call	0x272	; 0x272 <Timer2_Init>
	
	car_state = STOPPED;
     2a0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <car_state>
     2a4:	08 95       	ret

000002a6 <POWTR_TurnLeft>:
/* POWTR_TurnLeft
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnLeft(){
	PORTD |= (1 << PIN_TURN_L);
     2a6:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
     2a8:	28 98       	cbi	0x05, 0	; 5
     2aa:	08 95       	ret

000002ac <POWTR_TurnRight>:
/* POWTR_TurnRight
 * Set motor driver inputs to rotate turning
 * motor left
 */
void POWTR_TurnRight(){
	PORTD &= ~(1 << PIN_TURN_L);
     2ac:	5f 98       	cbi	0x0b, 7	; 11
	PORTB |= (1 << PIN_TURN_R);
     2ae:	28 9a       	sbi	0x05, 0	; 5
     2b0:	08 95       	ret

000002b2 <POWTR_NoTurn>:

/* POWTR_NoTurn
 * Set motor driver inputs to 0 to not turn the wheels
 */
void POWTR_NoTurn(){
	PORTD &= ~(1 << PIN_TURN_L);
     2b2:	5f 98       	cbi	0x0b, 7	; 11
	PORTB &= ~(1 << PIN_TURN_R);
     2b4:	28 98       	cbi	0x05, 0	; 5
     2b6:	08 95       	ret

000002b8 <POWTR_DriveForward>:
/* POWTR_DriveForward
 * Set motor driver inputs to rotate 
 * driving motor forward
 */
void POWTR_DriveForward(){
	PORTC |= (1 << PIN_FWD);
     2b8:	45 9a       	sbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
     2ba:	5c 98       	cbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
     2bc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <power>
     2c0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <power+0x1>
     2c4:	4e e6       	ldi	r20, 0x6E	; 110
     2c6:	42 9f       	mul	r20, r18
     2c8:	c0 01       	movw	r24, r0
     2ca:	43 9f       	mul	r20, r19
     2cc:	90 0d       	add	r25, r0
     2ce:	11 24       	eor	r1, r1
     2d0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     2d4:	08 95       	ret

000002d6 <POWTR_DriveBackward>:
/* POWTR_DriveBackward
 * Set motor driver inputs to rotate 
 * driving motor backward
 */
void POWTR_DriveBackward(){
	PORTC &= ~(1 << PIN_FWD);
     2d6:	45 98       	cbi	0x08, 5	; 8
	PORTD |= (1 << PIN_BWD);
     2d8:	5c 9a       	sbi	0x0b, 4	; 11
 * Set compare value (PWM duty) for timer2
 * Params:
 *	compare_value: value to write to compare register (0-255)
 */
void Timer2_SetCounter(int compare_value){
	OCR2A = compare_value;
     2da:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <power>
     2de:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <power+0x1>
     2e2:	4e e6       	ldi	r20, 0x6E	; 110
     2e4:	42 9f       	mul	r20, r18
     2e6:	c0 01       	movw	r24, r0
     2e8:	43 9f       	mul	r20, r19
     2ea:	90 0d       	add	r25, r0
     2ec:	11 24       	eor	r1, r1
     2ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     2f2:	08 95       	ret

000002f4 <POWTR_Stop>:
     2f4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
/* POWTR_Stop
 * Set motor driver inputs and timer counter to 0
 */
void POWTR_Stop(){
	Timer2_SetCounter(0);
	PORTC &= ~(1 << PIN_FWD);
     2f8:	45 98       	cbi	0x08, 5	; 8
	PORTD &= ~(1 << PIN_BWD);
     2fa:	5c 98       	cbi	0x0b, 4	; 11
     2fc:	08 95       	ret

000002fe <POWTR_BlockDrivingForward>:
}

void POWTR_BlockDrivingForward(){
	block_forward = true;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <block_forward>
	POWTR_Stop();
     304:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <POWTR_Stop>
     308:	08 95       	ret

0000030a <POWTR_BlockDrivingBackward>:
}

void POWTR_BlockDrivingBackward(){
	block_backward = true;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	POWTR_Stop();
     310:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <POWTR_Stop>
     314:	08 95       	ret

00000316 <POWTR_UnblockDrivingForward>:
}

void POWTR_UnblockDrivingForward(){
	block_forward = false;
     316:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <block_forward>
     31a:	08 95       	ret

0000031c <POWTR_UnblockDrivingBackward>:
}

void POWTR_UnblockDrivingBackward(){
	block_backward = false;
     31c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
     320:	08 95       	ret

00000322 <POWTR_SendCommand>:
 * Params:
 *	command:	command from bluetooth module (of type enum command)
 *				related to powertrain
 */
void POWTR_SendCommand(enum commands command){
	switch(command){
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	87 30       	cpi	r24, 0x07	; 7
     326:	91 05       	cpc	r25, r1
     328:	08 f0       	brcs	.+2      	; 0x32c <POWTR_SendCommand+0xa>
     32a:	53 c0       	rjmp	.+166    	; 0x3d2 <POWTR_SendCommand+0xb0>
     32c:	fc 01       	movw	r30, r24
     32e:	e1 5a       	subi	r30, 0xA1	; 161
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__tablejump2__>
		case FORWARD:
			if(block_forward) break;
     336:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <block_forward>
     33a:	81 11       	cpse	r24, r1
     33c:	4a c0       	rjmp	.+148    	; 0x3d2 <POWTR_SendCommand+0xb0>
			car_state = DRV_FWD;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_NoTurn();
     344:	0e 94 59 01 	call	0x2b2	; 0x2b2 <POWTR_NoTurn>
			POWTR_DriveForward();
     348:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <POWTR_DriveForward>
			break;
     34c:	08 95       	ret
		case FORWARD_LEFT:
			if(block_forward) break;
     34e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <block_forward>
     352:	81 11       	cpse	r24, r1
     354:	3e c0       	rjmp	.+124    	; 0x3d2 <POWTR_SendCommand+0xb0>
			car_state = DRV_FWD_L;
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnLeft();
     35c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <POWTR_TurnLeft>
			POWTR_DriveForward();
     360:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <POWTR_DriveForward>
			break;
     364:	08 95       	ret
		case FORWARD_RIGHT:
			if(block_forward) break;
     366:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <block_forward>
     36a:	81 11       	cpse	r24, r1
     36c:	32 c0       	rjmp	.+100    	; 0x3d2 <POWTR_SendCommand+0xb0>
			car_state = DRV_FWD_R;
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnRight();
     374:	0e 94 56 01 	call	0x2ac	; 0x2ac <POWTR_TurnRight>
			POWTR_DriveForward();
     378:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <POWTR_DriveForward>
			break;
     37c:	08 95       	ret
		case BACKWARDS:
			if(block_backward) break;
     37e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     382:	81 11       	cpse	r24, r1
     384:	26 c0       	rjmp	.+76     	; 0x3d2 <POWTR_SendCommand+0xb0>
			car_state = DRV_BWD;
     386:	84 e0       	ldi	r24, 0x04	; 4
     388:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_NoTurn();
     38c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <POWTR_NoTurn>
			POWTR_DriveBackward();
     390:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <POWTR_DriveBackward>
			break;
     394:	08 95       	ret
		case BACKWARDS_LEFT:
			if(block_backward) break;
     396:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     39a:	81 11       	cpse	r24, r1
     39c:	1a c0       	rjmp	.+52     	; 0x3d2 <POWTR_SendCommand+0xb0>
			car_state = DRV_BWD_L;
     39e:	85 e0       	ldi	r24, 0x05	; 5
     3a0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnLeft();
     3a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <POWTR_TurnLeft>
			POWTR_DriveBackward();
     3a8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <POWTR_DriveBackward>
			break;
     3ac:	08 95       	ret
		case BACKWARDS_RIGHT:
			if(block_backward) break;
     3ae:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     3b2:	81 11       	cpse	r24, r1
     3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <POWTR_SendCommand+0xb0>
			car_state = DRV_BWD_R;
     3b6:	86 e0       	ldi	r24, 0x06	; 6
     3b8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <car_state>
			POWTR_TurnRight();
     3bc:	0e 94 56 01 	call	0x2ac	; 0x2ac <POWTR_TurnRight>
			POWTR_DriveBackward();
     3c0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <POWTR_DriveBackward>
			break;
     3c4:	08 95       	ret
		case NEUTRAL:
			car_state = STOPPED;
     3c6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <car_state>
			POWTR_NoTurn();
     3ca:	0e 94 59 01 	call	0x2b2	; 0x2b2 <POWTR_NoTurn>
			POWTR_Stop();
     3ce:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <POWTR_Stop>
     3d2:	08 95       	ret

000003d4 <SENS_Init>:
sr_04 *RR_proximity;
sr_04 *RL_proximity;
sr_04 *FR_proximity;
sr_04 *FL_proximity;

void SENS_Init(){	
     3d4:	8f 92       	push	r8
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
	// rear right proximity sensor
	RR_proximity = sensor_new(4, &DDRB, DDB1, &PORTB, PORTB1, &DDRB, DDB2, &PINB, PINB2);
     3e2:	68 94       	set
     3e4:	88 24       	eor	r8, r8
     3e6:	81 f8       	bld	r8, 1
     3e8:	0f 2e       	mov	r0, r31
     3ea:	f3 e2       	ldi	r31, 0x23	; 35
     3ec:	af 2e       	mov	r10, r31
     3ee:	b1 2c       	mov	r11, r1
     3f0:	f0 2d       	mov	r31, r0
     3f2:	68 94       	set
     3f4:	cc 24       	eor	r12, r12
     3f6:	c1 f8       	bld	r12, 1
     3f8:	0f 2e       	mov	r0, r31
     3fa:	f4 e2       	ldi	r31, 0x24	; 36
     3fc:	ef 2e       	mov	r14, r31
     3fe:	f1 2c       	mov	r15, r1
     400:	f0 2d       	mov	r31, r0
     402:	01 e0       	ldi	r16, 0x01	; 1
     404:	25 e2       	ldi	r18, 0x25	; 37
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	64 e2       	ldi	r22, 0x24	; 36
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	84 e0       	ldi	r24, 0x04	; 4
     410:	0e 94 e5 04 	call	0x9ca	; 0x9ca <sensor_new>
     414:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <RR_proximity+0x1>
     418:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <RR_proximity>
	// rear left proximity sensor
	RL_proximity = sensor_new(4, &DDRC, DDC3, &PORTC, PORTC3, &DDRC, DDC4, &PINC, PINC4);
     41c:	68 94       	set
     41e:	88 24       	eor	r8, r8
     420:	82 f8       	bld	r8, 2
     422:	0f 2e       	mov	r0, r31
     424:	f6 e2       	ldi	r31, 0x26	; 38
     426:	af 2e       	mov	r10, r31
     428:	b1 2c       	mov	r11, r1
     42a:	f0 2d       	mov	r31, r0
     42c:	68 94       	set
     42e:	cc 24       	eor	r12, r12
     430:	c2 f8       	bld	r12, 2
     432:	0f 2e       	mov	r0, r31
     434:	f7 e2       	ldi	r31, 0x27	; 39
     436:	ef 2e       	mov	r14, r31
     438:	f1 2c       	mov	r15, r1
     43a:	f0 2d       	mov	r31, r0
     43c:	03 e0       	ldi	r16, 0x03	; 3
     43e:	28 e2       	ldi	r18, 0x28	; 40
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	43 e0       	ldi	r20, 0x03	; 3
     444:	67 e2       	ldi	r22, 0x27	; 39
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <sensor_new>
     44e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <RL_proximity+0x1>
     452:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <RL_proximity>
	// front right proximity sensor
	FR_proximity = sensor_new(4, &DDRD, DDD3, &PORTD, PORTD3, &DDRD, DDD6, &PIND, PIND6);
     456:	0f 2e       	mov	r0, r31
     458:	f6 e0       	ldi	r31, 0x06	; 6
     45a:	8f 2e       	mov	r8, r31
     45c:	f0 2d       	mov	r31, r0
     45e:	0f 2e       	mov	r0, r31
     460:	f9 e2       	ldi	r31, 0x29	; 41
     462:	af 2e       	mov	r10, r31
     464:	b1 2c       	mov	r11, r1
     466:	f0 2d       	mov	r31, r0
     468:	0f 2e       	mov	r0, r31
     46a:	f6 e0       	ldi	r31, 0x06	; 6
     46c:	cf 2e       	mov	r12, r31
     46e:	f0 2d       	mov	r31, r0
     470:	0f 2e       	mov	r0, r31
     472:	fa e2       	ldi	r31, 0x2A	; 42
     474:	ef 2e       	mov	r14, r31
     476:	f1 2c       	mov	r15, r1
     478:	f0 2d       	mov	r31, r0
     47a:	2b e2       	ldi	r18, 0x2B	; 43
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	43 e0       	ldi	r20, 0x03	; 3
     480:	6a e2       	ldi	r22, 0x2A	; 42
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	0e 94 e5 04 	call	0x9ca	; 0x9ca <sensor_new>
     48a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <FR_proximity+0x1>
     48e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <FR_proximity>
	// front left proximity sensor
	FL_proximity = sensor_new(4, &DDRB, DDB5, &PORTB, PORTB5, &DDRB, DDB4, &PINB, PINB4);
     492:	68 94       	set
     494:	88 24       	eor	r8, r8
     496:	82 f8       	bld	r8, 2
     498:	0f 2e       	mov	r0, r31
     49a:	f3 e2       	ldi	r31, 0x23	; 35
     49c:	af 2e       	mov	r10, r31
     49e:	b1 2c       	mov	r11, r1
     4a0:	f0 2d       	mov	r31, r0
     4a2:	68 94       	set
     4a4:	cc 24       	eor	r12, r12
     4a6:	c2 f8       	bld	r12, 2
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f4 e2       	ldi	r31, 0x24	; 36
     4ac:	ef 2e       	mov	r14, r31
     4ae:	f1 2c       	mov	r15, r1
     4b0:	f0 2d       	mov	r31, r0
     4b2:	05 e0       	ldi	r16, 0x05	; 5
     4b4:	25 e2       	ldi	r18, 0x25	; 37
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	45 e0       	ldi	r20, 0x05	; 5
     4ba:	64 e2       	ldi	r22, 0x24	; 36
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	84 e0       	ldi	r24, 0x04	; 4
     4c0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <sensor_new>
     4c4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <FL_proximity+0x1>
     4c8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <FL_proximity>
}
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	cf 90       	pop	r12
     4d4:	bf 90       	pop	r11
     4d6:	af 90       	pop	r10
     4d8:	8f 90       	pop	r8
     4da:	08 95       	ret

000004dc <SENS_CheckForObstacles>:

void SENS_CheckForObstacles(int warn_distance, int critical_distance){
     4dc:	8f 92       	push	r8
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	8c 01       	movw	r16, r24
     4f6:	eb 01       	movw	r28, r22
	switch(car_state){
     4f8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <car_state>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	08 f4       	brcc	.+2      	; 0x502 <SENS_CheckForObstacles+0x26>
     500:	6c c0       	rjmp	.+216    	; 0x5da <SENS_CheckForObstacles+0xfe>
     502:	84 30       	cpi	r24, 0x04	; 4
     504:	18 f0       	brcs	.+6      	; 0x50c <SENS_CheckForObstacles+0x30>
     506:	87 30       	cpi	r24, 0x07	; 7
     508:	a8 f1       	brcs	.+106    	; 0x574 <SENS_CheckForObstacles+0x98>
     50a:	67 c0       	rjmp	.+206    	; 0x5da <SENS_CheckForObstacles+0xfe>
		case DRV_FWD:
		case DRV_FWD_L:
		case DRV_FWD_R:
			get_dist_mm(FL_proximity);
     50c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <FL_proximity>
     510:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <FL_proximity+0x1>
     514:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_dist_mm>
			get_dist_mm(FR_proximity);
     518:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FR_proximity>
     51c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <FR_proximity+0x1>
     520:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_dist_mm>
			CTRL_SendDistance((FL_proximity->_last_distance_mm)/10, (FR_proximity->_last_distance_mm)/10);
     524:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     528:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     52c:	60 81       	ld	r22, Z
     52e:	71 81       	ldd	r23, Z+1	; 0x01
     530:	82 81       	ldd	r24, Z+2	; 0x02
     532:	93 81       	ldd	r25, Z+3	; 0x03
     534:	0f 2e       	mov	r0, r31
     536:	fa e0       	ldi	r31, 0x0A	; 10
     538:	cf 2e       	mov	r12, r31
     53a:	d1 2c       	mov	r13, r1
     53c:	e1 2c       	mov	r14, r1
     53e:	f1 2c       	mov	r15, r1
     540:	f0 2d       	mov	r31, r0
     542:	a7 01       	movw	r20, r14
     544:	96 01       	movw	r18, r12
     546:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodsi4>
     54a:	49 01       	movw	r8, r18
     54c:	5a 01       	movw	r10, r20
     54e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     552:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     556:	60 81       	ld	r22, Z
     558:	71 81       	ldd	r23, Z+1	; 0x01
     55a:	82 81       	ldd	r24, Z+2	; 0x02
     55c:	93 81       	ldd	r25, Z+3	; 0x03
     55e:	a7 01       	movw	r20, r14
     560:	96 01       	movw	r18, r12
     562:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodsi4>
     566:	ca 01       	movw	r24, r20
     568:	b9 01       	movw	r22, r18
     56a:	a5 01       	movw	r20, r10
     56c:	94 01       	movw	r18, r8
     56e:	0e 94 8c 00 	call	0x118	; 0x118 <CTRL_SendDistance>
			break;
     572:	33 c0       	rjmp	.+102    	; 0x5da <SENS_CheckForObstacles+0xfe>
		case DRV_BWD:
		case DRV_BWD_L:
		case DRV_BWD_R:
			get_dist_mm(RL_proximity);
     574:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <RL_proximity>
     578:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <RL_proximity+0x1>
     57c:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_dist_mm>
			get_dist_mm(RR_proximity);
     580:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <RR_proximity>
     584:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <RR_proximity+0x1>
     588:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_dist_mm>
			CTRL_SendDistance((RL_proximity->_last_distance_mm)/10, (RR_proximity->_last_distance_mm)/10);
     58c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     590:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     594:	60 81       	ld	r22, Z
     596:	71 81       	ldd	r23, Z+1	; 0x01
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	93 81       	ldd	r25, Z+3	; 0x03
     59c:	0f 2e       	mov	r0, r31
     59e:	fa e0       	ldi	r31, 0x0A	; 10
     5a0:	cf 2e       	mov	r12, r31
     5a2:	d1 2c       	mov	r13, r1
     5a4:	e1 2c       	mov	r14, r1
     5a6:	f1 2c       	mov	r15, r1
     5a8:	f0 2d       	mov	r31, r0
     5aa:	a7 01       	movw	r20, r14
     5ac:	96 01       	movw	r18, r12
     5ae:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodsi4>
     5b2:	49 01       	movw	r8, r18
     5b4:	5a 01       	movw	r10, r20
     5b6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     5ba:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     5be:	60 81       	ld	r22, Z
     5c0:	71 81       	ldd	r23, Z+1	; 0x01
     5c2:	82 81       	ldd	r24, Z+2	; 0x02
     5c4:	93 81       	ldd	r25, Z+3	; 0x03
     5c6:	a7 01       	movw	r20, r14
     5c8:	96 01       	movw	r18, r12
     5ca:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodsi4>
     5ce:	ca 01       	movw	r24, r20
     5d0:	b9 01       	movw	r22, r18
     5d2:	a5 01       	movw	r20, r10
     5d4:	94 01       	movw	r18, r8
     5d6:	0e 94 8c 00 	call	0x118	; 0x118 <CTRL_SendDistance>
			break;
		default:
			break;
	}
	
	switch (car_state){
     5da:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <car_state>
     5de:	8e 2f       	mov	r24, r30
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	87 30       	cpi	r24, 0x07	; 7
     5e4:	91 05       	cpc	r25, r1
     5e6:	08 f0       	brcs	.+2      	; 0x5ea <SENS_CheckForObstacles+0x10e>
     5e8:	e3 c1       	rjmp	.+966    	; 0x9b0 <__stack+0xb1>
     5ea:	fc 01       	movw	r30, r24
     5ec:	ea 59       	subi	r30, 0x9A	; 154
     5ee:	ff 4f       	sbci	r31, 0xFF	; 255
     5f0:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__tablejump2__>
		case STOPPED:
			LnS_BuzzerSwitch(OFF);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
			break;
     5fc:	d9 c1       	rjmp	.+946    	; 0x9b0 <__stack+0xb1>
		case DRV_FWD:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     5fe:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     602:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     606:	40 81       	ld	r20, Z
     608:	51 81       	ldd	r21, Z+1	; 0x01
     60a:	62 81       	ldd	r22, Z+2	; 0x02
     60c:	73 81       	ldd	r23, Z+3	; 0x03
     60e:	ce 01       	movw	r24, r28
     610:	dd 0f       	add	r29, r29
     612:	aa 0b       	sbc	r26, r26
     614:	bb 0b       	sbc	r27, r27
     616:	84 17       	cp	r24, r20
     618:	95 07       	cpc	r25, r21
     61a:	a6 07       	cpc	r26, r22
     61c:	b7 07       	cpc	r27, r23
     61e:	68 f4       	brcc	.+26     	; 0x63a <SENS_CheckForObstacles+0x15e>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
     620:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     624:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     628:	c0 80       	ld	r12, Z
     62a:	d1 80       	ldd	r13, Z+1	; 0x01
     62c:	e2 80       	ldd	r14, Z+2	; 0x02
     62e:	f3 80       	ldd	r15, Z+3	; 0x03
	switch (car_state){
		case STOPPED:
			LnS_BuzzerSwitch(OFF);
			break;
		case DRV_FWD:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     630:	8c 15       	cp	r24, r12
     632:	9d 05       	cpc	r25, r13
     634:	ae 05       	cpc	r26, r14
     636:	bf 05       	cpc	r27, r15
     638:	38 f0       	brcs	.+14     	; 0x648 <SENS_CheckForObstacles+0x16c>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingForward();
     63a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <POWTR_BlockDrivingForward>
				LnS_BuzzerSwitch(ON);
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     646:	b4 c1       	rjmp	.+872    	; 0x9b0 <__stack+0xb1>
			} else if((FL_proximity->_last_distance_mm <= warn_distance) ||
     648:	01 2e       	mov	r0, r17
     64a:	00 0c       	add	r0, r0
     64c:	22 0b       	sbc	r18, r18
     64e:	33 0b       	sbc	r19, r19
     650:	04 17       	cp	r16, r20
     652:	15 07       	cpc	r17, r21
     654:	26 07       	cpc	r18, r22
     656:	37 07       	cpc	r19, r23
     658:	28 f4       	brcc	.+10     	; 0x664 <SENS_CheckForObstacles+0x188>
     65a:	0c 15       	cp	r16, r12
     65c:	1d 05       	cpc	r17, r13
     65e:	2e 05       	cpc	r18, r14
     660:	3f 05       	cpc	r19, r15
     662:	38 f0       	brcs	.+14     	; 0x672 <SENS_CheckForObstacles+0x196>
					  (FR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingForward();
     664:	0e 94 8b 01 	call	0x316	; 0x316 <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(ON);
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     670:	9f c1       	rjmp	.+830    	; 0x9b0 <__stack+0xb1>
			} else {
				POWTR_UnblockDrivingForward();
     672:	0e 94 8b 01 	call	0x316	; 0x316 <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(OFF);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     67e:	98 c1       	rjmp	.+816    	; 0x9b0 <__stack+0xb1>
			}
			break;
		case DRV_FWD_L:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     680:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     684:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     688:	c0 80       	ld	r12, Z
     68a:	d1 80       	ldd	r13, Z+1	; 0x01
     68c:	e2 80       	ldd	r14, Z+2	; 0x02
     68e:	f3 80       	ldd	r15, Z+3	; 0x03
     690:	ce 01       	movw	r24, r28
     692:	0d 2e       	mov	r0, r29
     694:	00 0c       	add	r0, r0
     696:	aa 0b       	sbc	r26, r26
     698:	bb 0b       	sbc	r27, r27
     69a:	8c 15       	cp	r24, r12
     69c:	9d 05       	cpc	r25, r13
     69e:	ae 05       	cpc	r26, r14
     6a0:	bf 05       	cpc	r27, r15
     6a2:	b8 f4       	brcc	.+46     	; 0x6d2 <SENS_CheckForObstacles+0x1f6>
			   (FR_proximity->_last_distance_mm <= critical_distance/2)){
     6a4:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     6a8:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     6ac:	40 81       	ld	r20, Z
     6ae:	51 81       	ldd	r21, Z+1	; 0x01
     6b0:	62 81       	ldd	r22, Z+2	; 0x02
     6b2:	73 81       	ldd	r23, Z+3	; 0x03
				POWTR_UnblockDrivingForward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_FWD_L:
			if((FL_proximity->_last_distance_mm <= critical_distance) ||
     6b4:	ce 01       	movw	r24, r28
     6b6:	dd 23       	and	r29, r29
     6b8:	0c f4       	brge	.+2      	; 0x6bc <SENS_CheckForObstacles+0x1e0>
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	95 95       	asr	r25
     6be:	87 95       	ror	r24
     6c0:	09 2e       	mov	r0, r25
     6c2:	00 0c       	add	r0, r0
     6c4:	aa 0b       	sbc	r26, r26
     6c6:	bb 0b       	sbc	r27, r27
     6c8:	84 17       	cp	r24, r20
     6ca:	95 07       	cpc	r25, r21
     6cc:	a6 07       	cpc	r26, r22
     6ce:	b7 07       	cpc	r27, r23
     6d0:	38 f0       	brcs	.+14     	; 0x6e0 <SENS_CheckForObstacles+0x204>
			   (FR_proximity->_last_distance_mm <= critical_distance/2)){
				POWTR_BlockDrivingForward();
     6d2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <POWTR_BlockDrivingForward>
				LnS_BuzzerSwitch(ON);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     6de:	68 c1       	rjmp	.+720    	; 0x9b0 <__stack+0xb1>
			} else if((FL_proximity->_last_distance_mm <= warn_distance) ||
     6e0:	c8 01       	movw	r24, r16
     6e2:	01 2e       	mov	r0, r17
     6e4:	00 0c       	add	r0, r0
     6e6:	aa 0b       	sbc	r26, r26
     6e8:	bb 0b       	sbc	r27, r27
     6ea:	8c 15       	cp	r24, r12
     6ec:	9d 05       	cpc	r25, r13
     6ee:	ae 05       	cpc	r26, r14
     6f0:	bf 05       	cpc	r27, r15
     6f2:	78 f4       	brcc	.+30     	; 0x712 <SENS_CheckForObstacles+0x236>
     6f4:	c8 01       	movw	r24, r16
     6f6:	99 23       	and	r25, r25
     6f8:	0c f4       	brge	.+2      	; 0x6fc <SENS_CheckForObstacles+0x220>
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	95 95       	asr	r25
     6fe:	87 95       	ror	r24
     700:	09 2e       	mov	r0, r25
     702:	00 0c       	add	r0, r0
     704:	aa 0b       	sbc	r26, r26
     706:	bb 0b       	sbc	r27, r27
     708:	84 17       	cp	r24, r20
     70a:	95 07       	cpc	r25, r21
     70c:	a6 07       	cpc	r26, r22
     70e:	b7 07       	cpc	r27, r23
     710:	38 f0       	brcs	.+14     	; 0x720 <SENS_CheckForObstacles+0x244>
					  (FR_proximity->_last_distance_mm <= warn_distance/2)){
				POWTR_UnblockDrivingForward();
     712:	0e 94 8b 01 	call	0x316	; 0x316 <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(ON);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     71e:	48 c1       	rjmp	.+656    	; 0x9b0 <__stack+0xb1>
			} else {
				POWTR_UnblockDrivingForward();
     720:	0e 94 8b 01 	call	0x316	; 0x316 <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(OFF);
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     72c:	41 c1       	rjmp	.+642    	; 0x9b0 <__stack+0xb1>
			}
			break;
		case DRV_FWD_R:
			if((FL_proximity->_last_distance_mm <= critical_distance/2) ||
     72e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FL_proximity>
     732:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FL_proximity+0x1>
     736:	40 81       	ld	r20, Z
     738:	51 81       	ldd	r21, Z+1	; 0x01
     73a:	62 81       	ldd	r22, Z+2	; 0x02
     73c:	73 81       	ldd	r23, Z+3	; 0x03
     73e:	ce 01       	movw	r24, r28
     740:	dd 23       	and	r29, r29
     742:	0c f4       	brge	.+2      	; 0x746 <SENS_CheckForObstacles+0x26a>
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	95 95       	asr	r25
     748:	87 95       	ror	r24
     74a:	09 2e       	mov	r0, r25
     74c:	00 0c       	add	r0, r0
     74e:	aa 0b       	sbc	r26, r26
     750:	bb 0b       	sbc	r27, r27
     752:	84 17       	cp	r24, r20
     754:	95 07       	cpc	r25, r21
     756:	a6 07       	cpc	r26, r22
     758:	b7 07       	cpc	r27, r23
     75a:	88 f4       	brcc	.+34     	; 0x77e <SENS_CheckForObstacles+0x2a2>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
     75c:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FR_proximity>
     760:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FR_proximity+0x1>
     764:	c0 80       	ld	r12, Z
     766:	d1 80       	ldd	r13, Z+1	; 0x01
     768:	e2 80       	ldd	r14, Z+2	; 0x02
     76a:	f3 80       	ldd	r15, Z+3	; 0x03
				POWTR_UnblockDrivingForward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_FWD_R:
			if((FL_proximity->_last_distance_mm <= critical_distance/2) ||
     76c:	ce 01       	movw	r24, r28
     76e:	dd 0f       	add	r29, r29
     770:	aa 0b       	sbc	r26, r26
     772:	bb 0b       	sbc	r27, r27
     774:	8c 15       	cp	r24, r12
     776:	9d 05       	cpc	r25, r13
     778:	ae 05       	cpc	r26, r14
     77a:	bf 05       	cpc	r27, r15
     77c:	38 f0       	brcs	.+14     	; 0x78c <SENS_CheckForObstacles+0x2b0>
			   (FR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingForward();
     77e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <POWTR_BlockDrivingForward>
				LnS_BuzzerSwitch(ON);
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     78a:	12 c1       	rjmp	.+548    	; 0x9b0 <__stack+0xb1>
			} else if((FL_proximity->_last_distance_mm <= warn_distance/2) ||
     78c:	c8 01       	movw	r24, r16
     78e:	11 23       	and	r17, r17
     790:	0c f4       	brge	.+2      	; 0x794 <SENS_CheckForObstacles+0x2b8>
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	95 95       	asr	r25
     796:	87 95       	ror	r24
     798:	09 2e       	mov	r0, r25
     79a:	00 0c       	add	r0, r0
     79c:	aa 0b       	sbc	r26, r26
     79e:	bb 0b       	sbc	r27, r27
     7a0:	84 17       	cp	r24, r20
     7a2:	95 07       	cpc	r25, r21
     7a4:	a6 07       	cpc	r26, r22
     7a6:	b7 07       	cpc	r27, r23
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <SENS_CheckForObstacles+0x2e0>
     7aa:	01 2e       	mov	r0, r17
     7ac:	00 0c       	add	r0, r0
     7ae:	22 0b       	sbc	r18, r18
     7b0:	33 0b       	sbc	r19, r19
     7b2:	0c 15       	cp	r16, r12
     7b4:	1d 05       	cpc	r17, r13
     7b6:	2e 05       	cpc	r18, r14
     7b8:	3f 05       	cpc	r19, r15
     7ba:	38 f0       	brcs	.+14     	; 0x7ca <SENS_CheckForObstacles+0x2ee>
					  (FR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingForward();
     7bc:	0e 94 8b 01 	call	0x316	; 0x316 <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(ON);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     7c8:	f3 c0       	rjmp	.+486    	; 0x9b0 <__stack+0xb1>
			} else {
				POWTR_UnblockDrivingForward();
     7ca:	0e 94 8b 01 	call	0x316	; 0x316 <POWTR_UnblockDrivingForward>
				LnS_BuzzerSwitch(OFF);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     7d6:	ec c0       	rjmp	.+472    	; 0x9b0 <__stack+0xb1>
			}
			break;
		case DRV_BWD:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     7d8:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     7dc:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     7e0:	40 81       	ld	r20, Z
     7e2:	51 81       	ldd	r21, Z+1	; 0x01
     7e4:	62 81       	ldd	r22, Z+2	; 0x02
     7e6:	73 81       	ldd	r23, Z+3	; 0x03
     7e8:	ce 01       	movw	r24, r28
     7ea:	dd 0f       	add	r29, r29
     7ec:	aa 0b       	sbc	r26, r26
     7ee:	bb 0b       	sbc	r27, r27
     7f0:	84 17       	cp	r24, r20
     7f2:	95 07       	cpc	r25, r21
     7f4:	a6 07       	cpc	r26, r22
     7f6:	b7 07       	cpc	r27, r23
     7f8:	68 f4       	brcc	.+26     	; 0x814 <SENS_CheckForObstacles+0x338>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
     7fa:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     7fe:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     802:	c0 80       	ld	r12, Z
     804:	d1 80       	ldd	r13, Z+1	; 0x01
     806:	e2 80       	ldd	r14, Z+2	; 0x02
     808:	f3 80       	ldd	r15, Z+3	; 0x03
				POWTR_UnblockDrivingForward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_BWD:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     80a:	8c 15       	cp	r24, r12
     80c:	9d 05       	cpc	r25, r13
     80e:	ae 05       	cpc	r26, r14
     810:	bf 05       	cpc	r27, r15
     812:	38 f0       	brcs	.+14     	; 0x822 <SENS_CheckForObstacles+0x346>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingBackward();
     814:	0e 94 85 01 	call	0x30a	; 0x30a <POWTR_BlockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     820:	c7 c0       	rjmp	.+398    	; 0x9b0 <__stack+0xb1>
			} else if((RL_proximity->_last_distance_mm <= warn_distance) ||
     822:	01 2e       	mov	r0, r17
     824:	00 0c       	add	r0, r0
     826:	22 0b       	sbc	r18, r18
     828:	33 0b       	sbc	r19, r19
     82a:	04 17       	cp	r16, r20
     82c:	15 07       	cpc	r17, r21
     82e:	26 07       	cpc	r18, r22
     830:	37 07       	cpc	r19, r23
     832:	28 f4       	brcc	.+10     	; 0x83e <SENS_CheckForObstacles+0x362>
     834:	0c 15       	cp	r16, r12
     836:	1d 05       	cpc	r17, r13
     838:	2e 05       	cpc	r18, r14
     83a:	3f 05       	cpc	r19, r15
     83c:	38 f0       	brcs	.+14     	; 0x84c <SENS_CheckForObstacles+0x370>
					  (RR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingBackward();
     83e:	0e 94 8e 01 	call	0x31c	; 0x31c <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     84a:	b2 c0       	rjmp	.+356    	; 0x9b0 <__stack+0xb1>
			} else {
				POWTR_UnblockDrivingBackward();
     84c:	0e 94 8e 01 	call	0x31c	; 0x31c <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(OFF);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     858:	ab c0       	rjmp	.+342    	; 0x9b0 <__stack+0xb1>
			}
			break;
		case DRV_BWD_L:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     85a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     85e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     862:	c0 80       	ld	r12, Z
     864:	d1 80       	ldd	r13, Z+1	; 0x01
     866:	e2 80       	ldd	r14, Z+2	; 0x02
     868:	f3 80       	ldd	r15, Z+3	; 0x03
     86a:	ce 01       	movw	r24, r28
     86c:	0d 2e       	mov	r0, r29
     86e:	00 0c       	add	r0, r0
     870:	aa 0b       	sbc	r26, r26
     872:	bb 0b       	sbc	r27, r27
     874:	8c 15       	cp	r24, r12
     876:	9d 05       	cpc	r25, r13
     878:	ae 05       	cpc	r26, r14
     87a:	bf 05       	cpc	r27, r15
     87c:	b8 f4       	brcc	.+46     	; 0x8ac <SENS_CheckForObstacles+0x3d0>
			   (RR_proximity->_last_distance_mm <= critical_distance/2)){
     87e:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     882:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     886:	40 81       	ld	r20, Z
     888:	51 81       	ldd	r21, Z+1	; 0x01
     88a:	62 81       	ldd	r22, Z+2	; 0x02
     88c:	73 81       	ldd	r23, Z+3	; 0x03
				POWTR_UnblockDrivingBackward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_BWD_L:
			if((RL_proximity->_last_distance_mm <= critical_distance) ||
     88e:	ce 01       	movw	r24, r28
     890:	dd 23       	and	r29, r29
     892:	0c f4       	brge	.+2      	; 0x896 <SENS_CheckForObstacles+0x3ba>
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	95 95       	asr	r25
     898:	87 95       	ror	r24
     89a:	09 2e       	mov	r0, r25
     89c:	00 0c       	add	r0, r0
     89e:	aa 0b       	sbc	r26, r26
     8a0:	bb 0b       	sbc	r27, r27
     8a2:	84 17       	cp	r24, r20
     8a4:	95 07       	cpc	r25, r21
     8a6:	a6 07       	cpc	r26, r22
     8a8:	b7 07       	cpc	r27, r23
     8aa:	38 f0       	brcs	.+14     	; 0x8ba <SENS_CheckForObstacles+0x3de>
			   (RR_proximity->_last_distance_mm <= critical_distance/2)){
				POWTR_BlockDrivingBackward();
     8ac:	0e 94 85 01 	call	0x30a	; 0x30a <POWTR_BlockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     8b8:	7b c0       	rjmp	.+246    	; 0x9b0 <__stack+0xb1>
			} else if((RL_proximity->_last_distance_mm <= warn_distance) ||
     8ba:	c8 01       	movw	r24, r16
     8bc:	01 2e       	mov	r0, r17
     8be:	00 0c       	add	r0, r0
     8c0:	aa 0b       	sbc	r26, r26
     8c2:	bb 0b       	sbc	r27, r27
     8c4:	8c 15       	cp	r24, r12
     8c6:	9d 05       	cpc	r25, r13
     8c8:	ae 05       	cpc	r26, r14
     8ca:	bf 05       	cpc	r27, r15
     8cc:	78 f4       	brcc	.+30     	; 0x8ec <SENS_CheckForObstacles+0x410>
     8ce:	c8 01       	movw	r24, r16
     8d0:	99 23       	and	r25, r25
     8d2:	0c f4       	brge	.+2      	; 0x8d6 <SENS_CheckForObstacles+0x3fa>
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	09 2e       	mov	r0, r25
     8dc:	00 0c       	add	r0, r0
     8de:	aa 0b       	sbc	r26, r26
     8e0:	bb 0b       	sbc	r27, r27
     8e2:	84 17       	cp	r24, r20
     8e4:	95 07       	cpc	r25, r21
     8e6:	a6 07       	cpc	r26, r22
     8e8:	b7 07       	cpc	r27, r23
     8ea:	38 f0       	brcs	.+14     	; 0x8fa <SENS_CheckForObstacles+0x41e>
					  (RR_proximity->_last_distance_mm <= warn_distance/2)){
				POWTR_UnblockDrivingBackward();
     8ec:	0e 94 8e 01 	call	0x31c	; 0x31c <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     8f8:	5b c0       	rjmp	.+182    	; 0x9b0 <__stack+0xb1>
			} else {
				POWTR_UnblockDrivingBackward();
     8fa:	0e 94 8e 01 	call	0x31c	; 0x31c <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(OFF);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     906:	54 c0       	rjmp	.+168    	; 0x9b0 <__stack+0xb1>
			}
			break;
		case DRV_BWD_R:
			if((RL_proximity->_last_distance_mm <= critical_distance/2) ||
     908:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <RL_proximity>
     90c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <RL_proximity+0x1>
     910:	40 81       	ld	r20, Z
     912:	51 81       	ldd	r21, Z+1	; 0x01
     914:	62 81       	ldd	r22, Z+2	; 0x02
     916:	73 81       	ldd	r23, Z+3	; 0x03
     918:	ce 01       	movw	r24, r28
     91a:	dd 23       	and	r29, r29
     91c:	0c f4       	brge	.+2      	; 0x920 <__stack+0x21>
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	95 95       	asr	r25
     922:	87 95       	ror	r24
     924:	09 2e       	mov	r0, r25
     926:	00 0c       	add	r0, r0
     928:	aa 0b       	sbc	r26, r26
     92a:	bb 0b       	sbc	r27, r27
     92c:	84 17       	cp	r24, r20
     92e:	95 07       	cpc	r25, r21
     930:	a6 07       	cpc	r26, r22
     932:	b7 07       	cpc	r27, r23
     934:	88 f4       	brcc	.+34     	; 0x958 <__stack+0x59>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
     936:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <RR_proximity>
     93a:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <RR_proximity+0x1>
     93e:	c0 80       	ld	r12, Z
     940:	d1 80       	ldd	r13, Z+1	; 0x01
     942:	e2 80       	ldd	r14, Z+2	; 0x02
     944:	f3 80       	ldd	r15, Z+3	; 0x03
				POWTR_UnblockDrivingBackward();
				LnS_BuzzerSwitch(OFF);
			}
			break;
		case DRV_BWD_R:
			if((RL_proximity->_last_distance_mm <= critical_distance/2) ||
     946:	ce 01       	movw	r24, r28
     948:	dd 0f       	add	r29, r29
     94a:	aa 0b       	sbc	r26, r26
     94c:	bb 0b       	sbc	r27, r27
     94e:	8c 15       	cp	r24, r12
     950:	9d 05       	cpc	r25, r13
     952:	ae 05       	cpc	r26, r14
     954:	bf 05       	cpc	r27, r15
     956:	38 f0       	brcs	.+14     	; 0x966 <__stack+0x67>
			   (RR_proximity->_last_distance_mm <= critical_distance)){
				POWTR_BlockDrivingBackward();
     958:	0e 94 85 01 	call	0x30a	; 0x30a <POWTR_BlockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     964:	25 c0       	rjmp	.+74     	; 0x9b0 <__stack+0xb1>
			} else if((RL_proximity->_last_distance_mm <= warn_distance/2) ||
     966:	c8 01       	movw	r24, r16
     968:	11 23       	and	r17, r17
     96a:	0c f4       	brge	.+2      	; 0x96e <__stack+0x6f>
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	95 95       	asr	r25
     970:	87 95       	ror	r24
     972:	09 2e       	mov	r0, r25
     974:	00 0c       	add	r0, r0
     976:	aa 0b       	sbc	r26, r26
     978:	bb 0b       	sbc	r27, r27
     97a:	84 17       	cp	r24, r20
     97c:	95 07       	cpc	r25, r21
     97e:	a6 07       	cpc	r26, r22
     980:	b7 07       	cpc	r27, r23
     982:	48 f4       	brcc	.+18     	; 0x996 <__stack+0x97>
     984:	01 2e       	mov	r0, r17
     986:	00 0c       	add	r0, r0
     988:	22 0b       	sbc	r18, r18
     98a:	33 0b       	sbc	r19, r19
     98c:	0c 15       	cp	r16, r12
     98e:	1d 05       	cpc	r17, r13
     990:	2e 05       	cpc	r18, r14
     992:	3f 05       	cpc	r19, r15
     994:	38 f0       	brcs	.+14     	; 0x9a4 <__stack+0xa5>
					  (RR_proximity->_last_distance_mm <= warn_distance)){
				POWTR_UnblockDrivingBackward();
     996:	0e 94 8e 01 	call	0x31c	; 0x31c <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(ON);
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
     9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__stack+0xb1>
			} else {
				POWTR_UnblockDrivingBackward();
     9a4:	0e 94 8e 01 	call	0x31c	; 0x31c <POWTR_UnblockDrivingBackward>
				LnS_BuzzerSwitch(OFF);
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LnS_BuzzerSwitch>
			}
			break;
		default:
			break;
	}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
     9c0:	bf 90       	pop	r11
     9c2:	af 90       	pop	r10
     9c4:	9f 90       	pop	r9
     9c6:	8f 90       	pop	r8
     9c8:	08 95       	ret

000009ca <sensor_new>:
  TCCR1B &= ~((1 << CS12)|(1 << CS11)|(1 << CS10));
}

int calculate_distance_mm(uint16_t duration) {
  return (unsigned long)((double)duration * 0.686);
}
     9ca:	4f 92       	push	r4
     9cc:	5f 92       	push	r5
     9ce:	6f 92       	push	r6
     9d0:	7f 92       	push	r7
     9d2:	8f 92       	push	r8
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	18 2f       	mov	r17, r24
     9ee:	2b 01       	movw	r4, r22
     9f0:	d4 2e       	mov	r13, r20
     9f2:	39 01       	movw	r6, r18
     9f4:	83 e1       	ldi	r24, 0x13	; 19
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 8c 07 	call	0xf18	; 0xf18 <malloc>
     9fc:	fc 01       	movw	r30, r24
     9fe:	d2 01       	movw	r26, r4
     a00:	4c 91       	ld	r20, X
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	9c 01       	movw	r18, r24
     a08:	0d 2c       	mov	r0, r13
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <sensor_new+0x46>
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	0a 94       	dec	r0
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <sensor_new+0x42>
     a14:	24 2b       	or	r18, r20
     a16:	2c 93       	st	X, r18
     a18:	d3 01       	movw	r26, r6
     a1a:	4c 91       	ld	r20, X
     a1c:	9c 01       	movw	r18, r24
     a1e:	00 2e       	mov	r0, r16
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <sensor_new+0x5c>
     a22:	22 0f       	add	r18, r18
     a24:	33 1f       	adc	r19, r19
     a26:	0a 94       	dec	r0
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <sensor_new+0x58>
     a2a:	24 23       	and	r18, r20
     a2c:	2c 93       	st	X, r18
     a2e:	d7 01       	movw	r26, r14
     a30:	2c 91       	ld	r18, X
     a32:	0c 2c       	mov	r0, r12
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <sensor_new+0x70>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	0a 94       	dec	r0
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <sensor_new+0x6c>
     a3e:	80 95       	com	r24
     a40:	82 23       	and	r24, r18
     a42:	8c 93       	st	X, r24
     a44:	a0 e8       	ldi	r26, 0x80	; 128
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	8c 91       	ld	r24, X
     a4a:	1c 92       	st	X, r1
     a4c:	16 83       	std	Z+6, r17	; 0x06
     a4e:	50 86       	std	Z+8, r5	; 0x08
     a50:	47 82       	std	Z+7, r4	; 0x07
     a52:	d1 86       	std	Z+9, r13	; 0x09
     a54:	73 86       	std	Z+11, r7	; 0x0b
     a56:	62 86       	std	Z+10, r6	; 0x0a
     a58:	04 87       	std	Z+12, r16	; 0x0c
     a5a:	f6 86       	std	Z+14, r15	; 0x0e
     a5c:	e5 86       	std	Z+13, r14	; 0x0d
     a5e:	c7 86       	std	Z+15, r12	; 0x0f
     a60:	b1 8a       	std	Z+17, r11	; 0x11
     a62:	a0 8a       	std	Z+16, r10	; 0x10
     a64:	82 8a       	std	Z+18, r8	; 0x12
     a66:	15 82       	std	Z+5, r1	; 0x05
     a68:	14 82       	std	Z+4, r1	; 0x04
     a6a:	10 82       	st	Z, r1
     a6c:	11 82       	std	Z+1, r1	; 0x01
     a6e:	12 82       	std	Z+2, r1	; 0x02
     a70:	13 82       	std	Z+3, r1	; 0x03
     a72:	cf 01       	movw	r24, r30
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	8f 90       	pop	r8
     a8a:	7f 90       	pop	r7
     a8c:	6f 90       	pop	r6
     a8e:	5f 90       	pop	r5
     a90:	4f 90       	pop	r4
     a92:	08 95       	ret

00000a94 <set_trig_high>:
     a94:	dc 01       	movw	r26, r24
     a96:	1a 96       	adiw	r26, 0x0a	; 10
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	1b 97       	sbiw	r26, 0x0b	; 11
     a9e:	40 81       	ld	r20, Z
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	c9 01       	movw	r24, r18
     aa6:	1c 96       	adiw	r26, 0x0c	; 12
     aa8:	0c 90       	ld	r0, X
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <set_trig_high+0x1c>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	0a 94       	dec	r0
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <set_trig_high+0x18>
     ab4:	84 2b       	or	r24, r20
     ab6:	80 83       	st	Z, r24
     ab8:	08 95       	ret

00000aba <set_trig_low>:
     aba:	dc 01       	movw	r26, r24
     abc:	1a 96       	adiw	r26, 0x0a	; 10
     abe:	ed 91       	ld	r30, X+
     ac0:	fc 91       	ld	r31, X
     ac2:	1b 97       	sbiw	r26, 0x0b	; 11
     ac4:	40 81       	ld	r20, Z
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	b9 01       	movw	r22, r18
     acc:	1c 96       	adiw	r26, 0x0c	; 12
     ace:	0c 90       	ld	r0, X
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <set_trig_low+0x1c>
     ad2:	66 0f       	add	r22, r22
     ad4:	77 1f       	adc	r23, r23
     ad6:	0a 94       	dec	r0
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <set_trig_low+0x18>
     ada:	cb 01       	movw	r24, r22
     adc:	80 95       	com	r24
     ade:	84 23       	and	r24, r20
     ae0:	80 83       	st	Z, r24
     ae2:	08 95       	ret

00000ae4 <measure_duration>:
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	ec 01       	movw	r28, r24
     aea:	0e 94 5d 05 	call	0xaba	; 0xaba <set_trig_low>
     aee:	8a e0       	ldi	r24, 0x0A	; 10
     af0:	8a 95       	dec	r24
     af2:	f1 f7       	brne	.-4      	; 0xaf0 <measure_duration+0xc>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <measure_duration+0x12>
     af6:	ce 01       	movw	r24, r28
     af8:	0e 94 4a 05 	call	0xa94	; 0xa94 <set_trig_high>
     afc:	85 e3       	ldi	r24, 0x35	; 53
     afe:	8a 95       	dec	r24
     b00:	f1 f7       	brne	.-4      	; 0xafe <measure_duration+0x1a>
     b02:	00 00       	nop
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 5d 05 	call	0xaba	; 0xaba <set_trig_low>
     b0a:	e8 89       	ldd	r30, Y+16	; 0x10
     b0c:	f9 89       	ldd	r31, Y+17	; 0x11
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	0a 88       	ldd	r0, Y+18	; 0x12
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <measure_duration+0x36>
     b16:	22 0f       	add	r18, r18
     b18:	33 1f       	adc	r19, r19
     b1a:	0a 94       	dec	r0
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <measure_duration+0x32>
     b1e:	80 81       	ld	r24, Z
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	82 23       	and	r24, r18
     b24:	93 23       	and	r25, r19
     b26:	89 2b       	or	r24, r25
     b28:	d1 f3       	breq	.-12     	; 0xb1e <measure_duration+0x3a>
     b2a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b2e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b32:	e1 e8       	ldi	r30, 0x81	; 129
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	83 60       	ori	r24, 0x03	; 3
     b3a:	80 83       	st	Z, r24
     b3c:	e8 89       	ldd	r30, Y+16	; 0x10
     b3e:	f9 89       	ldd	r31, Y+17	; 0x11
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	0a 88       	ldd	r0, Y+18	; 0x12
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <measure_duration+0x68>
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	0a 94       	dec	r0
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <measure_duration+0x64>
     b50:	80 81       	ld	r24, Z
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	82 23       	and	r24, r18
     b56:	93 23       	and	r25, r19
     b58:	89 2b       	or	r24, r25
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <measure_duration+0x6c>
     b5c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b60:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b64:	9d 83       	std	Y+5, r25	; 0x05
     b66:	8c 83       	std	Y+4, r24	; 0x04
     b68:	e1 e8       	ldi	r30, 0x81	; 129
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	88 7f       	andi	r24, 0xF8	; 248
     b70:	80 83       	st	Z, r24
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <get_dist_mm>:

int get_dist_mm(sr_04 *sensor) {
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	ec 01       	movw	r28, r24
  measure_duration(sensor);
     b82:	0e 94 72 05 	call	0xae4	; 0xae4 <measure_duration>
  // stop timer
  TCCR1B &= ~((1 << CS12)|(1 << CS11)|(1 << CS10));
}

int calculate_distance_mm(uint16_t duration) {
  return (unsigned long)((double)duration * 0.686);
     b86:	6c 81       	ldd	r22, Y+4	; 0x04
     b88:	7d 81       	ldd	r23, Y+5	; 0x05
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__floatunsisf>
     b92:	22 eb       	ldi	r18, 0xB2	; 178
     b94:	3d e9       	ldi	r19, 0x9D	; 157
     b96:	4f e2       	ldi	r20, 0x2F	; 47
     b98:	5f e3       	ldi	r21, 0x3F	; 63
     b9a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__mulsf3>
     b9e:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fixunssfsi>
}

int get_dist_mm(sr_04 *sensor) {
  measure_duration(sensor);
  sensor->_last_distance_mm = calculate_distance_mm(sensor->_last_duration);
     ba2:	8b 01       	movw	r16, r22
     ba4:	07 2e       	mov	r0, r23
     ba6:	00 0c       	add	r0, r0
     ba8:	22 0b       	sbc	r18, r18
     baa:	33 0b       	sbc	r19, r19
     bac:	08 83       	st	Y, r16
     bae:	19 83       	std	Y+1, r17	; 0x01
     bb0:	2a 83       	std	Y+2, r18	; 0x02
     bb2:	3b 83       	std	Y+3, r19	; 0x03

  return sensor->_last_distance_mm;
}
     bb4:	cb 01       	movw	r24, r22
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <UART_init>:
#include <avr/io.h>
#include <stdbool.h>

#define F_CPU 16000000UL

void UART_init(unsigned int baud, bool RX, bool TX){
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	d6 2f       	mov	r29, r22
     bc6:	c4 2f       	mov	r28, r20
	unsigned int baudrate;
	baudrate = (((F_CPU / (baud * 16UL))) - 1);
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	aa 1f       	adc	r26, r26
     bd2:	bb 1f       	adc	r27, r27
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	aa 1f       	adc	r26, r26
     bda:	bb 1f       	adc	r27, r27
     bdc:	9c 01       	movw	r18, r24
     bde:	ad 01       	movw	r20, r26
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	44 1f       	adc	r20, r20
     be6:	55 1f       	adc	r21, r21
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	74 e2       	ldi	r23, 0x24	; 36
     bf4:	84 ef       	ldi	r24, 0xF4	; 244
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 64 07 	call	0xec8	; 0xec8 <__udivmodsi4>
     bfc:	21 50       	subi	r18, 0x01	; 1
     bfe:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(baudrate >> 8);
     c00:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)baudrate;
     c04:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// parity bits
	//UCSR0C |= 1 << UPM01; // 1 parity bit
	
	// data bits
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     c08:	e2 ec       	ldi	r30, 0xC2	; 194
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	86 60       	ori	r24, 0x06	; 6
     c10:	80 83       	st	Z, r24
	
	// 1 stopbit is default

	if(RX) {
     c12:	dd 23       	and	r29, r29
     c14:	29 f0       	breq	.+10     	; 0xc20 <UART_init+0x60>
		UCSR0B |= 1<<RXEN0;
     c16:	e1 ec       	ldi	r30, 0xC1	; 193
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	80 61       	ori	r24, 0x10	; 16
     c1e:	80 83       	st	Z, r24
	}
	
	if(TX) {
     c20:	cc 23       	and	r28, r28
     c22:	29 f0       	breq	.+10     	; 0xc2e <UART_init+0x6e>
		UCSR0B |= 1<<TXEN0;
     c24:	e1 ec       	ldi	r30, 0xC1	; 193
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 60       	ori	r24, 0x08	; 8
     c2c:	80 83       	st	Z, r24
	}
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <UART_send>:

void UART_send( unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
     c34:	e0 ec       	ldi	r30, 0xC0	; 192
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	90 81       	ld	r25, Z
     c3a:	95 ff       	sbrs	r25, 5
     c3c:	fd cf       	rjmp	.-6      	; 0xc38 <UART_send+0x4>
	UDR0 = data;
     c3e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c42:	08 95       	ret

00000c44 <UART_putstring>:
}

void UART_putstring(char* StringPtr){
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
     c4a:	88 81       	ld	r24, Y
     c4c:	88 23       	and	r24, r24
     c4e:	31 f0       	breq	.+12     	; 0xc5c <UART_putstring+0x18>
     c50:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_send(*StringPtr);
     c52:	0e 94 1a 06 	call	0xc34	; 0xc34 <UART_send>
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void UART_putstring(char* StringPtr){
	while(*StringPtr != 0x00)
     c56:	89 91       	ld	r24, Y+
     c58:	81 11       	cpse	r24, r1
     c5a:	fb cf       	rjmp	.-10     	; 0xc52 <UART_putstring+0xe>
	{
		UART_send(*StringPtr);
		StringPtr++;
	}
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <UART_available>:

bool UART_available(){
	return (UCSR0A & (1<<RXC0));
     c62:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}
     c66:	88 1f       	adc	r24, r24
     c68:	88 27       	eor	r24, r24
     c6a:	88 1f       	adc	r24, r24
     c6c:	08 95       	ret

00000c6e <UART_read>:

unsigned char UART_read(){
	return UDR0;
     c6e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c72:	08 95       	ret

00000c74 <__fixunssfsi>:
     c74:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_splitA>
     c78:	88 f0       	brcs	.+34     	; 0xc9c <__fixunssfsi+0x28>
     c7a:	9f 57       	subi	r25, 0x7F	; 127
     c7c:	98 f0       	brcs	.+38     	; 0xca4 <__fixunssfsi+0x30>
     c7e:	b9 2f       	mov	r27, r25
     c80:	99 27       	eor	r25, r25
     c82:	b7 51       	subi	r27, 0x17	; 23
     c84:	b0 f0       	brcs	.+44     	; 0xcb2 <__fixunssfsi+0x3e>
     c86:	e1 f0       	breq	.+56     	; 0xcc0 <__fixunssfsi+0x4c>
     c88:	66 0f       	add	r22, r22
     c8a:	77 1f       	adc	r23, r23
     c8c:	88 1f       	adc	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	1a f0       	brmi	.+6      	; 0xc98 <__fixunssfsi+0x24>
     c92:	ba 95       	dec	r27
     c94:	c9 f7       	brne	.-14     	; 0xc88 <__fixunssfsi+0x14>
     c96:	14 c0       	rjmp	.+40     	; 0xcc0 <__fixunssfsi+0x4c>
     c98:	b1 30       	cpi	r27, 0x01	; 1
     c9a:	91 f0       	breq	.+36     	; 0xcc0 <__fixunssfsi+0x4c>
     c9c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__fp_zero>
     ca0:	b1 e0       	ldi	r27, 0x01	; 1
     ca2:	08 95       	ret
     ca4:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__fp_zero>
     ca8:	67 2f       	mov	r22, r23
     caa:	78 2f       	mov	r23, r24
     cac:	88 27       	eor	r24, r24
     cae:	b8 5f       	subi	r27, 0xF8	; 248
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <__fixunssfsi+0x4c>
     cb2:	b9 3f       	cpi	r27, 0xF9	; 249
     cb4:	cc f3       	brlt	.-14     	; 0xca8 <__fixunssfsi+0x34>
     cb6:	86 95       	lsr	r24
     cb8:	77 95       	ror	r23
     cba:	67 95       	ror	r22
     cbc:	b3 95       	inc	r27
     cbe:	d9 f7       	brne	.-10     	; 0xcb6 <__fixunssfsi+0x42>
     cc0:	3e f4       	brtc	.+14     	; 0xcd0 <__fixunssfsi+0x5c>
     cc2:	90 95       	com	r25
     cc4:	80 95       	com	r24
     cc6:	70 95       	com	r23
     cc8:	61 95       	neg	r22
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	8f 4f       	sbci	r24, 0xFF	; 255
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	08 95       	ret

00000cd2 <__floatunsisf>:
     cd2:	e8 94       	clt
     cd4:	09 c0       	rjmp	.+18     	; 0xce8 <__floatsisf+0x12>

00000cd6 <__floatsisf>:
     cd6:	97 fb       	bst	r25, 7
     cd8:	3e f4       	brtc	.+14     	; 0xce8 <__floatsisf+0x12>
     cda:	90 95       	com	r25
     cdc:	80 95       	com	r24
     cde:	70 95       	com	r23
     ce0:	61 95       	neg	r22
     ce2:	7f 4f       	sbci	r23, 0xFF	; 255
     ce4:	8f 4f       	sbci	r24, 0xFF	; 255
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	99 23       	and	r25, r25
     cea:	a9 f0       	breq	.+42     	; 0xd16 <__floatsisf+0x40>
     cec:	f9 2f       	mov	r31, r25
     cee:	96 e9       	ldi	r25, 0x96	; 150
     cf0:	bb 27       	eor	r27, r27
     cf2:	93 95       	inc	r25
     cf4:	f6 95       	lsr	r31
     cf6:	87 95       	ror	r24
     cf8:	77 95       	ror	r23
     cfa:	67 95       	ror	r22
     cfc:	b7 95       	ror	r27
     cfe:	f1 11       	cpse	r31, r1
     d00:	f8 cf       	rjmp	.-16     	; 0xcf2 <__floatsisf+0x1c>
     d02:	fa f4       	brpl	.+62     	; 0xd42 <__floatsisf+0x6c>
     d04:	bb 0f       	add	r27, r27
     d06:	11 f4       	brne	.+4      	; 0xd0c <__floatsisf+0x36>
     d08:	60 ff       	sbrs	r22, 0
     d0a:	1b c0       	rjmp	.+54     	; 0xd42 <__floatsisf+0x6c>
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	8f 4f       	sbci	r24, 0xFF	; 255
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	16 c0       	rjmp	.+44     	; 0xd42 <__floatsisf+0x6c>
     d16:	88 23       	and	r24, r24
     d18:	11 f0       	breq	.+4      	; 0xd1e <__floatsisf+0x48>
     d1a:	96 e9       	ldi	r25, 0x96	; 150
     d1c:	11 c0       	rjmp	.+34     	; 0xd40 <__floatsisf+0x6a>
     d1e:	77 23       	and	r23, r23
     d20:	21 f0       	breq	.+8      	; 0xd2a <__floatsisf+0x54>
     d22:	9e e8       	ldi	r25, 0x8E	; 142
     d24:	87 2f       	mov	r24, r23
     d26:	76 2f       	mov	r23, r22
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <__floatsisf+0x5e>
     d2a:	66 23       	and	r22, r22
     d2c:	71 f0       	breq	.+28     	; 0xd4a <__floatsisf+0x74>
     d2e:	96 e8       	ldi	r25, 0x86	; 134
     d30:	86 2f       	mov	r24, r22
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	2a f0       	brmi	.+10     	; 0xd42 <__floatsisf+0x6c>
     d38:	9a 95       	dec	r25
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	da f7       	brpl	.-10     	; 0xd38 <__floatsisf+0x62>
     d42:	88 0f       	add	r24, r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	97 f9       	bld	r25, 7
     d4a:	08 95       	ret

00000d4c <__fp_split3>:
     d4c:	57 fd       	sbrc	r21, 7
     d4e:	90 58       	subi	r25, 0x80	; 128
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	59 f0       	breq	.+22     	; 0xd6c <__fp_splitA+0x10>
     d56:	5f 3f       	cpi	r21, 0xFF	; 255
     d58:	71 f0       	breq	.+28     	; 0xd76 <__fp_splitA+0x1a>
     d5a:	47 95       	ror	r20

00000d5c <__fp_splitA>:
     d5c:	88 0f       	add	r24, r24
     d5e:	97 fb       	bst	r25, 7
     d60:	99 1f       	adc	r25, r25
     d62:	61 f0       	breq	.+24     	; 0xd7c <__fp_splitA+0x20>
     d64:	9f 3f       	cpi	r25, 0xFF	; 255
     d66:	79 f0       	breq	.+30     	; 0xd86 <__fp_splitA+0x2a>
     d68:	87 95       	ror	r24
     d6a:	08 95       	ret
     d6c:	12 16       	cp	r1, r18
     d6e:	13 06       	cpc	r1, r19
     d70:	14 06       	cpc	r1, r20
     d72:	55 1f       	adc	r21, r21
     d74:	f2 cf       	rjmp	.-28     	; 0xd5a <__fp_split3+0xe>
     d76:	46 95       	lsr	r20
     d78:	f1 df       	rcall	.-30     	; 0xd5c <__fp_splitA>
     d7a:	08 c0       	rjmp	.+16     	; 0xd8c <__fp_splitA+0x30>
     d7c:	16 16       	cp	r1, r22
     d7e:	17 06       	cpc	r1, r23
     d80:	18 06       	cpc	r1, r24
     d82:	99 1f       	adc	r25, r25
     d84:	f1 cf       	rjmp	.-30     	; 0xd68 <__fp_splitA+0xc>
     d86:	86 95       	lsr	r24
     d88:	71 05       	cpc	r23, r1
     d8a:	61 05       	cpc	r22, r1
     d8c:	08 94       	sec
     d8e:	08 95       	ret

00000d90 <__fp_zero>:
     d90:	e8 94       	clt

00000d92 <__fp_szero>:
     d92:	bb 27       	eor	r27, r27
     d94:	66 27       	eor	r22, r22
     d96:	77 27       	eor	r23, r23
     d98:	cb 01       	movw	r24, r22
     d9a:	97 f9       	bld	r25, 7
     d9c:	08 95       	ret

00000d9e <__mulsf3>:
     d9e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__mulsf3x>
     da2:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_round>
     da6:	0e 94 45 07 	call	0xe8a	; 0xe8a <__fp_pscA>
     daa:	38 f0       	brcs	.+14     	; 0xdba <__mulsf3+0x1c>
     dac:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_pscB>
     db0:	20 f0       	brcs	.+8      	; 0xdba <__mulsf3+0x1c>
     db2:	95 23       	and	r25, r21
     db4:	11 f0       	breq	.+4      	; 0xdba <__mulsf3+0x1c>
     db6:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_inf>
     dba:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_nan>
     dbe:	11 24       	eor	r1, r1
     dc0:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_szero>

00000dc4 <__mulsf3x>:
     dc4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_split3>
     dc8:	70 f3       	brcs	.-36     	; 0xda6 <__mulsf3+0x8>

00000dca <__mulsf3_pse>:
     dca:	95 9f       	mul	r25, r21
     dcc:	c1 f3       	breq	.-16     	; 0xdbe <__mulsf3+0x20>
     dce:	95 0f       	add	r25, r21
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	55 1f       	adc	r21, r21
     dd4:	62 9f       	mul	r22, r18
     dd6:	f0 01       	movw	r30, r0
     dd8:	72 9f       	mul	r23, r18
     dda:	bb 27       	eor	r27, r27
     ddc:	f0 0d       	add	r31, r0
     dde:	b1 1d       	adc	r27, r1
     de0:	63 9f       	mul	r22, r19
     de2:	aa 27       	eor	r26, r26
     de4:	f0 0d       	add	r31, r0
     de6:	b1 1d       	adc	r27, r1
     de8:	aa 1f       	adc	r26, r26
     dea:	64 9f       	mul	r22, r20
     dec:	66 27       	eor	r22, r22
     dee:	b0 0d       	add	r27, r0
     df0:	a1 1d       	adc	r26, r1
     df2:	66 1f       	adc	r22, r22
     df4:	82 9f       	mul	r24, r18
     df6:	22 27       	eor	r18, r18
     df8:	b0 0d       	add	r27, r0
     dfa:	a1 1d       	adc	r26, r1
     dfc:	62 1f       	adc	r22, r18
     dfe:	73 9f       	mul	r23, r19
     e00:	b0 0d       	add	r27, r0
     e02:	a1 1d       	adc	r26, r1
     e04:	62 1f       	adc	r22, r18
     e06:	83 9f       	mul	r24, r19
     e08:	a0 0d       	add	r26, r0
     e0a:	61 1d       	adc	r22, r1
     e0c:	22 1f       	adc	r18, r18
     e0e:	74 9f       	mul	r23, r20
     e10:	33 27       	eor	r19, r19
     e12:	a0 0d       	add	r26, r0
     e14:	61 1d       	adc	r22, r1
     e16:	23 1f       	adc	r18, r19
     e18:	84 9f       	mul	r24, r20
     e1a:	60 0d       	add	r22, r0
     e1c:	21 1d       	adc	r18, r1
     e1e:	82 2f       	mov	r24, r18
     e20:	76 2f       	mov	r23, r22
     e22:	6a 2f       	mov	r22, r26
     e24:	11 24       	eor	r1, r1
     e26:	9f 57       	subi	r25, 0x7F	; 127
     e28:	50 40       	sbci	r21, 0x00	; 0
     e2a:	9a f0       	brmi	.+38     	; 0xe52 <__mulsf3_pse+0x88>
     e2c:	f1 f0       	breq	.+60     	; 0xe6a <__mulsf3_pse+0xa0>
     e2e:	88 23       	and	r24, r24
     e30:	4a f0       	brmi	.+18     	; 0xe44 <__mulsf3_pse+0x7a>
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	bb 1f       	adc	r27, r27
     e38:	66 1f       	adc	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	91 50       	subi	r25, 0x01	; 1
     e40:	50 40       	sbci	r21, 0x00	; 0
     e42:	a9 f7       	brne	.-22     	; 0xe2e <__mulsf3_pse+0x64>
     e44:	9e 3f       	cpi	r25, 0xFE	; 254
     e46:	51 05       	cpc	r21, r1
     e48:	80 f0       	brcs	.+32     	; 0xe6a <__mulsf3_pse+0xa0>
     e4a:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__fp_inf>
     e4e:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_szero>
     e52:	5f 3f       	cpi	r21, 0xFF	; 255
     e54:	e4 f3       	brlt	.-8      	; 0xe4e <__mulsf3_pse+0x84>
     e56:	98 3e       	cpi	r25, 0xE8	; 232
     e58:	d4 f3       	brlt	.-12     	; 0xe4e <__mulsf3_pse+0x84>
     e5a:	86 95       	lsr	r24
     e5c:	77 95       	ror	r23
     e5e:	67 95       	ror	r22
     e60:	b7 95       	ror	r27
     e62:	f7 95       	ror	r31
     e64:	e7 95       	ror	r30
     e66:	9f 5f       	subi	r25, 0xFF	; 255
     e68:	c1 f7       	brne	.-16     	; 0xe5a <__mulsf3_pse+0x90>
     e6a:	fe 2b       	or	r31, r30
     e6c:	88 0f       	add	r24, r24
     e6e:	91 1d       	adc	r25, r1
     e70:	96 95       	lsr	r25
     e72:	87 95       	ror	r24
     e74:	97 f9       	bld	r25, 7
     e76:	08 95       	ret

00000e78 <__fp_inf>:
     e78:	97 f9       	bld	r25, 7
     e7a:	9f 67       	ori	r25, 0x7F	; 127
     e7c:	80 e8       	ldi	r24, 0x80	; 128
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	08 95       	ret

00000e84 <__fp_nan>:
     e84:	9f ef       	ldi	r25, 0xFF	; 255
     e86:	80 ec       	ldi	r24, 0xC0	; 192
     e88:	08 95       	ret

00000e8a <__fp_pscA>:
     e8a:	00 24       	eor	r0, r0
     e8c:	0a 94       	dec	r0
     e8e:	16 16       	cp	r1, r22
     e90:	17 06       	cpc	r1, r23
     e92:	18 06       	cpc	r1, r24
     e94:	09 06       	cpc	r0, r25
     e96:	08 95       	ret

00000e98 <__fp_pscB>:
     e98:	00 24       	eor	r0, r0
     e9a:	0a 94       	dec	r0
     e9c:	12 16       	cp	r1, r18
     e9e:	13 06       	cpc	r1, r19
     ea0:	14 06       	cpc	r1, r20
     ea2:	05 06       	cpc	r0, r21
     ea4:	08 95       	ret

00000ea6 <__fp_round>:
     ea6:	09 2e       	mov	r0, r25
     ea8:	03 94       	inc	r0
     eaa:	00 0c       	add	r0, r0
     eac:	11 f4       	brne	.+4      	; 0xeb2 <__fp_round+0xc>
     eae:	88 23       	and	r24, r24
     eb0:	52 f0       	brmi	.+20     	; 0xec6 <__fp_round+0x20>
     eb2:	bb 0f       	add	r27, r27
     eb4:	40 f4       	brcc	.+16     	; 0xec6 <__fp_round+0x20>
     eb6:	bf 2b       	or	r27, r31
     eb8:	11 f4       	brne	.+4      	; 0xebe <__fp_round+0x18>
     eba:	60 ff       	sbrs	r22, 0
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <__fp_round+0x20>
     ebe:	6f 5f       	subi	r22, 0xFF	; 255
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	08 95       	ret

00000ec8 <__udivmodsi4>:
     ec8:	a1 e2       	ldi	r26, 0x21	; 33
     eca:	1a 2e       	mov	r1, r26
     ecc:	aa 1b       	sub	r26, r26
     ece:	bb 1b       	sub	r27, r27
     ed0:	fd 01       	movw	r30, r26
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <__udivmodsi4_ep>

00000ed4 <__udivmodsi4_loop>:
     ed4:	aa 1f       	adc	r26, r26
     ed6:	bb 1f       	adc	r27, r27
     ed8:	ee 1f       	adc	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	a2 17       	cp	r26, r18
     ede:	b3 07       	cpc	r27, r19
     ee0:	e4 07       	cpc	r30, r20
     ee2:	f5 07       	cpc	r31, r21
     ee4:	20 f0       	brcs	.+8      	; 0xeee <__udivmodsi4_ep>
     ee6:	a2 1b       	sub	r26, r18
     ee8:	b3 0b       	sbc	r27, r19
     eea:	e4 0b       	sbc	r30, r20
     eec:	f5 0b       	sbc	r31, r21

00000eee <__udivmodsi4_ep>:
     eee:	66 1f       	adc	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	1a 94       	dec	r1
     ef8:	69 f7       	brne	.-38     	; 0xed4 <__udivmodsi4_loop>
     efa:	60 95       	com	r22
     efc:	70 95       	com	r23
     efe:	80 95       	com	r24
     f00:	90 95       	com	r25
     f02:	9b 01       	movw	r18, r22
     f04:	ac 01       	movw	r20, r24
     f06:	bd 01       	movw	r22, r26
     f08:	cf 01       	movw	r24, r30
     f0a:	08 95       	ret

00000f0c <__tablejump2__>:
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	05 90       	lpm	r0, Z+
     f12:	f4 91       	lpm	r31, Z
     f14:	e0 2d       	mov	r30, r0
     f16:	09 94       	ijmp

00000f18 <malloc>:
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	91 05       	cpc	r25, r1
     f24:	10 f4       	brcc	.+4      	; 0xf2a <malloc+0x12>
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__flp>
     f2e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__flp+0x1>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	30 97       	sbiw	r30, 0x00	; 0
     f3c:	19 f1       	breq	.+70     	; 0xf84 <malloc+0x6c>
     f3e:	40 81       	ld	r20, Z
     f40:	51 81       	ldd	r21, Z+1	; 0x01
     f42:	02 81       	ldd	r16, Z+2	; 0x02
     f44:	13 81       	ldd	r17, Z+3	; 0x03
     f46:	48 17       	cp	r20, r24
     f48:	59 07       	cpc	r21, r25
     f4a:	c8 f0       	brcs	.+50     	; 0xf7e <malloc+0x66>
     f4c:	84 17       	cp	r24, r20
     f4e:	95 07       	cpc	r25, r21
     f50:	69 f4       	brne	.+26     	; 0xf6c <malloc+0x54>
     f52:	10 97       	sbiw	r26, 0x00	; 0
     f54:	31 f0       	breq	.+12     	; 0xf62 <malloc+0x4a>
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	0c 93       	st	X, r16
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	13 96       	adiw	r26, 0x03	; 3
     f5e:	1c 93       	st	X, r17
     f60:	27 c0       	rjmp	.+78     	; 0xfb0 <malloc+0x98>
     f62:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <__flp>
     f66:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <__flp+0x1>
     f6a:	22 c0       	rjmp	.+68     	; 0xfb0 <malloc+0x98>
     f6c:	21 15       	cp	r18, r1
     f6e:	31 05       	cpc	r19, r1
     f70:	19 f0       	breq	.+6      	; 0xf78 <malloc+0x60>
     f72:	42 17       	cp	r20, r18
     f74:	53 07       	cpc	r21, r19
     f76:	18 f4       	brcc	.+6      	; 0xf7e <malloc+0x66>
     f78:	9a 01       	movw	r18, r20
     f7a:	bd 01       	movw	r22, r26
     f7c:	ef 01       	movw	r28, r30
     f7e:	df 01       	movw	r26, r30
     f80:	f8 01       	movw	r30, r16
     f82:	db cf       	rjmp	.-74     	; 0xf3a <malloc+0x22>
     f84:	21 15       	cp	r18, r1
     f86:	31 05       	cpc	r19, r1
     f88:	f9 f0       	breq	.+62     	; 0xfc8 <malloc+0xb0>
     f8a:	28 1b       	sub	r18, r24
     f8c:	39 0b       	sbc	r19, r25
     f8e:	24 30       	cpi	r18, 0x04	; 4
     f90:	31 05       	cpc	r19, r1
     f92:	80 f4       	brcc	.+32     	; 0xfb4 <malloc+0x9c>
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	9b 81       	ldd	r25, Y+3	; 0x03
     f98:	61 15       	cp	r22, r1
     f9a:	71 05       	cpc	r23, r1
     f9c:	21 f0       	breq	.+8      	; 0xfa6 <malloc+0x8e>
     f9e:	fb 01       	movw	r30, r22
     fa0:	93 83       	std	Z+3, r25	; 0x03
     fa2:	82 83       	std	Z+2, r24	; 0x02
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <malloc+0x96>
     fa6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__flp+0x1>
     faa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__flp>
     fae:	fe 01       	movw	r30, r28
     fb0:	32 96       	adiw	r30, 0x02	; 2
     fb2:	44 c0       	rjmp	.+136    	; 0x103c <malloc+0x124>
     fb4:	fe 01       	movw	r30, r28
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	81 93       	st	Z+, r24
     fbc:	91 93       	st	Z+, r25
     fbe:	22 50       	subi	r18, 0x02	; 2
     fc0:	31 09       	sbc	r19, r1
     fc2:	39 83       	std	Y+1, r19	; 0x01
     fc4:	28 83       	st	Y, r18
     fc6:	3a c0       	rjmp	.+116    	; 0x103c <malloc+0x124>
     fc8:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
     fcc:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
     fd0:	23 2b       	or	r18, r19
     fd2:	41 f4       	brne	.+16     	; 0xfe4 <malloc+0xcc>
     fd4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     fd8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     fdc:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__brkval+0x1>
     fe0:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__brkval>
     fe4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     fe8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     fec:	21 15       	cp	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	41 f4       	brne	.+16     	; 0x1002 <malloc+0xea>
     ff2:	2d b7       	in	r18, 0x3d	; 61
     ff4:	3e b7       	in	r19, 0x3e	; 62
     ff6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     ffa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     ffe:	24 1b       	sub	r18, r20
    1000:	35 0b       	sbc	r19, r21
    1002:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__brkval>
    1006:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__brkval+0x1>
    100a:	e2 17       	cp	r30, r18
    100c:	f3 07       	cpc	r31, r19
    100e:	a0 f4       	brcc	.+40     	; 0x1038 <malloc+0x120>
    1010:	2e 1b       	sub	r18, r30
    1012:	3f 0b       	sbc	r19, r31
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	78 f0       	brcs	.+30     	; 0x1038 <malloc+0x120>
    101a:	ac 01       	movw	r20, r24
    101c:	4e 5f       	subi	r20, 0xFE	; 254
    101e:	5f 4f       	sbci	r21, 0xFF	; 255
    1020:	24 17       	cp	r18, r20
    1022:	35 07       	cpc	r19, r21
    1024:	48 f0       	brcs	.+18     	; 0x1038 <malloc+0x120>
    1026:	4e 0f       	add	r20, r30
    1028:	5f 1f       	adc	r21, r31
    102a:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <__brkval+0x1>
    102e:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <__brkval>
    1032:	81 93       	st	Z+, r24
    1034:	91 93       	st	Z+, r25
    1036:	02 c0       	rjmp	.+4      	; 0x103c <malloc+0x124>
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	cf 01       	movw	r24, r30
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	08 95       	ret

00001048 <free>:
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	09 f4       	brne	.+2      	; 0x1052 <free+0xa>
    1050:	81 c0       	rjmp	.+258    	; 0x1154 <free+0x10c>
    1052:	fc 01       	movw	r30, r24
    1054:	32 97       	sbiw	r30, 0x02	; 2
    1056:	13 82       	std	Z+3, r1	; 0x03
    1058:	12 82       	std	Z+2, r1	; 0x02
    105a:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__flp>
    105e:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__flp+0x1>
    1062:	10 97       	sbiw	r26, 0x00	; 0
    1064:	81 f4       	brne	.+32     	; 0x1086 <free+0x3e>
    1066:	20 81       	ld	r18, Z
    1068:	31 81       	ldd	r19, Z+1	; 0x01
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    1072:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    1076:	28 17       	cp	r18, r24
    1078:	39 07       	cpc	r19, r25
    107a:	51 f5       	brne	.+84     	; 0x10d0 <free+0x88>
    107c:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__brkval+0x1>
    1080:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__brkval>
    1084:	67 c0       	rjmp	.+206    	; 0x1154 <free+0x10c>
    1086:	ed 01       	movw	r28, r26
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	ce 17       	cp	r28, r30
    108e:	df 07       	cpc	r29, r31
    1090:	40 f4       	brcc	.+16     	; 0x10a2 <free+0x5a>
    1092:	4a 81       	ldd	r20, Y+2	; 0x02
    1094:	5b 81       	ldd	r21, Y+3	; 0x03
    1096:	9e 01       	movw	r18, r28
    1098:	41 15       	cp	r20, r1
    109a:	51 05       	cpc	r21, r1
    109c:	f1 f0       	breq	.+60     	; 0x10da <free+0x92>
    109e:	ea 01       	movw	r28, r20
    10a0:	f5 cf       	rjmp	.-22     	; 0x108c <free+0x44>
    10a2:	d3 83       	std	Z+3, r29	; 0x03
    10a4:	c2 83       	std	Z+2, r28	; 0x02
    10a6:	40 81       	ld	r20, Z
    10a8:	51 81       	ldd	r21, Z+1	; 0x01
    10aa:	84 0f       	add	r24, r20
    10ac:	95 1f       	adc	r25, r21
    10ae:	c8 17       	cp	r28, r24
    10b0:	d9 07       	cpc	r29, r25
    10b2:	59 f4       	brne	.+22     	; 0x10ca <free+0x82>
    10b4:	88 81       	ld	r24, Y
    10b6:	99 81       	ldd	r25, Y+1	; 0x01
    10b8:	84 0f       	add	r24, r20
    10ba:	95 1f       	adc	r25, r21
    10bc:	02 96       	adiw	r24, 0x02	; 2
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	93 83       	std	Z+3, r25	; 0x03
    10c8:	82 83       	std	Z+2, r24	; 0x02
    10ca:	21 15       	cp	r18, r1
    10cc:	31 05       	cpc	r19, r1
    10ce:	29 f4       	brne	.+10     	; 0x10da <free+0x92>
    10d0:	f0 93 2d 01 	sts	0x012D, r31	; 0x80012d <__flp+0x1>
    10d4:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <__flp>
    10d8:	3d c0       	rjmp	.+122    	; 0x1154 <free+0x10c>
    10da:	e9 01       	movw	r28, r18
    10dc:	fb 83       	std	Y+3, r31	; 0x03
    10de:	ea 83       	std	Y+2, r30	; 0x02
    10e0:	49 91       	ld	r20, Y+
    10e2:	59 91       	ld	r21, Y+
    10e4:	c4 0f       	add	r28, r20
    10e6:	d5 1f       	adc	r29, r21
    10e8:	ec 17       	cp	r30, r28
    10ea:	fd 07       	cpc	r31, r29
    10ec:	61 f4       	brne	.+24     	; 0x1106 <free+0xbe>
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	84 0f       	add	r24, r20
    10f4:	95 1f       	adc	r25, r21
    10f6:	02 96       	adiw	r24, 0x02	; 2
    10f8:	e9 01       	movw	r28, r18
    10fa:	99 83       	std	Y+1, r25	; 0x01
    10fc:	88 83       	st	Y, r24
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	9b 83       	std	Y+3, r25	; 0x03
    1104:	8a 83       	std	Y+2, r24	; 0x02
    1106:	e0 e0       	ldi	r30, 0x00	; 0
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	12 96       	adiw	r26, 0x02	; 2
    110c:	8d 91       	ld	r24, X+
    110e:	9c 91       	ld	r25, X
    1110:	13 97       	sbiw	r26, 0x03	; 3
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	19 f0       	breq	.+6      	; 0x111c <free+0xd4>
    1116:	fd 01       	movw	r30, r26
    1118:	dc 01       	movw	r26, r24
    111a:	f7 cf       	rjmp	.-18     	; 0x110a <free+0xc2>
    111c:	8d 91       	ld	r24, X+
    111e:	9c 91       	ld	r25, X
    1120:	11 97       	sbiw	r26, 0x01	; 1
    1122:	9d 01       	movw	r18, r26
    1124:	2e 5f       	subi	r18, 0xFE	; 254
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__brkval>
    1130:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__brkval+0x1>
    1134:	28 17       	cp	r18, r24
    1136:	39 07       	cpc	r19, r25
    1138:	69 f4       	brne	.+26     	; 0x1154 <free+0x10c>
    113a:	30 97       	sbiw	r30, 0x00	; 0
    113c:	29 f4       	brne	.+10     	; 0x1148 <free+0x100>
    113e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__flp+0x1>
    1142:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__flp>
    1146:	02 c0       	rjmp	.+4      	; 0x114c <free+0x104>
    1148:	13 82       	std	Z+3, r1	; 0x03
    114a:	12 82       	std	Z+2, r1	; 0x02
    114c:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__brkval+0x1>
    1150:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__brkval>
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <sprintf>:
    115a:	ae e0       	ldi	r26, 0x0E	; 14
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 eb       	ldi	r30, 0xB3	; 179
    1160:	f8 e0       	ldi	r31, 0x08	; 8
    1162:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__prologue_saves__+0x1c>
    1166:	0d 89       	ldd	r16, Y+21	; 0x15
    1168:	1e 89       	ldd	r17, Y+22	; 0x16
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	8c 83       	std	Y+4, r24	; 0x04
    116e:	1a 83       	std	Y+2, r17	; 0x02
    1170:	09 83       	std	Y+1, r16	; 0x01
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	9f e7       	ldi	r25, 0x7F	; 127
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	ae 01       	movw	r20, r28
    117c:	47 5e       	subi	r20, 0xE7	; 231
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	6f 89       	ldd	r22, Y+23	; 0x17
    1182:	78 8d       	ldd	r23, Y+24	; 0x18
    1184:	ce 01       	movw	r24, r28
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	0e 94 cf 08 	call	0x119e	; 0x119e <vfprintf>
    118c:	ef 81       	ldd	r30, Y+7	; 0x07
    118e:	f8 85       	ldd	r31, Y+8	; 0x08
    1190:	e0 0f       	add	r30, r16
    1192:	f1 1f       	adc	r31, r17
    1194:	10 82       	st	Z, r1
    1196:	2e 96       	adiw	r28, 0x0e	; 14
    1198:	e4 e0       	ldi	r30, 0x04	; 4
    119a:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__epilogue_restores__+0x1c>

0000119e <vfprintf>:
    119e:	ab e0       	ldi	r26, 0x0B	; 11
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 ed       	ldi	r30, 0xD5	; 213
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__prologue_saves__>
    11aa:	6c 01       	movw	r12, r24
    11ac:	7b 01       	movw	r14, r22
    11ae:	8a 01       	movw	r16, r20
    11b0:	fc 01       	movw	r30, r24
    11b2:	17 82       	std	Z+7, r1	; 0x07
    11b4:	16 82       	std	Z+6, r1	; 0x06
    11b6:	83 81       	ldd	r24, Z+3	; 0x03
    11b8:	81 ff       	sbrs	r24, 1
    11ba:	cc c1       	rjmp	.+920    	; 0x1554 <vfprintf+0x3b6>
    11bc:	ce 01       	movw	r24, r28
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	3c 01       	movw	r6, r24
    11c2:	f6 01       	movw	r30, r12
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	f7 01       	movw	r30, r14
    11c8:	93 fd       	sbrc	r25, 3
    11ca:	85 91       	lpm	r24, Z+
    11cc:	93 ff       	sbrs	r25, 3
    11ce:	81 91       	ld	r24, Z+
    11d0:	7f 01       	movw	r14, r30
    11d2:	88 23       	and	r24, r24
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <vfprintf+0x3a>
    11d6:	ba c1       	rjmp	.+884    	; 0x154c <vfprintf+0x3ae>
    11d8:	85 32       	cpi	r24, 0x25	; 37
    11da:	39 f4       	brne	.+14     	; 0x11ea <vfprintf+0x4c>
    11dc:	93 fd       	sbrc	r25, 3
    11de:	85 91       	lpm	r24, Z+
    11e0:	93 ff       	sbrs	r25, 3
    11e2:	81 91       	ld	r24, Z+
    11e4:	7f 01       	movw	r14, r30
    11e6:	85 32       	cpi	r24, 0x25	; 37
    11e8:	29 f4       	brne	.+10     	; 0x11f4 <vfprintf+0x56>
    11ea:	b6 01       	movw	r22, r12
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    11f2:	e7 cf       	rjmp	.-50     	; 0x11c2 <vfprintf+0x24>
    11f4:	91 2c       	mov	r9, r1
    11f6:	21 2c       	mov	r2, r1
    11f8:	31 2c       	mov	r3, r1
    11fa:	ff e1       	ldi	r31, 0x1F	; 31
    11fc:	f3 15       	cp	r31, r3
    11fe:	d8 f0       	brcs	.+54     	; 0x1236 <vfprintf+0x98>
    1200:	8b 32       	cpi	r24, 0x2B	; 43
    1202:	79 f0       	breq	.+30     	; 0x1222 <vfprintf+0x84>
    1204:	38 f4       	brcc	.+14     	; 0x1214 <vfprintf+0x76>
    1206:	80 32       	cpi	r24, 0x20	; 32
    1208:	79 f0       	breq	.+30     	; 0x1228 <vfprintf+0x8a>
    120a:	83 32       	cpi	r24, 0x23	; 35
    120c:	a1 f4       	brne	.+40     	; 0x1236 <vfprintf+0x98>
    120e:	23 2d       	mov	r18, r3
    1210:	20 61       	ori	r18, 0x10	; 16
    1212:	1d c0       	rjmp	.+58     	; 0x124e <vfprintf+0xb0>
    1214:	8d 32       	cpi	r24, 0x2D	; 45
    1216:	61 f0       	breq	.+24     	; 0x1230 <vfprintf+0x92>
    1218:	80 33       	cpi	r24, 0x30	; 48
    121a:	69 f4       	brne	.+26     	; 0x1236 <vfprintf+0x98>
    121c:	23 2d       	mov	r18, r3
    121e:	21 60       	ori	r18, 0x01	; 1
    1220:	16 c0       	rjmp	.+44     	; 0x124e <vfprintf+0xb0>
    1222:	83 2d       	mov	r24, r3
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	38 2e       	mov	r3, r24
    1228:	e3 2d       	mov	r30, r3
    122a:	e4 60       	ori	r30, 0x04	; 4
    122c:	3e 2e       	mov	r3, r30
    122e:	2a c0       	rjmp	.+84     	; 0x1284 <vfprintf+0xe6>
    1230:	f3 2d       	mov	r31, r3
    1232:	f8 60       	ori	r31, 0x08	; 8
    1234:	1d c0       	rjmp	.+58     	; 0x1270 <vfprintf+0xd2>
    1236:	37 fc       	sbrc	r3, 7
    1238:	2d c0       	rjmp	.+90     	; 0x1294 <vfprintf+0xf6>
    123a:	20 ed       	ldi	r18, 0xD0	; 208
    123c:	28 0f       	add	r18, r24
    123e:	2a 30       	cpi	r18, 0x0A	; 10
    1240:	40 f0       	brcs	.+16     	; 0x1252 <vfprintf+0xb4>
    1242:	8e 32       	cpi	r24, 0x2E	; 46
    1244:	b9 f4       	brne	.+46     	; 0x1274 <vfprintf+0xd6>
    1246:	36 fc       	sbrc	r3, 6
    1248:	81 c1       	rjmp	.+770    	; 0x154c <vfprintf+0x3ae>
    124a:	23 2d       	mov	r18, r3
    124c:	20 64       	ori	r18, 0x40	; 64
    124e:	32 2e       	mov	r3, r18
    1250:	19 c0       	rjmp	.+50     	; 0x1284 <vfprintf+0xe6>
    1252:	36 fe       	sbrs	r3, 6
    1254:	06 c0       	rjmp	.+12     	; 0x1262 <vfprintf+0xc4>
    1256:	8a e0       	ldi	r24, 0x0A	; 10
    1258:	98 9e       	mul	r9, r24
    125a:	20 0d       	add	r18, r0
    125c:	11 24       	eor	r1, r1
    125e:	92 2e       	mov	r9, r18
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <vfprintf+0xe6>
    1262:	ea e0       	ldi	r30, 0x0A	; 10
    1264:	2e 9e       	mul	r2, r30
    1266:	20 0d       	add	r18, r0
    1268:	11 24       	eor	r1, r1
    126a:	22 2e       	mov	r2, r18
    126c:	f3 2d       	mov	r31, r3
    126e:	f0 62       	ori	r31, 0x20	; 32
    1270:	3f 2e       	mov	r3, r31
    1272:	08 c0       	rjmp	.+16     	; 0x1284 <vfprintf+0xe6>
    1274:	8c 36       	cpi	r24, 0x6C	; 108
    1276:	21 f4       	brne	.+8      	; 0x1280 <vfprintf+0xe2>
    1278:	83 2d       	mov	r24, r3
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	38 2e       	mov	r3, r24
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0xe6>
    1280:	88 36       	cpi	r24, 0x68	; 104
    1282:	41 f4       	brne	.+16     	; 0x1294 <vfprintf+0xf6>
    1284:	f7 01       	movw	r30, r14
    1286:	93 fd       	sbrc	r25, 3
    1288:	85 91       	lpm	r24, Z+
    128a:	93 ff       	sbrs	r25, 3
    128c:	81 91       	ld	r24, Z+
    128e:	7f 01       	movw	r14, r30
    1290:	81 11       	cpse	r24, r1
    1292:	b3 cf       	rjmp	.-154    	; 0x11fa <vfprintf+0x5c>
    1294:	98 2f       	mov	r25, r24
    1296:	9f 7d       	andi	r25, 0xDF	; 223
    1298:	95 54       	subi	r25, 0x45	; 69
    129a:	93 30       	cpi	r25, 0x03	; 3
    129c:	28 f4       	brcc	.+10     	; 0x12a8 <vfprintf+0x10a>
    129e:	0c 5f       	subi	r16, 0xFC	; 252
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	9f e3       	ldi	r25, 0x3F	; 63
    12a4:	99 83       	std	Y+1, r25	; 0x01
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <vfprintf+0x124>
    12a8:	83 36       	cpi	r24, 0x63	; 99
    12aa:	31 f0       	breq	.+12     	; 0x12b8 <vfprintf+0x11a>
    12ac:	83 37       	cpi	r24, 0x73	; 115
    12ae:	71 f0       	breq	.+28     	; 0x12cc <vfprintf+0x12e>
    12b0:	83 35       	cpi	r24, 0x53	; 83
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <vfprintf+0x118>
    12b4:	59 c0       	rjmp	.+178    	; 0x1368 <vfprintf+0x1ca>
    12b6:	21 c0       	rjmp	.+66     	; 0x12fa <vfprintf+0x15c>
    12b8:	f8 01       	movw	r30, r16
    12ba:	80 81       	ld	r24, Z
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	0e 5f       	subi	r16, 0xFE	; 254
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	88 24       	eor	r8, r8
    12c4:	83 94       	inc	r8
    12c6:	91 2c       	mov	r9, r1
    12c8:	53 01       	movw	r10, r6
    12ca:	13 c0       	rjmp	.+38     	; 0x12f2 <vfprintf+0x154>
    12cc:	28 01       	movw	r4, r16
    12ce:	f2 e0       	ldi	r31, 0x02	; 2
    12d0:	4f 0e       	add	r4, r31
    12d2:	51 1c       	adc	r5, r1
    12d4:	f8 01       	movw	r30, r16
    12d6:	a0 80       	ld	r10, Z
    12d8:	b1 80       	ldd	r11, Z+1	; 0x01
    12da:	36 fe       	sbrs	r3, 6
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <vfprintf+0x146>
    12de:	69 2d       	mov	r22, r9
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <vfprintf+0x14a>
    12e4:	6f ef       	ldi	r22, 0xFF	; 255
    12e6:	7f ef       	ldi	r23, 0xFF	; 255
    12e8:	c5 01       	movw	r24, r10
    12ea:	0e 94 bb 0a 	call	0x1576	; 0x1576 <strnlen>
    12ee:	4c 01       	movw	r8, r24
    12f0:	82 01       	movw	r16, r4
    12f2:	f3 2d       	mov	r31, r3
    12f4:	ff 77       	andi	r31, 0x7F	; 127
    12f6:	3f 2e       	mov	r3, r31
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <vfprintf+0x188>
    12fa:	28 01       	movw	r4, r16
    12fc:	22 e0       	ldi	r18, 0x02	; 2
    12fe:	42 0e       	add	r4, r18
    1300:	51 1c       	adc	r5, r1
    1302:	f8 01       	movw	r30, r16
    1304:	a0 80       	ld	r10, Z
    1306:	b1 80       	ldd	r11, Z+1	; 0x01
    1308:	36 fe       	sbrs	r3, 6
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <vfprintf+0x174>
    130c:	69 2d       	mov	r22, r9
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x178>
    1312:	6f ef       	ldi	r22, 0xFF	; 255
    1314:	7f ef       	ldi	r23, 0xFF	; 255
    1316:	c5 01       	movw	r24, r10
    1318:	0e 94 b0 0a 	call	0x1560	; 0x1560 <strnlen_P>
    131c:	4c 01       	movw	r8, r24
    131e:	f3 2d       	mov	r31, r3
    1320:	f0 68       	ori	r31, 0x80	; 128
    1322:	3f 2e       	mov	r3, r31
    1324:	82 01       	movw	r16, r4
    1326:	33 fc       	sbrc	r3, 3
    1328:	1b c0       	rjmp	.+54     	; 0x1360 <vfprintf+0x1c2>
    132a:	82 2d       	mov	r24, r2
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	88 16       	cp	r8, r24
    1330:	99 06       	cpc	r9, r25
    1332:	b0 f4       	brcc	.+44     	; 0x1360 <vfprintf+0x1c2>
    1334:	b6 01       	movw	r22, r12
    1336:	80 e2       	ldi	r24, 0x20	; 32
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    133e:	2a 94       	dec	r2
    1340:	f4 cf       	rjmp	.-24     	; 0x132a <vfprintf+0x18c>
    1342:	f5 01       	movw	r30, r10
    1344:	37 fc       	sbrc	r3, 7
    1346:	85 91       	lpm	r24, Z+
    1348:	37 fe       	sbrs	r3, 7
    134a:	81 91       	ld	r24, Z+
    134c:	5f 01       	movw	r10, r30
    134e:	b6 01       	movw	r22, r12
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    1356:	21 10       	cpse	r2, r1
    1358:	2a 94       	dec	r2
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	82 1a       	sub	r8, r18
    135e:	91 08       	sbc	r9, r1
    1360:	81 14       	cp	r8, r1
    1362:	91 04       	cpc	r9, r1
    1364:	71 f7       	brne	.-36     	; 0x1342 <vfprintf+0x1a4>
    1366:	e8 c0       	rjmp	.+464    	; 0x1538 <vfprintf+0x39a>
    1368:	84 36       	cpi	r24, 0x64	; 100
    136a:	11 f0       	breq	.+4      	; 0x1370 <vfprintf+0x1d2>
    136c:	89 36       	cpi	r24, 0x69	; 105
    136e:	41 f5       	brne	.+80     	; 0x13c0 <vfprintf+0x222>
    1370:	f8 01       	movw	r30, r16
    1372:	37 fe       	sbrs	r3, 7
    1374:	07 c0       	rjmp	.+14     	; 0x1384 <vfprintf+0x1e6>
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	0c 5f       	subi	r16, 0xFC	; 252
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <vfprintf+0x1f6>
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	07 2e       	mov	r0, r23
    138a:	00 0c       	add	r0, r0
    138c:	88 0b       	sbc	r24, r24
    138e:	99 0b       	sbc	r25, r25
    1390:	0e 5f       	subi	r16, 0xFE	; 254
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	f3 2d       	mov	r31, r3
    1396:	ff 76       	andi	r31, 0x6F	; 111
    1398:	3f 2e       	mov	r3, r31
    139a:	97 ff       	sbrs	r25, 7
    139c:	09 c0       	rjmp	.+18     	; 0x13b0 <vfprintf+0x212>
    139e:	90 95       	com	r25
    13a0:	80 95       	com	r24
    13a2:	70 95       	com	r23
    13a4:	61 95       	neg	r22
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	f0 68       	ori	r31, 0x80	; 128
    13ae:	3f 2e       	mov	r3, r31
    13b0:	2a e0       	ldi	r18, 0x0A	; 10
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	a3 01       	movw	r20, r6
    13b6:	0e 94 02 0b 	call	0x1604	; 0x1604 <__ultoa_invert>
    13ba:	88 2e       	mov	r8, r24
    13bc:	86 18       	sub	r8, r6
    13be:	45 c0       	rjmp	.+138    	; 0x144a <vfprintf+0x2ac>
    13c0:	85 37       	cpi	r24, 0x75	; 117
    13c2:	31 f4       	brne	.+12     	; 0x13d0 <vfprintf+0x232>
    13c4:	23 2d       	mov	r18, r3
    13c6:	2f 7e       	andi	r18, 0xEF	; 239
    13c8:	b2 2e       	mov	r11, r18
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	25 c0       	rjmp	.+74     	; 0x141a <vfprintf+0x27c>
    13d0:	93 2d       	mov	r25, r3
    13d2:	99 7f       	andi	r25, 0xF9	; 249
    13d4:	b9 2e       	mov	r11, r25
    13d6:	8f 36       	cpi	r24, 0x6F	; 111
    13d8:	c1 f0       	breq	.+48     	; 0x140a <vfprintf+0x26c>
    13da:	18 f4       	brcc	.+6      	; 0x13e2 <vfprintf+0x244>
    13dc:	88 35       	cpi	r24, 0x58	; 88
    13de:	79 f0       	breq	.+30     	; 0x13fe <vfprintf+0x260>
    13e0:	b5 c0       	rjmp	.+362    	; 0x154c <vfprintf+0x3ae>
    13e2:	80 37       	cpi	r24, 0x70	; 112
    13e4:	19 f0       	breq	.+6      	; 0x13ec <vfprintf+0x24e>
    13e6:	88 37       	cpi	r24, 0x78	; 120
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <vfprintf+0x254>
    13ea:	b0 c0       	rjmp	.+352    	; 0x154c <vfprintf+0x3ae>
    13ec:	e9 2f       	mov	r30, r25
    13ee:	e0 61       	ori	r30, 0x10	; 16
    13f0:	be 2e       	mov	r11, r30
    13f2:	b4 fe       	sbrs	r11, 4
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <vfprintf+0x272>
    13f6:	fb 2d       	mov	r31, r11
    13f8:	f4 60       	ori	r31, 0x04	; 4
    13fa:	bf 2e       	mov	r11, r31
    13fc:	09 c0       	rjmp	.+18     	; 0x1410 <vfprintf+0x272>
    13fe:	34 fe       	sbrs	r3, 4
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <vfprintf+0x278>
    1402:	29 2f       	mov	r18, r25
    1404:	26 60       	ori	r18, 0x06	; 6
    1406:	b2 2e       	mov	r11, r18
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0x278>
    140a:	28 e0       	ldi	r18, 0x08	; 8
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	05 c0       	rjmp	.+10     	; 0x141a <vfprintf+0x27c>
    1410:	20 e1       	ldi	r18, 0x10	; 16
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x27c>
    1416:	20 e1       	ldi	r18, 0x10	; 16
    1418:	32 e0       	ldi	r19, 0x02	; 2
    141a:	f8 01       	movw	r30, r16
    141c:	b7 fe       	sbrs	r11, 7
    141e:	07 c0       	rjmp	.+14     	; 0x142e <vfprintf+0x290>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	0c 5f       	subi	r16, 0xFC	; 252
    142a:	1f 4f       	sbci	r17, 0xFF	; 255
    142c:	06 c0       	rjmp	.+12     	; 0x143a <vfprintf+0x29c>
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 5f       	subi	r16, 0xFE	; 254
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	a3 01       	movw	r20, r6
    143c:	0e 94 02 0b 	call	0x1604	; 0x1604 <__ultoa_invert>
    1440:	88 2e       	mov	r8, r24
    1442:	86 18       	sub	r8, r6
    1444:	fb 2d       	mov	r31, r11
    1446:	ff 77       	andi	r31, 0x7F	; 127
    1448:	3f 2e       	mov	r3, r31
    144a:	36 fe       	sbrs	r3, 6
    144c:	0d c0       	rjmp	.+26     	; 0x1468 <vfprintf+0x2ca>
    144e:	23 2d       	mov	r18, r3
    1450:	2e 7f       	andi	r18, 0xFE	; 254
    1452:	a2 2e       	mov	r10, r18
    1454:	89 14       	cp	r8, r9
    1456:	58 f4       	brcc	.+22     	; 0x146e <vfprintf+0x2d0>
    1458:	34 fe       	sbrs	r3, 4
    145a:	0b c0       	rjmp	.+22     	; 0x1472 <vfprintf+0x2d4>
    145c:	32 fc       	sbrc	r3, 2
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <vfprintf+0x2d4>
    1460:	83 2d       	mov	r24, r3
    1462:	8e 7e       	andi	r24, 0xEE	; 238
    1464:	a8 2e       	mov	r10, r24
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <vfprintf+0x2d4>
    1468:	b8 2c       	mov	r11, r8
    146a:	a3 2c       	mov	r10, r3
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <vfprintf+0x2d6>
    146e:	b8 2c       	mov	r11, r8
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <vfprintf+0x2d6>
    1472:	b9 2c       	mov	r11, r9
    1474:	a4 fe       	sbrs	r10, 4
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <vfprintf+0x2f8>
    1478:	fe 01       	movw	r30, r28
    147a:	e8 0d       	add	r30, r8
    147c:	f1 1d       	adc	r31, r1
    147e:	80 81       	ld	r24, Z
    1480:	80 33       	cpi	r24, 0x30	; 48
    1482:	21 f4       	brne	.+8      	; 0x148c <vfprintf+0x2ee>
    1484:	9a 2d       	mov	r25, r10
    1486:	99 7e       	andi	r25, 0xE9	; 233
    1488:	a9 2e       	mov	r10, r25
    148a:	09 c0       	rjmp	.+18     	; 0x149e <vfprintf+0x300>
    148c:	a2 fe       	sbrs	r10, 2
    148e:	06 c0       	rjmp	.+12     	; 0x149c <vfprintf+0x2fe>
    1490:	b3 94       	inc	r11
    1492:	b3 94       	inc	r11
    1494:	04 c0       	rjmp	.+8      	; 0x149e <vfprintf+0x300>
    1496:	8a 2d       	mov	r24, r10
    1498:	86 78       	andi	r24, 0x86	; 134
    149a:	09 f0       	breq	.+2      	; 0x149e <vfprintf+0x300>
    149c:	b3 94       	inc	r11
    149e:	a3 fc       	sbrc	r10, 3
    14a0:	11 c0       	rjmp	.+34     	; 0x14c4 <vfprintf+0x326>
    14a2:	a0 fe       	sbrs	r10, 0
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0x314>
    14a6:	b2 14       	cp	r11, r2
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <vfprintf+0x32e>
    14aa:	28 0c       	add	r2, r8
    14ac:	92 2c       	mov	r9, r2
    14ae:	9b 18       	sub	r9, r11
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <vfprintf+0x330>
    14b2:	b2 14       	cp	r11, r2
    14b4:	60 f4       	brcc	.+24     	; 0x14ce <vfprintf+0x330>
    14b6:	b6 01       	movw	r22, r12
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    14c0:	b3 94       	inc	r11
    14c2:	f7 cf       	rjmp	.-18     	; 0x14b2 <vfprintf+0x314>
    14c4:	b2 14       	cp	r11, r2
    14c6:	18 f4       	brcc	.+6      	; 0x14ce <vfprintf+0x330>
    14c8:	2b 18       	sub	r2, r11
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vfprintf+0x332>
    14cc:	98 2c       	mov	r9, r8
    14ce:	21 2c       	mov	r2, r1
    14d0:	a4 fe       	sbrs	r10, 4
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <vfprintf+0x356>
    14d4:	b6 01       	movw	r22, r12
    14d6:	80 e3       	ldi	r24, 0x30	; 48
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    14de:	a2 fe       	sbrs	r10, 2
    14e0:	17 c0       	rjmp	.+46     	; 0x1510 <vfprintf+0x372>
    14e2:	a1 fc       	sbrc	r10, 1
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <vfprintf+0x34e>
    14e6:	88 e7       	ldi	r24, 0x78	; 120
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <vfprintf+0x352>
    14ec:	88 e5       	ldi	r24, 0x58	; 88
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	b6 01       	movw	r22, r12
    14f2:	0c c0       	rjmp	.+24     	; 0x150c <vfprintf+0x36e>
    14f4:	8a 2d       	mov	r24, r10
    14f6:	86 78       	andi	r24, 0x86	; 134
    14f8:	59 f0       	breq	.+22     	; 0x1510 <vfprintf+0x372>
    14fa:	a1 fe       	sbrs	r10, 1
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <vfprintf+0x364>
    14fe:	8b e2       	ldi	r24, 0x2B	; 43
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <vfprintf+0x366>
    1502:	80 e2       	ldi	r24, 0x20	; 32
    1504:	a7 fc       	sbrc	r10, 7
    1506:	8d e2       	ldi	r24, 0x2D	; 45
    1508:	b6 01       	movw	r22, r12
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    1510:	89 14       	cp	r8, r9
    1512:	38 f4       	brcc	.+14     	; 0x1522 <vfprintf+0x384>
    1514:	b6 01       	movw	r22, r12
    1516:	80 e3       	ldi	r24, 0x30	; 48
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    151e:	9a 94       	dec	r9
    1520:	f7 cf       	rjmp	.-18     	; 0x1510 <vfprintf+0x372>
    1522:	8a 94       	dec	r8
    1524:	f3 01       	movw	r30, r6
    1526:	e8 0d       	add	r30, r8
    1528:	f1 1d       	adc	r31, r1
    152a:	80 81       	ld	r24, Z
    152c:	b6 01       	movw	r22, r12
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    1534:	81 10       	cpse	r8, r1
    1536:	f5 cf       	rjmp	.-22     	; 0x1522 <vfprintf+0x384>
    1538:	22 20       	and	r2, r2
    153a:	09 f4       	brne	.+2      	; 0x153e <vfprintf+0x3a0>
    153c:	42 ce       	rjmp	.-892    	; 0x11c2 <vfprintf+0x24>
    153e:	b6 01       	movw	r22, r12
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 c6 0a 	call	0x158c	; 0x158c <fputc>
    1548:	2a 94       	dec	r2
    154a:	f6 cf       	rjmp	.-20     	; 0x1538 <vfprintf+0x39a>
    154c:	f6 01       	movw	r30, r12
    154e:	86 81       	ldd	r24, Z+6	; 0x06
    1550:	97 81       	ldd	r25, Z+7	; 0x07
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <vfprintf+0x3ba>
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	2b 96       	adiw	r28, 0x0b	; 11
    155a:	e2 e1       	ldi	r30, 0x12	; 18
    155c:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__epilogue_restores__>

00001560 <strnlen_P>:
    1560:	fc 01       	movw	r30, r24
    1562:	05 90       	lpm	r0, Z+
    1564:	61 50       	subi	r22, 0x01	; 1
    1566:	70 40       	sbci	r23, 0x00	; 0
    1568:	01 10       	cpse	r0, r1
    156a:	d8 f7       	brcc	.-10     	; 0x1562 <strnlen_P+0x2>
    156c:	80 95       	com	r24
    156e:	90 95       	com	r25
    1570:	8e 0f       	add	r24, r30
    1572:	9f 1f       	adc	r25, r31
    1574:	08 95       	ret

00001576 <strnlen>:
    1576:	fc 01       	movw	r30, r24
    1578:	61 50       	subi	r22, 0x01	; 1
    157a:	70 40       	sbci	r23, 0x00	; 0
    157c:	01 90       	ld	r0, Z+
    157e:	01 10       	cpse	r0, r1
    1580:	d8 f7       	brcc	.-10     	; 0x1578 <strnlen+0x2>
    1582:	80 95       	com	r24
    1584:	90 95       	com	r25
    1586:	8e 0f       	add	r24, r30
    1588:	9f 1f       	adc	r25, r31
    158a:	08 95       	ret

0000158c <fputc>:
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	fb 01       	movw	r30, r22
    1596:	23 81       	ldd	r18, Z+3	; 0x03
    1598:	21 fd       	sbrc	r18, 1
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <fputc+0x16>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	2c c0       	rjmp	.+88     	; 0x15fa <fputc+0x6e>
    15a2:	22 ff       	sbrs	r18, 2
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <fputc+0x46>
    15a6:	46 81       	ldd	r20, Z+6	; 0x06
    15a8:	57 81       	ldd	r21, Z+7	; 0x07
    15aa:	24 81       	ldd	r18, Z+4	; 0x04
    15ac:	35 81       	ldd	r19, Z+5	; 0x05
    15ae:	42 17       	cp	r20, r18
    15b0:	53 07       	cpc	r21, r19
    15b2:	44 f4       	brge	.+16     	; 0x15c4 <fputc+0x38>
    15b4:	a0 81       	ld	r26, Z
    15b6:	b1 81       	ldd	r27, Z+1	; 0x01
    15b8:	9d 01       	movw	r18, r26
    15ba:	2f 5f       	subi	r18, 0xFF	; 255
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	31 83       	std	Z+1, r19	; 0x01
    15c0:	20 83       	st	Z, r18
    15c2:	8c 93       	st	X, r24
    15c4:	26 81       	ldd	r18, Z+6	; 0x06
    15c6:	37 81       	ldd	r19, Z+7	; 0x07
    15c8:	2f 5f       	subi	r18, 0xFF	; 255
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	37 83       	std	Z+7, r19	; 0x07
    15ce:	26 83       	std	Z+6, r18	; 0x06
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <fputc+0x6e>
    15d2:	8b 01       	movw	r16, r22
    15d4:	ec 01       	movw	r28, r24
    15d6:	fb 01       	movw	r30, r22
    15d8:	00 84       	ldd	r0, Z+8	; 0x08
    15da:	f1 85       	ldd	r31, Z+9	; 0x09
    15dc:	e0 2d       	mov	r30, r0
    15de:	09 95       	icall
    15e0:	89 2b       	or	r24, r25
    15e2:	e1 f6       	brne	.-72     	; 0x159c <fputc+0x10>
    15e4:	d8 01       	movw	r26, r16
    15e6:	16 96       	adiw	r26, 0x06	; 6
    15e8:	8d 91       	ld	r24, X+
    15ea:	9c 91       	ld	r25, X
    15ec:	17 97       	sbiw	r26, 0x07	; 7
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	17 96       	adiw	r26, 0x07	; 7
    15f2:	9c 93       	st	X, r25
    15f4:	8e 93       	st	-X, r24
    15f6:	16 97       	sbiw	r26, 0x06	; 6
    15f8:	ce 01       	movw	r24, r28
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <__ultoa_invert>:
    1604:	fa 01       	movw	r30, r20
    1606:	aa 27       	eor	r26, r26
    1608:	28 30       	cpi	r18, 0x08	; 8
    160a:	51 f1       	breq	.+84     	; 0x1660 <__ultoa_invert+0x5c>
    160c:	20 31       	cpi	r18, 0x10	; 16
    160e:	81 f1       	breq	.+96     	; 0x1670 <__ultoa_invert+0x6c>
    1610:	e8 94       	clt
    1612:	6f 93       	push	r22
    1614:	6e 7f       	andi	r22, 0xFE	; 254
    1616:	6e 5f       	subi	r22, 0xFE	; 254
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	8f 4f       	sbci	r24, 0xFF	; 255
    161c:	9f 4f       	sbci	r25, 0xFF	; 255
    161e:	af 4f       	sbci	r26, 0xFF	; 255
    1620:	b1 e0       	ldi	r27, 0x01	; 1
    1622:	3e d0       	rcall	.+124    	; 0x16a0 <__ultoa_invert+0x9c>
    1624:	b4 e0       	ldi	r27, 0x04	; 4
    1626:	3c d0       	rcall	.+120    	; 0x16a0 <__ultoa_invert+0x9c>
    1628:	67 0f       	add	r22, r23
    162a:	78 1f       	adc	r23, r24
    162c:	89 1f       	adc	r24, r25
    162e:	9a 1f       	adc	r25, r26
    1630:	a1 1d       	adc	r26, r1
    1632:	68 0f       	add	r22, r24
    1634:	79 1f       	adc	r23, r25
    1636:	8a 1f       	adc	r24, r26
    1638:	91 1d       	adc	r25, r1
    163a:	a1 1d       	adc	r26, r1
    163c:	6a 0f       	add	r22, r26
    163e:	71 1d       	adc	r23, r1
    1640:	81 1d       	adc	r24, r1
    1642:	91 1d       	adc	r25, r1
    1644:	a1 1d       	adc	r26, r1
    1646:	20 d0       	rcall	.+64     	; 0x1688 <__ultoa_invert+0x84>
    1648:	09 f4       	brne	.+2      	; 0x164c <__ultoa_invert+0x48>
    164a:	68 94       	set
    164c:	3f 91       	pop	r19
    164e:	2a e0       	ldi	r18, 0x0A	; 10
    1650:	26 9f       	mul	r18, r22
    1652:	11 24       	eor	r1, r1
    1654:	30 19       	sub	r19, r0
    1656:	30 5d       	subi	r19, 0xD0	; 208
    1658:	31 93       	st	Z+, r19
    165a:	de f6       	brtc	.-74     	; 0x1612 <__ultoa_invert+0xe>
    165c:	cf 01       	movw	r24, r30
    165e:	08 95       	ret
    1660:	46 2f       	mov	r20, r22
    1662:	47 70       	andi	r20, 0x07	; 7
    1664:	40 5d       	subi	r20, 0xD0	; 208
    1666:	41 93       	st	Z+, r20
    1668:	b3 e0       	ldi	r27, 0x03	; 3
    166a:	0f d0       	rcall	.+30     	; 0x168a <__ultoa_invert+0x86>
    166c:	c9 f7       	brne	.-14     	; 0x1660 <__ultoa_invert+0x5c>
    166e:	f6 cf       	rjmp	.-20     	; 0x165c <__ultoa_invert+0x58>
    1670:	46 2f       	mov	r20, r22
    1672:	4f 70       	andi	r20, 0x0F	; 15
    1674:	40 5d       	subi	r20, 0xD0	; 208
    1676:	4a 33       	cpi	r20, 0x3A	; 58
    1678:	18 f0       	brcs	.+6      	; 0x1680 <__ultoa_invert+0x7c>
    167a:	49 5d       	subi	r20, 0xD9	; 217
    167c:	31 fd       	sbrc	r19, 1
    167e:	40 52       	subi	r20, 0x20	; 32
    1680:	41 93       	st	Z+, r20
    1682:	02 d0       	rcall	.+4      	; 0x1688 <__ultoa_invert+0x84>
    1684:	a9 f7       	brne	.-22     	; 0x1670 <__ultoa_invert+0x6c>
    1686:	ea cf       	rjmp	.-44     	; 0x165c <__ultoa_invert+0x58>
    1688:	b4 e0       	ldi	r27, 0x04	; 4
    168a:	a6 95       	lsr	r26
    168c:	97 95       	ror	r25
    168e:	87 95       	ror	r24
    1690:	77 95       	ror	r23
    1692:	67 95       	ror	r22
    1694:	ba 95       	dec	r27
    1696:	c9 f7       	brne	.-14     	; 0x168a <__ultoa_invert+0x86>
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	61 05       	cpc	r22, r1
    169c:	71 05       	cpc	r23, r1
    169e:	08 95       	ret
    16a0:	9b 01       	movw	r18, r22
    16a2:	ac 01       	movw	r20, r24
    16a4:	0a 2e       	mov	r0, r26
    16a6:	06 94       	lsr	r0
    16a8:	57 95       	ror	r21
    16aa:	47 95       	ror	r20
    16ac:	37 95       	ror	r19
    16ae:	27 95       	ror	r18
    16b0:	ba 95       	dec	r27
    16b2:	c9 f7       	brne	.-14     	; 0x16a6 <__ultoa_invert+0xa2>
    16b4:	62 0f       	add	r22, r18
    16b6:	73 1f       	adc	r23, r19
    16b8:	84 1f       	adc	r24, r20
    16ba:	95 1f       	adc	r25, r21
    16bc:	a0 1d       	adc	r26, r0
    16be:	08 95       	ret

000016c0 <__prologue_saves__>:
    16c0:	2f 92       	push	r2
    16c2:	3f 92       	push	r3
    16c4:	4f 92       	push	r4
    16c6:	5f 92       	push	r5
    16c8:	6f 92       	push	r6
    16ca:	7f 92       	push	r7
    16cc:	8f 92       	push	r8
    16ce:	9f 92       	push	r9
    16d0:	af 92       	push	r10
    16d2:	bf 92       	push	r11
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	ca 1b       	sub	r28, r26
    16ea:	db 0b       	sbc	r29, r27
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	09 94       	ijmp

000016f8 <__epilogue_restores__>:
    16f8:	2a 88       	ldd	r2, Y+18	; 0x12
    16fa:	39 88       	ldd	r3, Y+17	; 0x11
    16fc:	48 88       	ldd	r4, Y+16	; 0x10
    16fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1700:	6e 84       	ldd	r6, Y+14	; 0x0e
    1702:	7d 84       	ldd	r7, Y+13	; 0x0d
    1704:	8c 84       	ldd	r8, Y+12	; 0x0c
    1706:	9b 84       	ldd	r9, Y+11	; 0x0b
    1708:	aa 84       	ldd	r10, Y+10	; 0x0a
    170a:	b9 84       	ldd	r11, Y+9	; 0x09
    170c:	c8 84       	ldd	r12, Y+8	; 0x08
    170e:	df 80       	ldd	r13, Y+7	; 0x07
    1710:	ee 80       	ldd	r14, Y+6	; 0x06
    1712:	fd 80       	ldd	r15, Y+5	; 0x05
    1714:	0c 81       	ldd	r16, Y+4	; 0x04
    1716:	1b 81       	ldd	r17, Y+3	; 0x03
    1718:	aa 81       	ldd	r26, Y+2	; 0x02
    171a:	b9 81       	ldd	r27, Y+1	; 0x01
    171c:	ce 0f       	add	r28, r30
    171e:	d1 1d       	adc	r29, r1
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	ed 01       	movw	r28, r26
    172c:	08 95       	ret

0000172e <_exit>:
    172e:	f8 94       	cli

00001730 <__stop_program>:
    1730:	ff cf       	rjmp	.-2      	; 0x1730 <__stop_program>
